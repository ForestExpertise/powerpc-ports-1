From dbf2bc9e817ba648b73d9e76a094e5b47e902b3b Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 22 Mar 2025 17:42:04 +0800
Subject: [PATCH 2/4] Handle isnan/isinf correctly

---
 src/database/rrddim.h          |  5 +++++
 src/libnetdata/buffer/buffer.h |  6 ++++++
 src/ml/ml_kmeans.cc            | 12 ++++++------
 3 files changed, 17 insertions(+), 6 deletions(-)

diff --git a/src/database/rrddim.h b/src/database/rrddim.h
index 3cf3bfc8b..e80eff547 100644
--- a/src/database/rrddim.h
+++ b/src/database/rrddim.h
@@ -11,6 +11,11 @@ typedef struct rrddim_acquired RRDDIM_ACQUIRED;
 typedef struct ml_dimension rrd_ml_dimension_t;
 typedef struct rrdmetric_acquired RRDMETRIC_ACQUIRED;
 
+#ifdef __cplusplus
+#include <cmath>
+using std::isnan;
+#endif
+
 #include "rrdset.h"
 
 // options are permanent configuration options (no atomics to alter/access them)
diff --git a/src/libnetdata/buffer/buffer.h b/src/libnetdata/buffer/buffer.h
index 17b602bea..eef3066f5 100644
--- a/src/libnetdata/buffer/buffer.h
+++ b/src/libnetdata/buffer/buffer.h
@@ -10,6 +10,12 @@
 
 #define BUFFER_JSON_MAX_DEPTH 32 // max is 255
 
+#ifdef __cplusplus
+#include <cmath>
+using std::isinf;
+using std::isnan;
+#endif
+
 extern const char hex_digits[16];
 extern const char hex_digits_lower[16];
 extern const char base64_digits[64];
diff --git a/src/ml/ml_kmeans.cc b/src/ml/ml_kmeans.cc
index b3dffe01d..af0aa471e 100644
--- a/src/ml/ml_kmeans.cc
+++ b/src/ml/ml_kmeans.cc
@@ -61,15 +61,15 @@ ml_kmeans_anomaly_score(const ml_kmeans_inlined_t *inlined_km, const DSample &DS
 }
 
 static void ml_buffer_json_member_add_double(BUFFER *wb, const char *key, calculated_number_t cn) {
-    if (!isnan(cn) && !isinf(cn)) {
+    if (!std::isnan(cn) && !std::isinf(cn)) {
         buffer_json_member_add_double(wb, key, cn);
         return;
     }
 
     const char *classification = nullptr;
-    if (isnan(cn)) {
+    if (std::isnan(cn)) {
         classification = "nan";
-    } else if (isinf(cn)) {
+    } else if (std::isinf(cn)) {
         if (cn > 0) {
             classification = "+inf";
         } else {
@@ -81,15 +81,15 @@ static void ml_buffer_json_member_add_double(BUFFER *wb, const char *key, calcul
 }
 
 static void ml_buffer_json_add_array_item_double(BUFFER *wb, calculated_number_t cn) {
-    if (!isnan(cn) && !isinf(cn)) {
+    if (!std::isnan(cn) && !std::isinf(cn)) {
         buffer_json_add_array_item_double(wb, cn);
         return;
     }
 
     const char *classification = nullptr;
-    if (isnan(cn)) {
+    if (std::isnan(cn)) {
         classification = "nan";
-    } else if (isinf(cn)) {
+    } else if (std::isinf(cn)) {
         if (cn > 0) {
             classification = "+inf";
         } else if (cn < 0) {
-- 
2.48.0

