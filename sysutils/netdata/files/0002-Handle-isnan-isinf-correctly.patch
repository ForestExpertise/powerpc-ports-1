From c106aa38ebffe7e34d6765544e03fddd914c6816 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 22 Mar 2025 17:42:04 +0800
Subject: [PATCH] Improve handling of isnan/isinf

---
 src/database/rrddim.h          | 7 +++++++
 src/libnetdata/buffer/buffer.h | 8 ++++++++
 src/ml/ml_kmeans.cc            | 8 ++++++++
 3 files changed, 23 insertions(+)

diff --git a/src/database/rrddim.h b/src/database/rrddim.h
index 3cf3bfc8b..19f72b23a 100644
--- a/src/database/rrddim.h
+++ b/src/database/rrddim.h
@@ -11,6 +11,13 @@ typedef struct rrddim_acquired RRDDIM_ACQUIRED;
 typedef struct ml_dimension rrd_ml_dimension_t;
 typedef struct rrdmetric_acquired RRDMETRIC_ACQUIRED;
 
+// gcc with libstdc++ may require this,
+// but with libc++ it does not work correctly.
+#if defined(__cplusplus) && !defined(_LIBCPP_VERSION)
+#include <cmath>
+using std::isnan;
+#endif
+
 #include "rrdset.h"
 
 // options are permanent configuration options (no atomics to alter/access them)
diff --git a/src/libnetdata/buffer/buffer.h b/src/libnetdata/buffer/buffer.h
index 17b602bea..6a3b3d12a 100644
--- a/src/libnetdata/buffer/buffer.h
+++ b/src/libnetdata/buffer/buffer.h
@@ -10,6 +10,14 @@
 
 #define BUFFER_JSON_MAX_DEPTH 32 // max is 255
 
+// gcc with libstdc++ may require this,
+// but with libc++ it does not work correctly.
+#if defined(__cplusplus) && !defined(_LIBCPP_VERSION)
+#include <cmath>
+using std::isinf;
+using std::isnan;
+#endif
+
 extern const char hex_digits[16];
 extern const char hex_digits_lower[16];
 extern const char base64_digits[64];
diff --git a/src/ml/ml_kmeans.cc b/src/ml/ml_kmeans.cc
index b3dffe01d..1617d4486 100644
--- a/src/ml/ml_kmeans.cc
+++ b/src/ml/ml_kmeans.cc
@@ -4,6 +4,14 @@
 #include "libnetdata/libnetdata.h"
 #include "dlib/dlib/clustering.h"
 
+// gcc with libstdc++ may require this,
+// but with libc++ it does not work correctly.
+#if !defined(_LIBCPP_VERSION)
+#include <cmath>
+using std::isinf;
+using std::isnan;
+#endif
+
 void
 ml_kmeans_init(ml_kmeans_t *kmeans)
 {
