From 8716834989c2da02b2014dab6914193fa2424945 Mon Sep 17 00:00:00 2001
From: Davide Santangelo <davide.santangelo@gmail.com>
Date: Thu, 13 Mar 2025 07:30:57 +0100
Subject: [PATCH] feat: Enable architecture-specific optimizations and add
 support for ARM and PowerPC

This commit addresses issue #9 by enhancing the Makefile to automatically detect the target architecture and enable appropriate compiler optimizations.

Key changes:

-   Introduced `ENABLE_ARCH_DETECTION` variable to control architecture detection.
-   Added detection for x86/x86_64, PowerPC, and ARM architectures.
-   Enabled SIMD optimizations (SSE4.2, AVX2, ALTIVEC, NEON) based on detected architecture capabilities.
-   Added platform specific flags for ARM, including a special case for Apple Silicon.
-   Added clean rule to remove `krep_test.o` file

This allows krep to leverage hardware-specific features for improved performance across a wider range of platforms.

Fixes #9.
---
 Makefile | 56 ++++++++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 48 insertions(+), 8 deletions(-)

diff --git a/Makefile b/Makefile
index 5c63a27..557c035 100644
--- Makefile
+++ Makefile
@@ -5,17 +5,57 @@
 PREFIX ?= /usr/local
 BINDIR = $(PREFIX)/bin
 
+# Set to 0 to disable architecture-specific optimizations
+ENABLE_ARCH_DETECTION ?= 1
+
 CC = gcc
 CFLAGS = -Wall -Wextra -O3 -std=c11 -pthread -D_GNU_SOURCE -D_DEFAULT_SOURCE
 LDFLAGS =
 
-# Check for SIMD support
-ifeq ($(shell $(CC) -march=native -dM -E - < /dev/null | grep -q '__SSE4_2__' && echo yes),yes)
-    CFLAGS += -msse4.2
-endif
-
-ifeq ($(shell $(CC) -march=native -dM -E - < /dev/null | grep -q '__AVX2__' && echo yes),yes)
-    CFLAGS += -mavx2
+# Architecture-specific optimizations
+ifeq ($(ENABLE_ARCH_DETECTION),1)
+    # Detect architecture type
+    ARCH := $(shell uname -m)
+    OS := $(shell uname -s)
+    
+    # x86/x86_64 uses -march=native
+    ifneq (,$(filter x86_64 i386 i686,$(ARCH)))
+        # Check for SIMD support on x86/x86_64
+        ifeq ($(shell $(CC) -march=native -dM -E - < /dev/null 2>/dev/null | grep -q '__SSE4_2__' && echo yes),yes)
+            CFLAGS += -msse4.2
+        endif
+
+        ifeq ($(shell $(CC) -march=native -dM -E - < /dev/null 2>/dev/null | grep -q '__AVX2__' && echo yes),yes)
+            CFLAGS += -mavx2
+        endif
+    endif
+    
+    # PowerPC uses -mcpu=native
+    ifneq (,$(filter ppc ppc64 powerpc,$(ARCH)))
+        # Check for SIMD support on PowerPC
+        ifeq ($(shell $(CC) -mcpu=native -dM -E - < /dev/null 2>/dev/null | grep -q 'ALTIVEC' && echo yes),yes)
+            CFLAGS += -maltivec
+        endif
+    endif
+    
+    # ARM detection
+    ifneq (,$(filter arm arm64 aarch64,$(ARCH)))
+        # Special case for Apple Silicon (macOS on ARM)
+        ifneq (,$(filter Darwin,$(OS)))
+            # Apple Silicon has NEON by default, no need for special flags
+            # Just define the feature macro if needed
+            CFLAGS += -D__ARM_NEON
+        else
+            # For other ARM platforms (Linux, etc.), try to use appropriate flags
+            ifeq ($(shell $(CC) -mcpu=native -dM -E - < /dev/null 2>/dev/null | grep -q '__ARM_NEON' && echo yes),yes)
+                # Different ARM platforms may use different flag syntax
+                ifneq (,$(filter arm,$(ARCH)))
+                    CFLAGS += -mfpu=neon
+                endif
+                # For arm64/aarch64, NEON is typically standard and doesn't need -mfpu
+            endif
+        endif
+    endif
 endif
 
 SRC = krep.c
@@ -46,7 +86,7 @@ krep_test.o: $(SRC)
 	$(CC) $(CFLAGS) -DTESTING -c $(SRC) -o krep_test.o
 
 clean:
-	rm -f $(OBJ) $(EXEC) $(TEST_OBJ) $(TEST_EXEC)
+	rm -f $(OBJ) $(EXEC) $(TEST_OBJ) $(TEST_EXEC) krep_test.o
 
 install: $(EXEC)
 	install -d $(DESTDIR)$(BINDIR)

From 2f81bf5ae9bfe6e76215b1a7250d9bdd9dc6d2ed Mon Sep 17 00:00:00 2001
From: Davide Santangelo <davide.santangelo@gmail.com>
Date: Thu, 13 Mar 2025 08:49:53 +0100
Subject: [PATCH] fix(build): Correct PowerPC architecture detection on macOS
 (#9)

This commit addresses issue #9, where the Makefile's architecture detection
failed to correctly identify PowerPC Macs running macOS.

The issue stemmed from `uname -m` returning "Power Macintosh" on these systems,
which wasn't handled by the existing logic.

This commit introduces a special case for macOS (Darwin) where, if `uname -m`
returns "Power Macintosh", `uname -p` is used instead, which correctly
returns "powerpc".

Additionally, the PowerPC filter in the CFLAGS section is updated to include
"powerpc64" to ensure proper handling of 64-bit PowerPC architectures.
---
 Makefile | 14 ++++++++++++--
 1 file changed, 12 insertions(+), 2 deletions(-)

diff --git a/Makefile b/Makefile
index 557c035..79fedce 100644
--- Makefile
+++ Makefile
@@ -14,9 +14,19 @@ LDFLAGS =
 
 # Architecture-specific optimizations
 ifeq ($(ENABLE_ARCH_DETECTION),1)
+    # Detect OS first
+    OS := $(shell uname -s)
+    
     # Detect architecture type
     ARCH := $(shell uname -m)
-    OS := $(shell uname -s)
+    
+    # Special case for PowerPC Macs which return "Power Macintosh" from uname -m
+    ifeq ($(OS),Darwin)
+        ifeq ($(ARCH),Power Macintosh)
+            # Use uname -p instead which returns "powerpc"
+            ARCH := $(shell uname -p)
+        endif
+    endif
     
     # x86/x86_64 uses -march=native
     ifneq (,$(filter x86_64 i386 i686,$(ARCH)))
@@ -31,7 +41,7 @@ ifeq ($(ENABLE_ARCH_DETECTION),1)
     endif
     
     # PowerPC uses -mcpu=native
-    ifneq (,$(filter ppc ppc64 powerpc,$(ARCH)))
+    ifneq (,$(filter ppc ppc64 powerpc powerpc64,$(ARCH)))
         # Check for SIMD support on PowerPC
         ifeq ($(shell $(CC) -mcpu=native -dM -E - < /dev/null 2>/dev/null | grep -q 'ALTIVEC' && echo yes),yes)
             CFLAGS += -maltivec
