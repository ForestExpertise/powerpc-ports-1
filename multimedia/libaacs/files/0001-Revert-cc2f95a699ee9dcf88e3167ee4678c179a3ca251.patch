From ba93f3a3a10833ab446a2dd94c9b4956e5d49377 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Mon, 12 May 2025 23:44:20 +0800
Subject: [PATCH 1/4] Revert cc2f95a699ee9dcf88e3167ee4678c179a3ca251

---
 src/file/mmc_device_darwin.c | 161 +++++++----------------------------
 1 file changed, 31 insertions(+), 130 deletions(-)

diff --git src/file/mmc_device_darwin.c src/file/mmc_device_darwin.c
index a4e2098..71debb2 100644
--- src/file/mmc_device_darwin.c
+++ src/file/mmc_device_darwin.c
@@ -70,12 +70,6 @@
 /*
  *
  */
-enum disk_state_e {
-    disk_mounted,
-    disk_unmounted,
-    disk_appeared,
-    disk_mounting
-};
 
 struct mmcdev {
     /* Interfaces required for low-level device communication */
@@ -89,9 +83,8 @@ struct mmcdev {
     /* for mounting/unmounting the disc */
     DADiskRef disk;
     DASessionRef session;
-    enum disk_state_e disk_state;
+    bool is_mounted;
     dispatch_semaphore_t sync_sem;
-    dispatch_queue_t background_queue;
 };
 
 int device_send_cmd(MMCDEV *mmc, const uint8_t *cmd, uint8_t *buf, size_t tx, size_t rx)
@@ -201,7 +194,7 @@ static void iokit_unmount_complete(DADiskRef disk, DADissenterRef dissenter,
         BD_DEBUG(DBG_MMC, "Could not unmount the disc\n");
     } else {
         BD_DEBUG(DBG_MMC, "Disc unmounted\n");
-        mmc->disk_state = disk_unmounted;
+        mmc->is_mounted = 0;
     }
     dispatch_semaphore_signal(mmc->sync_sem);
 }
@@ -209,25 +202,29 @@ static void iokit_unmount_complete(DADiskRef disk, DADissenterRef dissenter,
 static void iokit_mount_complete(DADiskRef disk, DADissenterRef dissenter,
                                  void *context) {
     (void) disk; /* suppress warning */
+    (void) dissenter; /* suppress warning */
     MMCDEV *mmc = context;
 
     if (dissenter) {
-        DAReturn code = DADissenterGetStatus(dissenter);
-        BD_DEBUG(DBG_MMC, "Could not mount the disc (%8X)\n", code);
-        mmc->disk_state = disk_unmounted;
+        BD_DEBUG(DBG_MMC, "Could not mount the disc\n");
     } else {
         BD_DEBUG(DBG_MMC, "Disc mounted\n");
-        mmc->disk_state = disk_mounted;
     }
+
+    /* FIXME: The disc does not actually mount whether there is
+     * a dissenter or not, the OS mounts the disc automatically
+     * kind of racing against us mounting the disc.
+     * It is pure luck if the disc is mounted or not, sometimes
+     * we are lucky enough, especially because the runloop is
+     * running for 10 seconds, which most of the time is long
+     * enough for the OS to mount the disc again.
+     */
+    mmc->is_mounted = 1;
     dispatch_semaphore_signal(mmc->sync_sem);
 }
 
-/* Unmount the disk at mmc->disk
- * Note: This MAY NOT be called on the background queue,
- *       as that would lead to a deadlock.
- */
 static int iokit_unmount(MMCDEV *mmc) {
-    if (disk_unmounted == mmc->disk_state) {
+    if (0 == mmc->is_mounted) {
         return 0; /* nothing to do */
     }
 
@@ -236,22 +233,17 @@ static int iokit_unmount(MMCDEV *mmc) {
     DADiskUnmount(mmc->disk, kDADiskUnmountOptionForce, iokit_unmount_complete, mmc);
     dispatch_semaphore_wait(mmc->sync_sem, DISPATCH_TIME_FOREVER);
 
-    return (mmc->disk_state == disk_unmounted) ? 0 : -1;
+    return mmc->is_mounted ? -1 : 0;
 }
 
-/* Mount the disk at mmc->disk
- * Note: This MAY NOT be called on the background queue,
- *       as that would lead to a deadlock.
- */
 static int iokit_mount(MMCDEV *mmc) {
-    if (disk_mounted != mmc->disk_state) {
+    if (0 == mmc->is_mounted) {
         if (mmc->disk && mmc->session) {
-            mmc->disk_state = disk_mounting;
             DADiskMount(mmc->disk, NULL, kDADiskMountOptionDefault, iokit_mount_complete, mmc);
             dispatch_semaphore_wait(mmc->sync_sem, DISPATCH_TIME_FOREVER);
         }
     }
-    return (mmc->disk_state == disk_unmounted) ? 0 : -1;
+    return mmc->is_mounted ? 0 : -1;
 }
 
 static int iokit_find_service_matching(MMCDEV *mmc, io_service_t *servp) {
@@ -335,39 +327,6 @@ static int iokit_find_interfaces(MMCDEV *mmc, io_service_t service) {
     return 0;
 }
 
-static DADissenterRef iokit_mount_approval_cb(DADiskRef disk, void *context)
-{
-    MMCDEV *mmc = context;
-
-    /* If the disk state is mounted, there is nothing to do here. */
-    if (disk_mounted == mmc->disk_state) {
-        return NULL;
-    }
-
-    /* Check if the disk that is to be mounted matches ours,
-     * if not, we do not need to reject mounting.
-     */
-    if (!CFEqual(disk, mmc->disk)) {
-        return NULL;
-    }
-
-    BD_DEBUG(DBG_MMC, "Mount approval request for matching disc\n");
-
-    /* When we are trying to mount, the mount approval callback is
-     * called too, so we need to allow mounting for ourselves here.
-     */
-    if (disk_mounting == mmc->disk_state) {
-        BD_DEBUG(DBG_MMC, "Allowing ourselves to mount\n");
-        return NULL;
-    }
-
-    mmc->disk_state = disk_appeared;
-    dispatch_semaphore_signal(mmc->sync_sem);
-
-    CFStringRef reason = CFSTR("Disk is going to be mounted libaacs");
-    return DADissenterCreate(kCFAllocatorDefault, kDAReturnBusy, reason);
-}
-
 static int iokit_da_init(MMCDEV *mmc) {
     mmc->session = DASessionCreate(kCFAllocatorDefault);
     if (NULL == mmc->session) {
@@ -383,11 +342,8 @@ static int iokit_da_init(MMCDEV *mmc) {
         return -1;
     }
 
-    mmc->background_queue = dispatch_queue_create("org.videolan.libaacs", DISPATCH_QUEUE_SERIAL);
-    DASessionSetDispatchQueue(mmc->session, mmc->background_queue);
-
-    // Register event callbacks
-    DARegisterDiskMountApprovalCallback(mmc->session, NULL, iokit_mount_approval_cb, mmc);
+    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
+    DASessionSetDispatchQueue(mmc->session, queue);
 
     mmc->sync_sem = dispatch_semaphore_create(0);
 
@@ -395,23 +351,18 @@ static int iokit_da_init(MMCDEV *mmc) {
 }
 
 static void iokit_da_destroy(MMCDEV *mmc) {
-    if (mmc->session) {
-        /* The approval callback must be unregistered here, doing it in the
-         * mount approval callback instead after we got a matching disk would
-         * cause the OS to immediately re-try to mount the disk faster than we
-         * can mount it.
-         */
-        DAUnregisterApprovalCallback(mmc->session, iokit_mount_approval_cb, mmc);
-        DASessionSetDispatchQueue(mmc->session, NULL);
-        CFRelease(mmc->session);
-        mmc->session = NULL;
-    }
+    DASessionSetDispatchQueue(mmc->session, NULL);
 
     if (mmc->disk) {
         CFRelease(mmc->disk);
         mmc->disk = NULL;
     }
 
+    if (mmc->session) {
+        CFRelease (mmc->session);
+        mmc->session = NULL;
+    }
+
     dispatch_release(mmc->sync_sem);
 }
 
@@ -424,7 +375,7 @@ static int mmc_open_iokit(const char *path, MMCDEV *mmc) {
     mmc->taskInterface = NULL;
     mmc->disk = NULL;
     mmc->session = NULL;
-    mmc->disk_state = disk_mounted;
+    mmc->is_mounted = true;
 
     /* get the bsd name associated with this mount */
     rc = get_mounted_device_from_path(mmc, path);
@@ -498,30 +449,9 @@ MMCDEV *device_open(const char *path)
 
 void device_close(MMCDEV **pp)
 {
-    __block int rc = 0;
     if (pp && *pp) {
         MMCDEV *mmc = *pp;
 
-        /* When the exclusive access to the drive is released,
-         * the OS will see the device like a "new" device and
-         * try to mount it. Therefore we can't just mount the
-         * disk we previously got immediately here as it would
-         * fail with kDAReturnBadArgument as the disk is not
-         * available yet.
-         * Trying to mount the disk after it appears in peek
-         * does not work either as the disk is not yet ready
-         * or in the process of being mounted by the OS so
-         * that would return an kDAReturnBusy error.
-         * The only way that seems to reliably work is to use
-         * a mount approval callback. When the OS tries to
-         * mount the disk, the mount approval callback is
-         * called and we can reject mounting and then proceed
-         * to mount the disk ourselves.
-         * Claiming exclusive access using DADiskClaim in order
-         * to prevent the OS form mounting the disk does not work
-         * either!
-         */
-
         if (mmc->taskInterface) {
             (*mmc->taskInterface)->ReleaseExclusiveAccess(mmc->taskInterface);
             (*mmc->taskInterface)->Release(mmc->taskInterface);
@@ -543,39 +473,10 @@ void device_close(MMCDEV **pp)
             return;
         }
 
-        /* Wait for disc to re-appear for 20 seconds.
-         * This timeout was figured out by experimentation with
-         * a USB BD drive which sometimes can take really long to
-         * be in a mountable state again.
-         * For internal drives this is probably much faster
-         * so the long timeout shouldn't do much harm for thse
-         * cases.
-         */
-        dispatch_time_t timeout = dispatch_time(DISPATCH_TIME_NOW, 20 * 1E+9);
-        dispatch_semaphore_wait(mmc->sync_sem, timeout);
-
-        /* It is crucial that this is done on the event handling queue
-         * else callbacks could be received while this code runs.
-         */
-        dispatch_sync(mmc->background_queue, ^{
-            if (disk_appeared != mmc->disk_state) {
-                BD_DEBUG(DBG_MMC | DBG_CRIT, "Timeout waiting for the disc to appear again!\n");
-                iokit_da_destroy(mmc);
-                rc = -1;
-                return;
-            }
-            rc = 0;
-        });
-
-        if (rc == 0) {
-            /* Disk appeared successfully, mount it.
-             * Return value is ignored as logging of success or
-             * error takes place in the callback already and there
-             * is nothing we can do really if mounting fails.
-             */
-            (void) iokit_mount(mmc);
-            iokit_da_destroy(mmc);
-        }
+        (void) iokit_mount (mmc);
+
+        iokit_da_destroy(mmc);
+
         X_FREE(*pp);
     }
 }
-- 
2.48.0

