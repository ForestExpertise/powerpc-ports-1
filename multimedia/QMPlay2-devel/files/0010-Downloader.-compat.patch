From 9ac39ff7da70eab1274d2d3c160f7f0a9e05a7d2 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sat, 12 Apr 2025 14:58:17 +0800
Subject: [PATCH 10/60] Downloader.*: compat

---
 src/modules/Extensions/Downloader.cpp | 77 ++++++++++++++-------------
 src/modules/Extensions/Downloader.hpp | 30 ++++++-----
 2 files changed, 57 insertions(+), 50 deletions(-)

diff --git a/src/modules/Extensions/Downloader.cpp b/src/modules/Extensions/Downloader.cpp
index 78f30efe..b0a409e0 100644
--- a/src/modules/Extensions/Downloader.cpp
+++ b/src/modules/Extensions/Downloader.cpp
@@ -29,8 +29,6 @@
 #include <QTimer>
 #include <QLabel>
 #include <QAction>
-#include <QScreen>
-#include <QWindow>
 #include <QProcess>
 #include <QMimeData>
 #include <QClipboard>
@@ -46,14 +44,10 @@
 #include <QProgressBar>
 #include <QApplication>
 #include <QElapsedTimer>
-#include <QStandardPaths>
-#include <QLoggingCategory>
 #include <QDialogButtonBox>
 
 #include <functional>
 
-Q_LOGGING_CATEGORY(downloader, "Downloader")
-
 /**/
 
 constexpr const char *g_defaultMp3ConvertCommand = "ffmpeg -i <input/> -vn -sn -c:a libmp3lame -ab 224k -f mp3 -y <output>%f.mp3</output>";
@@ -367,31 +361,13 @@ void DownloadItemW::startConversion()
 {
     deleteConvertProcess();
 
-    m_convertProcess = new QProcess(this);
-    m_convertProcessConn[0] = connect(m_convertProcess, Overload<int>::of(&QProcess::finished), this, [this](int exitCode) {
-        if (exitCode == 0)
-        {
-            sizeL->setText(tr(g_downloadComplete));
-            QFile::remove(filePath);
-            m_needsConversion = false;
-            filePath = m_convertedFilePath;
-            downloadStop(true);
-        }
-        else
-        {
-            sizeL->setText(tr(g_conversionError));
-            qCWarning(downloader) << "Failed to convert:" << m_convertProcess->program() << m_convertProcess->arguments() << m_convertProcess->readAllStandardError().constData();
-            downloadStop(false);
-        }
-    });
-    m_convertProcessConn[1] = connect(m_convertProcess, &QProcess::errorOccurred, this, [this](QProcess::ProcessError error) {
-        if (error == QProcess::FailedToStart)
-        {
-            sizeL->setText(tr(g_conversionError));
-            downloadStop(false);
-            qCWarning(downloader) << "Failed to start process:" << m_convertProcess->program();
-        }
-    });
+    m_convertProcess = new QProcess(this);  // Pass 'this' as the parent after QObject inheritance
+
+    // Use old-style connect for Qt4 compatibility
+    m_convertProcessConn[0] = connect(m_convertProcess, SIGNAL(finished(int, QProcess::ExitStatus)),
+                                      this, SLOT(handleConversionFinished(int, QProcess::ExitStatus)));
+    m_convertProcessConn[1] = connect(m_convertProcess, SIGNAL(error(QProcess::ProcessError)),
+                                      this, SLOT(handleConversionError(QProcess::ProcessError)));
 
     m_needsConversion = true;
     finished = false;
@@ -451,6 +427,7 @@ void DownloadItemW::startConversion()
     qDebug() << "Starting conversion:" << convertCommand.toUtf8().constData();
     m_convertProcess->start(convertCommand);
 }
+
 void DownloadItemW::deleteConvertProcess()
 {
     if (m_convertProcess)
@@ -463,6 +440,36 @@ void DownloadItemW::deleteConvertProcess()
     }
 }
 
+void DownloadItemW::handleConversionFinished(int exitCode, QProcess::ExitStatus)
+{
+    if (exitCode == 0) // Conversion succeeded
+    {
+        sizeL->setText(tr(g_downloadComplete));
+        QFile::remove(filePath);
+        m_needsConversion = false;
+        filePath = m_convertedFilePath;
+        downloadStop(true);
+    }
+    else // Conversion failed
+    {
+        sizeL->setText(tr(g_conversionError));
+        qWarning() << "Failed to convert:" << m_convertProcess->program()
+                   << m_convertProcess->arguments()
+                   << m_convertProcess->readAllStandardError().constData();
+        downloadStop(false);
+    }
+}
+
+void DownloadItemW::handleConversionError(QProcess::ProcessError error)
+{
+    if (error == QProcess::FailedToStart)
+    {
+        sizeL->setText(tr(g_conversionError));
+        downloadStop(false);
+        qWarning() << "Failed to start process:" << m_convertProcess->program();
+    }
+}
+
 /**/
 
 DownloaderThread::DownloaderThread(QDataStream *stream, const QString &url, DownloadListW *downloadLW, const QMenu *convertsMenu, const QString &name, const QString &prefix, const QString &param, const QString &preset) :
@@ -879,7 +886,7 @@ void Downloader::init()
     layout->addItem(new QSpacerItem(10, 0, QSizePolicy::Fixed, QSizePolicy::Minimum), 1, 4, 1, 1);
     layout->addWidget(m_convertsPresetsB, 1, 5, 1, 1);
 
-    QString defDownloadPath = QStandardPaths::standardLocations(QStandardPaths::DownloadLocation).value(0, QDir::homePath()) + "/";
+    QString defDownloadPath = QDir::homePath() + "/";
 #ifdef Q_OS_WIN
     defDownloadPath.replace('\\', '/');
 #endif
@@ -1051,11 +1058,7 @@ bool Downloader::modifyConvertAction(QAction *action, bool addRemoveButton)
     layout->addRow(tr("Command line"), commandE);
     layout->addRow(buttons);
 
-    if (QWindow *win = window()->windowHandle())
-    {
-        if (QScreen *screen = win->screen())
-            dialog.resize(screen->availableGeometry().width() / 2, 1);
-    }
+    dialog.resize(400, 1); // Replace with a fixed width
 
     while (dialog.exec() == QDialog::Accepted)
     {
diff --git a/src/modules/Extensions/Downloader.hpp b/src/modules/Extensions/Downloader.hpp
index a19787ac..6163b945 100644
--- a/src/modules/Extensions/Downloader.hpp
+++ b/src/modules/Extensions/Downloader.hpp
@@ -21,9 +21,11 @@
 #include <QMPlay2Extensions.hpp>
 #include <IOController.hpp>
 
+#include <QProcess>
 #include <QTreeWidget>
 #include <QToolButton>
 #include <QThread>
+#include <QWidget>
 
 class QLabel;
 class QProcess;
@@ -32,11 +34,11 @@ class QProgressBar;
 class QTreeWidgetItem;
 class DownloaderThread;
 
-class DownloadItemW final : public QWidget
+class DownloadItemW public QWidget, public QObject
 {
     Q_OBJECT
 public:
-    DownloadItemW(DownloaderThread *downloaderThr, QString name, const QIcon &icon, QDataStream *stream, QString preset);
+    explicit DownloadItemW(DownloaderThread *downloaderThr, QString name, const QIcon &icon, QDataStream *stream, QString preset);
     ~DownloadItemW();
 
     void setName(const QString &);
@@ -69,6 +71,8 @@ signals:
     void stop();
 private slots:
     void toggleStartStop();
+    void handleConversionFinished(int exitCode, QProcess::ExitStatus);
+    void handleConversionError(QProcess::ProcessError);
 private:
     void downloadStop(bool);
 
@@ -89,8 +93,8 @@ private:
         QProgressBar *progressB;
     } *speedProgressW = nullptr;
 
-    QProcess *m_convertProcess = nullptr;
-    QMetaObject::Connection m_convertProcessConn[2];
+    QProcess *m_convertProcess; // QProcess is now fully included
+    int m_convertProcessConn[2]; // Replace QMetaObject::Connection with int
     bool finished, readyToPlay, m_needsConversion = false;
     QString m_convertPreset;
     QString filePath;
@@ -99,7 +103,7 @@ private:
 
 /**/
 
-class DownloadListW final : public QTreeWidget
+class DownloadListW public QTreeWidget
 {
     friend class Downloader;
 public:
@@ -113,13 +117,13 @@ private:
 
 /**/
 
-class DownloaderThread final : public QThread
+class DownloaderThread public QThread
 {
     Q_OBJECT
     enum {ADD_ENTRY, NAME, SET, SET_POS, SET_SPEED, DOWNLOAD_ERROR, FINISH};
 public:
     DownloaderThread(QDataStream *stream, const QString &url, DownloadListW *downloadLW, const QMenu *convertsMenu, const QString &name = QString(), const QString &prefix = QString(), const QString &param = QString(), const QString &preset = QString());
-    ~DownloaderThread();
+    ~DownloaderThread() final;
 
     void serialize(QDataStream &stream);
 
@@ -131,7 +135,7 @@ private slots:
     void stop();
     void finished();
 private:
-    void run() override;
+    void run() override final;
 
     QIcon getIcon();
 
@@ -145,19 +149,19 @@ private:
 
 /**/
 
-class Downloader final : public QWidget, public QMPlay2Extensions
+class Downloader public QWidget, public QMPlay2Extensions
 {
     Q_OBJECT
 
 public:
     Downloader(Module &module);
-    ~Downloader();
+    ~Downloader() final;
 
-    void init() override;
+    void init() override final;
 
-    DockWidget *getDockWidget() override;
+    DockWidget *getDockWidget() override final;
 
-    QVector<QAction *> getActions(const QString &, double, const QString &, const QString &, const QString &) override;
+    QVector<QAction *> getActions(const QString &, double, const QString &, const QString &, const QString &) override final;
 
 private:
     void addConvertPreset();
-- 
2.49.0

