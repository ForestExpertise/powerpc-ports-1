From 260b4e20533b03ec10a0f859adefdec7ac4794b0 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Thu, 22 May 2025 08:34:28 +0800
Subject: [PATCH 63/69] YouTube: backport 0f1fde7

---
 src/modules/Extensions/YouTube.cpp | 281 +++++++++++++----------------
 src/modules/Extensions/YouTube.hpp |   7 +-
 2 files changed, 134 insertions(+), 154 deletions(-)

diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index db16593d..d8ff9b94 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -776,143 +776,99 @@ void YouTube::setAutocomplete(const QByteArray &data)
     if (searchE->hasFocus())
         completer->complete();
 }
-void YouTube::setSearchResults(QString data)
-{
-    /* Usuwanie komentarzy HTML */
-    for (int commentIdx = 0 ;;)
-    {
-        if ((commentIdx = data.indexOf("<!--", commentIdx)) < 0)
-            break;
-        int commentEndIdx = data.indexOf("-->", commentIdx);
-        if (commentEndIdx >= 0) //Jeżeli jest koniec komentarza
-            data.remove(commentIdx, commentEndIdx - commentIdx + 3); //Wyrzuć zakomentowany fragment
-        else
-        {
-            data.remove(commentIdx, data.length() - commentIdx); //Wyrzuć cały tekst do końca
-            break;
-        }
-    }
 
-    int i;
-    const QStringList splitted = data.split("yt-lockup ");
-    for (i = 1; i < splitted.count(); ++i)
+void YouTube::setSearchResults(const QByteArray &data)
+{
+    const auto json = getYtInitialData(data);
+
+    const auto contents = json.object()
+        ["contents"].toObject()
+        ["twoColumnSearchResultsRenderer"].toObject()
+        ["primaryContents"].toObject()
+        ["sectionListRenderer"].toObject()
+        ["contents"].toArray().at(0).toObject()
+        ["itemSectionRenderer"].toObject()
+        ["contents"].toArray()
+    ;
+
+    for (auto &&obj : contents)
     {
-        QString title, videoInfoLink, duration, image, user;
-        const QString &entry = splitted[i];
-        int idx;
+        const auto videoRenderer = obj.toObject()["videoRenderer"].toObject();
+        const auto playlistRenderer = obj.toObject()["playlistRenderer"].toObject();
 
-        if (entry.contains("yt-lockup-channel")) //Ignore channels
-            continue;
+        const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
-        const bool isPlaylist = entry.contains("yt-lockup-playlist");
+        QString title, contentId, length, user, publishedTime, viewCount, thumbnail, url;
 
-        if ((idx = entry.indexOf("yt-lockup-title")) > -1)
-        {
-            int urlIdx = entry.indexOf("href=\"", idx);
-            int titleIdx = entry.indexOf("title=\"", idx);
-            if (titleIdx > -1 && urlIdx > -1 && titleIdx > urlIdx)
-            {
-                const int endUrlIdx = entry.indexOf("\"", urlIdx += 6);
-                const int endTitleIdx = entry.indexOf("\"", titleIdx += 7);
-                if (endTitleIdx > -1 && endUrlIdx > -1 && endTitleIdx > endUrlIdx)
-                {
-                    videoInfoLink = entry.mid(urlIdx, endUrlIdx - urlIdx).replace("&amp;", "&");
-                    if (!videoInfoLink.isEmpty() && videoInfoLink.startsWith('/'))
-                        videoInfoLink.prepend(YOUTUBE_URL);
-                    title = entry.mid(titleIdx, endTitleIdx - titleIdx);
-                }
-            }
-        }
-        if ((idx = entry.indexOf("video-thumb")) > -1)
-        {
-            int skip = 0;
-            int imgIdx = entry.indexOf("data-thumb=\"", idx);
-            if (imgIdx > -1)
-                skip = 12;
-            else
-            {
-                imgIdx = entry.indexOf("src=\"", idx);
-                skip = 5;
-            }
-            if (imgIdx > -1)
-            {
-                int imgEndIdx = entry.indexOf("\"", imgIdx += skip);
-                if (imgEndIdx > -1)
-                {
-                    image = entry.mid(imgIdx, imgEndIdx - imgIdx);
-                    if (image.endsWith(".gif")) //GIF nie jest miniaturką - jest to pojedynczy piksel :D (very old code, is it still relevant?)
-                        image.clear();
-                    else if (image.startsWith("//"))
-                        image.prepend("https:");
-                    if ((idx = image.indexOf("?")) > 0)
-                        image.truncate(idx);
-                }
-            }
-        }
-        if (!isPlaylist && (idx = entry.indexOf("video-time")) > -1 && (idx = entry.indexOf(">", idx)) > -1)
+        if (isVideo)
         {
-            int endIdx = entry.indexOf("<", idx += 1);
-            if (endIdx > -1)
-            {
-                duration = entry.mid(idx, endIdx - idx);
-                if (!duration.startsWith("0") && duration.indexOf(":") == 1 && duration.count(":") == 1)
-                    duration.prepend("0");
-            }
+            title = videoRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+            contentId = videoRenderer["videoId"].toString();
+            if (title.isEmpty() || contentId.isEmpty())
+                continue;
+
+            length = videoRenderer["lengthText"].toObject()["simpleText"].toString();
+            user = videoRenderer["ownerText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+            publishedTime = videoRenderer["publishedTimeText"].toObject()["simpleText"].toString();
+            viewCount = videoRenderer["shortViewCountText"].toObject()["simpleText"].toString();
+            thumbnail = videoRenderer["thumbnail"].toObject()["thumbnails"].toArray().at(0).toObject()["url"].toString();
+
+            url = YOUTUBE_URL "/watch?v=" + contentId;
         }
-        if ((idx = entry.indexOf("yt-lockup-byline")) > -1)
+        else
         {
-            int endIdx = entry.indexOf("</a>", idx);
-            if (endIdx > -1 && (idx = entry.lastIndexOf(">", endIdx)) > -1)
-            {
-                ++idx;
+            title = playlistRenderer["title"].toObject()["simpleText"].toString();
+            contentId = playlistRenderer["playlistId"].toString();
+            if (title.isEmpty() || contentId.isEmpty())
+                continue;
 
-                QTextDocument txtDoc;
-                txtDoc.setHtml(entry.mid(idx, endIdx - idx));
-                user = txtDoc.toPlainText();
-            }
-        }
+            user = playlistRenderer["longBylineText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+            thumbnail = playlistRenderer
+                ["thumbnailRenderer"].toObject()
+                ["playlistVideoThumbnailRenderer"].toObject()
+                ["thumbnail"].toObject()
+                ["thumbnails"].toArray().at(0).toObject()
+                ["url"].toString()
+            ;
 
-        if (!title.isEmpty() && !videoInfoLink.isEmpty())
-        {
-            QTreeWidgetItem *tWI = new QTreeWidgetItem(resultsW);
+            url = YOUTUBE_URL "/playlist?list=" + contentId;
+        }
 
-            QTextDocument txtDoc;
-            txtDoc.setHtml(title);
+        auto tWI = new QTreeWidgetItem(resultsW);
 
-            tWI->setText(0, txtDoc.toPlainText());
-            tWI->setText(1, !isPlaylist ? duration : tr("Playlist"));
-            tWI->setText(2, user);
+        tWI->setText(0, title);
+        tWI->setText(1, isVideo ? length : tr("Playlist"));
+        tWI->setText(2, user);
 
-            tWI->setToolTip(0, QString("%1: %2\n%3: %4\n%5: %6")
-                .arg(resultsW->headerItem()->text(0), tWI->text(0),
-                !isPlaylist ? resultsW->headerItem()->text(1) : tr("Playlist"),
-                !isPlaylist ? tWI->text(1) : tr("yes"),
-                resultsW->headerItem()->text(2), tWI->text(2))
-            );
+        QString tooltip;
+        tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(0), tWI->text(0));
+        tooltip += QString("%1: %2\n").arg(isVideo ? resultsW->headerItem()->text(1) : tr("Playlist"), isVideo ? tWI->text(1) : tr("yes"));
+        tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(2), tWI->text(2));
+        tooltip += QString("%1: %2\n").arg(tr("Published time"), publishedTime);
+        tooltip += QString("%1: %2").arg(tr("View count"), viewCount);
+        tWI->setToolTip(0, tooltip);
 
-            tWI->setData(0, Qt::UserRole, videoInfoLink);
-            tWI->setData(1, Qt::UserRole, isPlaylist);
+        tWI->setData(0, Qt::UserRole, url);
+        tWI->setData(1, Qt::UserRole, !isVideo);
 
-            if (isPlaylist)
-            {
-                tWI->setDisabled(true);
+        if (!isVideo)
+        {
+            tWI->setDisabled(true);
 
-                NetworkReply *linkReply = net.start(videoInfoLink);
-                linkReply->setProperty("tWI", qVariantFromValue((void *)tWI));
-                linkReplies += linkReply;
-            }
+            auto linkReply = net.start(url);
+            linkReply->setProperty("tWI", QVariant::fromValue((void *)tWI));
+            linkReplies += linkReply;
+        }
 
-            NetworkReply *imageReply = net.start(image);
+        if (!thumbnail.isEmpty())
+        {
+            auto imageReply = net.start(thumbnail);
             imageReply->setProperty("tWI", qVariantFromValue((void *)tWI));
             imageReplies += imageReply;
         }
     }
 
-    if (i == 1)
-    {
-        resultsW->clear();
-    }
-    else
+    if (resultsW->topLevelItemCount() > 0)
     {
         pageSwitcher->currPageB->setValue(currPage);
         pageSwitcher->show();
@@ -1087,45 +1043,45 @@ QStringList YouTube::getYouTubeVideo(const QString &param, const QString &url, I
     return result;
 }
 
-void YouTube::preparePlaylist(const QString &data, QTreeWidgetItem *tWI)
+void YouTube::preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI)
 {
-    int idx = data.indexOf("playlist-videos-container");
-    if (idx > -1)
+    QStringList playlist;
+
+    const auto json = getYtInitialData(data);
+
+    const auto contents = json.object()
+        ["contents"].toObject()
+        ["twoColumnBrowseResultsRenderer"].toObject()
+        ["tabs"].toArray().at(0).toObject()
+        ["tabRenderer"].toObject()
+        ["content"].toObject()
+        ["sectionListRenderer"].toObject()
+        ["contents"].toArray().at(0).toObject()
+        ["itemSectionRenderer"].toObject()
+        ["contents"].toArray().at(0).toObject()
+        ["playlistVideoListRenderer"].toObject()
+        ["contents"].toArray()
+    ;
+
+    for (auto &&obj : contents)
     {
-        const QString tags[2] = {"video-id", "video-title"};
-        QStringList playlist, entries = data.mid(idx).split("yt-uix-scroller-scroll-unit", QString::SkipEmptyParts);
-        entries.removeFirst();
-        for (const QString &entry : asConst(entries))
-        {
-            QStringList plistEntry;
-            for (int i = 0; i < 2; ++i)
-            {
-                idx = entry.indexOf(tags[i]);
-                if (idx > -1 && (idx = entry.indexOf('"', idx += tags[i].length())) > -1)
-                {
-                    const int endIdx = entry.indexOf('"', idx += 1);
-                    if (endIdx > -1)
-                    {
-                        const QString str = entry.mid(idx, endIdx - idx);
-                        if (!i)
-                            plistEntry += str;
-                        else
-                        {
-                            QTextDocument txtDoc;
-                            txtDoc.setHtml(str);
-                            plistEntry += txtDoc.toPlainText();
-                        }
-                    }
-                }
-            }
-            if (plistEntry.count() == 2)
-                playlist += plistEntry;
-        }
-        if (!playlist.isEmpty())
-        {
-            tWI->setData(0, Qt::UserRole + 1, playlist);
-            tWI->setDisabled(false);
-        }
+        const auto playlistRenderer = obj.toObject()["playlistVideoRenderer"].toObject();
+
+        const auto title = playlistRenderer["title"].toObject()["simpleText"].toString();
+        const auto videoId = playlistRenderer["videoId"].toString();
+        if (title.isEmpty() || videoId.isEmpty())
+            continue;
+
+        playlist += {
+            videoId,
+            title,
+        };
+    }
+
+    if (!playlist.isEmpty())
+    {
+        tWI->setData(0, Qt::UserRole + 1, playlist);
+        tWI->setDisabled(false);
     }
 }
 
@@ -1140,3 +1096,24 @@ void YouTube::onSortByChanged(int index) {
         search();
     }
 }
+
+QJsonDocument YouTube::getYtInitialData(const QByteArray &data)
+{
+    int idx = data.indexOf("ytInitialData");
+    if (idx < 0)
+        return QJsonDocument();
+
+    idx = data.indexOf("{", idx);
+    if (idx < 0)
+        return QJsonDocument();
+
+    int idx2 = data.indexOf("\n", idx);
+    if (idx2 < 0)
+        return QJsonDocument();
+
+    auto jsonData = data.mid(idx, idx2 - idx);
+    if (jsonData.endsWith(';'))
+        jsonData.chop(1);
+
+    return QJsonDocument::fromJson(jsonData);
+}
diff --git a/src/modules/Extensions/YouTube.hpp b/src/modules/Extensions/YouTube.hpp
index bc21c15b..33fb49d8 100644
--- a/src/modules/Extensions/YouTube.hpp
+++ b/src/modules/Extensions/YouTube.hpp
@@ -127,12 +127,15 @@ private:
     void deleteReplies();
 
     void setAutocomplete(const QByteArray &data);
-    void setSearchResults(QString data);
+    void setSearchResults(const QByteArray &data);
 
     QStringList getYouTubeVideo(const QString &param, const QString &url, IOController<YouTubeDL> &youTubeDL);
 
-    void preparePlaylist(const QString &data, QTreeWidgetItem *tWI);
+    void preparePlaylist(const QByteArray &data, QTreeWidgetItem *tWI);
 
+    QJsonDocument getYtInitialData(const QByteArray &data);
+
+private:
     DockWidget *dw;
 
     QIcon youtubeIcon, videoIcon;
-- 
2.48.0

