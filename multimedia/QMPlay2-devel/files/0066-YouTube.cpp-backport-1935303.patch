From 60f0bd69f203c7bbd4bbd20bae4ec05e19ad6cee Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Thu, 22 May 2025 08:47:27 +0800
Subject: [PATCH 66/69] YouTube.cpp: backport 1935303

---
 src/modules/Extensions/YouTube.cpp | 134 +++++++++++++++--------------
 1 file changed, 70 insertions(+), 64 deletions(-)

diff --git a/src/modules/Extensions/YouTube.cpp b/src/modules/Extensions/YouTube.cpp
index 2a44f820..c3608d59 100644
--- a/src/modules/Extensions/YouTube.cpp
+++ b/src/modules/Extensions/YouTube.cpp
@@ -781,90 +781,96 @@ void YouTube::setSearchResults(const QByteArray &data)
 {
     const auto json = getYtInitialData(data);
 
-    const auto contents = json.object()
+    const auto sectionListRendererContents = json.object()
         ["contents"].toObject()
         ["twoColumnSearchResultsRenderer"].toObject()
         ["primaryContents"].toObject()
         ["sectionListRenderer"].toObject()
-        ["contents"].toArray().at(0).toObject()
-        ["itemSectionRenderer"].toObject()
         ["contents"].toArray()
     ;
 
-    for (auto &&obj : contents)
+    for (auto &&obj : sectionListRendererContents)
     {
-        const auto videoRenderer = obj.toObject()["videoRenderer"].toObject();
-        const auto playlistRenderer = obj.toObject()["playlistRenderer"].toObject();
-
-        const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
-
-        QString title, contentId, length, user, publishedTime, viewCount, thumbnail, url;
+        const auto contents = obj.toObject()
+            ["itemSectionRenderer"].toObject()
+            ["contents"].toArray()
+        ;
 
-        if (isVideo)
+        for (auto &&obj : contents)
         {
-            title = videoRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
-            contentId = videoRenderer["videoId"].toString();
-            if (title.isEmpty() || contentId.isEmpty())
-                continue;
-
-            length = videoRenderer["lengthText"].toObject()["simpleText"].toString();
-            user = videoRenderer["ownerText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
-            publishedTime = videoRenderer["publishedTimeText"].toObject()["simpleText"].toString();
-            viewCount = videoRenderer["shortViewCountText"].toObject()["simpleText"].toString();
-            thumbnail = videoRenderer["thumbnail"].toObject()["thumbnails"].toArray().at(0).toObject()["url"].toString();
+            const auto videoRenderer = obj.toObject()["videoRenderer"].toObject();
+            const auto playlistRenderer = obj.toObject()["playlistRenderer"].toObject();
 
-            url = YOUTUBE_URL "/watch?v=" + contentId;
-        }
-        else
-        {
-            title = playlistRenderer["title"].toObject()["simpleText"].toString();
-            contentId = playlistRenderer["playlistId"].toString();
-            if (title.isEmpty() || contentId.isEmpty())
-                continue;
+            const bool isVideo = !videoRenderer.isEmpty() && playlistRenderer.isEmpty();
 
-            user = playlistRenderer["longBylineText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
-            thumbnail = playlistRenderer
-                ["thumbnailRenderer"].toObject()
-                ["playlistVideoThumbnailRenderer"].toObject()
-                ["thumbnail"].toObject()
-                ["thumbnails"].toArray().at(0).toObject()
-                ["url"].toString()
-            ;
+            QString title, contentId, length, user, publishedTime, viewCount, thumbnail, url;
 
-            url = YOUTUBE_URL "/playlist?list=" + contentId;
-        }
+            if (isVideo)
+            {
+                title = videoRenderer["title"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+                contentId = videoRenderer["videoId"].toString();
+                if (title.isEmpty() || contentId.isEmpty())
+                    continue;
+
+                length = videoRenderer["lengthText"].toObject()["simpleText"].toString();
+                user = videoRenderer["ownerText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+                publishedTime = videoRenderer["publishedTimeText"].toObject()["simpleText"].toString();
+                viewCount = videoRenderer["shortViewCountText"].toObject()["simpleText"].toString();
+                thumbnail = videoRenderer["thumbnail"].toObject()["thumbnails"].toArray().at(0).toObject()["url"].toString();
+
+                url = YOUTUBE_URL "/watch?v=" + contentId;
+            }
+            else
+            {
+                title = playlistRenderer["title"].toObject()["simpleText"].toString();
+                contentId = playlistRenderer["playlistId"].toString();
+                if (title.isEmpty() || contentId.isEmpty())
+                    continue;
+
+                user = playlistRenderer["longBylineText"].toObject()["runs"].toArray().at(0).toObject()["text"].toString();
+                thumbnail = playlistRenderer
+                    ["thumbnailRenderer"].toObject()
+                    ["playlistVideoThumbnailRenderer"].toObject()
+                    ["thumbnail"].toObject()
+                    ["thumbnails"].toArray().at(0).toObject()
+                    ["url"].toString()
+                ;
+
+                url = YOUTUBE_URL "/playlist?list=" + contentId;
+            }
 
-        auto tWI = new QTreeWidgetItem(resultsW);
+            auto tWI = new QTreeWidgetItem(resultsW);
 
-        tWI->setText(0, title);
-        tWI->setText(1, isVideo ? length : tr("Playlist"));
-        tWI->setText(2, user);
+            tWI->setText(0, title);
+            tWI->setText(1, isVideo ? length : tr("Playlist"));
+            tWI->setText(2, user);
 
-        QString tooltip;
-        tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(0), tWI->text(0));
-        tooltip += QString("%1: %2\n").arg(isVideo ? resultsW->headerItem()->text(1) : tr("Playlist"), isVideo ? tWI->text(1) : tr("yes"));
-        tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(2), tWI->text(2));
-        tooltip += QString("%1: %2\n").arg(tr("Published time"), publishedTime);
-        tooltip += QString("%1: %2").arg(tr("View count"), viewCount);
-        tWI->setToolTip(0, tooltip);
+            QString tooltip;
+            tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(0), tWI->text(0));
+            tooltip += QString("%1: %2\n").arg(isVideo ? resultsW->headerItem()->text(1) : tr("Playlist"), isVideo ? tWI->text(1) : tr("yes"));
+            tooltip += QString("%1: %2\n").arg(resultsW->headerItem()->text(2), tWI->text(2));
+            tooltip += QString("%1: %2\n").arg(tr("Published time"), publishedTime);
+            tooltip += QString("%1: %2").arg(tr("View count"), viewCount);
+            tWI->setToolTip(0, tooltip);
 
-        tWI->setData(0, Qt::UserRole, url);
-        tWI->setData(1, Qt::UserRole, !isVideo);
+            tWI->setData(0, Qt::UserRole, url);
+            tWI->setData(1, Qt::UserRole, !isVideo);
 
-        if (!isVideo)
-        {
-            tWI->setDisabled(true);
+            if (!isVideo)
+            {
+                tWI->setDisabled(true);
 
-            auto linkReply = net.start(url);
-            linkReply->setProperty("tWI", QVariant::fromValue((void *)tWI));
-            linkReplies += linkReply;
-        }
+                auto linkReply = net.start(url);
+                linkReply->setProperty("tWI", QVariant::fromValue((void *)tWI));
+                linkReplies += linkReply;
+            }
 
-        if (!thumbnail.isEmpty())
-        {
-            auto imageReply = net.start(thumbnail);
-            imageReply->setProperty("tWI", qVariantFromValue((void *)tWI));
-            imageReplies += imageReply;
+            if (!thumbnail.isEmpty())
+            {
+                auto imageReply = net.start(thumbnail);
+                imageReply->setProperty("tWI", QVariant::fromValue((void *)tWI));
+                imageReplies += imageReply;
+            }
         }
     }
 
-- 
2.48.0

