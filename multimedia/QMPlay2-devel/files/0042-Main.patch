From f125ca41dcc4e5174e6b6d5fed26ef92c35e285c Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Wed, 16 Apr 2025 04:43:23 +0800
Subject: [PATCH 42/60] Main.*

---
 src/gui/Main.cpp | 333 +++++++++++++++++------------------------------
 src/gui/Main.hpp |   6 +-
 2 files changed, 125 insertions(+), 214 deletions(-)

diff --git a/src/gui/Main.cpp b/src/gui/Main.cpp
index f6f61584..01ce78c6 100644
--- a/src/gui/Main.cpp
+++ b/src/gui/Main.cpp
@@ -18,8 +18,6 @@
 
 #include <Main.hpp>
 
-#include <EventFilterWorkarounds.hpp>
-#include <PanGestureEventFilter.hpp>
 #include <ScreenSaver.hpp>
 #include <VideoFrame.hpp>
 #include <MainWidget.hpp>
@@ -31,7 +29,6 @@
 #include <Module.hpp>
 #include <IPC.hpp>
 
-#include <QCommandLineParser>
 #include <QDesktopWidget>
 #include <QApplication>
 #include <QImageReader>
@@ -42,6 +39,7 @@
 #include <QBuffer>
 #include <QFile>
 #include <QDir>
+#include <QTextCodec>
 #ifdef Q_OS_MACOS
     #include <QProcess>
 #endif
@@ -52,6 +50,8 @@
 #include <csignal>
 #include <ctime>
 
+    static QPair<QStringList, QStringList> g_arguments;
+
 static ScreenSaver *g_screenSaver = nullptr;
 static bool g_useGui = true;
 #ifdef Q_OS_MACOS
@@ -111,12 +111,14 @@ void QMPlay2GUIClass::setTreeWidgetItemIcon(QTreeWidgetItem *tWI, const QIcon &i
         if (!treeWidget)
             treeWidget = tWI->treeWidget();
         if (treeWidget)
-            tWI->setData(column, Qt::DecorationRole, icon.pixmap(treeWidget->window()->windowHandle(), treeWidget->iconSize()));
+            tWI->setData(column, Qt::DecorationRole, icon.pixmap(treeWidget->iconSize()));
         else
             setDefaultIcon = true;
     }
     if (setDefaultIcon)
+    {
         tWI->setIcon(column, icon);
+    }
 }
 
 #ifdef UPDATER
@@ -168,7 +170,7 @@ QString QMPlay2GUIClass::getCurrentPth(QString pth, bool leaveFilename)
         pth.remove(0, 7);
     if (!leaveFilename)
         pth = Functions::filePath(pth);
-    if (!QFileInfo::exists(pth))
+    if (!QFileInfo(pth).exists())
         pth = settings->getString("currPth");
     return pth;
 }
@@ -216,58 +218,6 @@ QMPlay2GUIClass::~QMPlay2GUIClass()
 
 /**/
 
-static QCommandLineParser *createCmdParser(bool descriptions)
-{
-    static constexpr const char *translations[] = {
-        QT_TRANSLATE_NOOP("Help", "Opens and plays specified <url>."),
-        QT_TRANSLATE_NOOP("Help", "Opens new QMPlay2 instance and plays specified <url>."),
-        QT_TRANSLATE_NOOP("Help", "Adds specified <url> to playlist."),
-        QT_TRANSLATE_NOOP("Help", "Starts the application with given <profile name>."),
-        QT_TRANSLATE_NOOP("Help", "Doesn't play after run (bypass \"Remember playback position\" option)."),
-        QT_TRANSLATE_NOOP("Help", "Toggles playback."),
-        QT_TRANSLATE_NOOP("Help", "Starts playback."),
-        QT_TRANSLATE_NOOP("Help", "Stops playback."),
-        QT_TRANSLATE_NOOP("Help", "Ensures that the window will be visible if the application is running."),
-        QT_TRANSLATE_NOOP("Help", "Toggles fullscreen."),
-        QT_TRANSLATE_NOOP("Help", "Sets specified volume."),
-        QT_TRANSLATE_NOOP("Help", "Sets specified playback speed."),
-        QT_TRANSLATE_NOOP("Help", "Seeks to the specified value."),
-        QT_TRANSLATE_NOOP("Help", "Plays next entry on playlist."),
-        QT_TRANSLATE_NOOP("Help", "Plays previous entry on playlist."),
-        QT_TRANSLATE_NOOP("Help", "Terminates the application."),
-        QT_TRANSLATE_NOOP("Help", "Displays this help."),
-    };
-
-    const auto maybeGetTranslatedText = [&](const char *text) {
-        if (descriptions)
-            return QCoreApplication::translate("Help", text);
-        return QString();
-    };
-
-    QCommandLineParser *parser = new QCommandLineParser;
-    parser->addPositionalArgument("<url>", maybeGetTranslatedText(translations[0]), "[url]");
-    parser->addOptions({
-        {"open", maybeGetTranslatedText(translations[0]), "url"},
-        {"opennew", maybeGetTranslatedText(translations[1]), "url"},
-        {"enqueue", maybeGetTranslatedText(translations[2]), "url"},
-        {"profile", maybeGetTranslatedText(translations[3]), "profile name"},
-        {"noplay", maybeGetTranslatedText(translations[4])},
-        {"toggle", maybeGetTranslatedText(translations[5])},
-        {"play", maybeGetTranslatedText(translations[6])},
-        {"stop", maybeGetTranslatedText(translations[7])},
-        {"show", maybeGetTranslatedText(translations[8])},
-        {"fullscreen", maybeGetTranslatedText(translations[9])},
-        {"volume", maybeGetTranslatedText(translations[10]), "0..100"},
-        {"speed", maybeGetTranslatedText(translations[11]), "0.05..100.0"},
-        {"seek", maybeGetTranslatedText(translations[12]), "s"},
-        {"next", maybeGetTranslatedText(translations[13])},
-        {"prev", maybeGetTranslatedText(translations[14])},
-        {"quit", maybeGetTranslatedText(translations[15])},
-        {{"h", "help"}, maybeGetTranslatedText(translations[16])},
-    });
-
-    return parser;
-}
 static QString fileArg(const QString &arg)
 {
     if (!arg.contains("://"))
@@ -278,62 +228,90 @@ static QString fileArg(const QString &arg)
     }
     return arg;
 }
-static QList<QPair<QString, QString>> parseArguments(const QCommandLineParser &parser)
-{
-    QList<QPair<QString, QString>> arguments;
-    for (const QString &option : parser.optionNames())
-    {
-        QString value = parser.value(option);
-        if (option == "open" || option == "enqueue")
-            value = fileArg(value);
-        arguments += {option, value};
-    }
 
-    QString urlLines;
-    for (const QString &url : parser.positionalArguments())
-        urlLines += fileArg(url) + "\n";
-    urlLines.chop(1);
-    if (!urlLines.isEmpty())
+static void parseArguments(QStringList &arguments)
+{
+    QString param;
+    while (arguments.count())
     {
-        bool found = false;
-        for (int i = arguments.count() - 1; i >= 0; --i)
+        const QString arg = arguments.takeFirst();
+        if (arg.startsWith('-'))
         {
-            if (arguments.at(i).first == "open" || arguments.at(i).first == "enqueue")
+            param = arg;
+            while (param.startsWith('-'))
+                param.remove(0, 1);
+            if (!param.isEmpty() && !g_arguments.first.contains(param))
             {
-                arguments[i].second += "\n" + urlLines;
-                found = true;
-                break;
+                g_arguments.first  += param;
+                g_arguments.second += QString();
+            }
+            else
+            {
+                param.clear();
             }
         }
-        if (!found)
-            arguments += {"open", urlLines};
+        else if (!param.isEmpty())
+        {
+            QString &data = g_arguments.second.last();
+            if (!data.isEmpty())
+                data += '\n';
+            if (param == "open" || param == "enqueue")
+                data += fileArg(arg);
+            else
+                data += arg;
+        }
+        else if (!g_arguments.first.contains("open"))
+        {
+            param = "open";
+            g_arguments.first  += param;
+            g_arguments.second += fileArg(arg);
+        }
     }
+}
 
-    return arguments;
+static void showHelp()
+{
+    QFile f;
+    f.open(stdout, QFile::WriteOnly);
+    f.write("QMPlay2 - Qt Media Player 2 (" + Version::get() + ")\n");
+    f.write(QObject::tr(
+"  Parameters list:\n"
+"    -open         \"address\"\n"
+"    -enqueue      \"address\"\n"
+"    -profile      \"name\" - starts application with given profile name\n"
+"    -noplay     - doesn't play after run (bypass \"Remember playback position\" option)\n"
+"    -toggle     - toggles play/pause\n"
+"    -show       - ensures that the window will be visible if the application is running\n"
+"    -fullscreen - toggles fullscreen\n"
+"    -volume     - sets volume [0..100]\n"
+"    -speed      - sets playback speed [0.05..100.0]\n"
+"    -seek       - seeks to the specified value [s]\n"
+"    -stop       - stops playback\n"
+"    -next       - plays next on the list\n"
+"    -prev       - plays previous on the list\n"
+"    -quit       - terminates the application"
+    ).toLocal8Bit() + "\n");
 }
 
-static bool writeToSocket(IPCSocket &socket, QList<QPair<QString, QString>> &arguments)
+static bool writeToSocket(IPCSocket &socket)
 {
     bool ret = false;
-
-    for (auto &&argument : arguments)
+    for (int i = g_arguments.first.count() - 1; i >= 0; i--)
     {
-        if (argument.first == "noplay" || argument.first == "profile")
+        if (g_arguments.first[i] == "noplay" || g_arguments.first[i] == "profile")
             continue;
-
-        if (argument.first == "open" || argument.first == "enqueue")
+        else if (g_arguments.first[i] == "open" || g_arguments.first[i] == "enqueue")
         {
-            if (!argument.second.isEmpty())
-                argument.second = Functions::Url(argument.second);
+            if (!g_arguments.second[i].isEmpty())
+                g_arguments.second[i] = Functions::Url(g_arguments.second[i]);
 #ifdef Q_OS_WIN
-            if (argument.second.startsWith("file://"))
-                argument.second.remove(0, 7);
+            if (g_arguments.second[i].startsWith("file://"))
+                g_arguments.second[i].remove(0, 7);
 #endif
         }
-        socket.write(QString(argument.first + '\t' + argument.second).toUtf8() + '\0');
+        socket.write(QString(g_arguments.first[i] + '\t' + g_arguments.second[i]).toUtf8() + '\0');
         ret = true;
     }
-
     return ret;
 }
 
@@ -352,13 +330,6 @@ static inline void exitProcedure()
     g_screenSaver = nullptr;
 }
 
-#ifndef Q_OS_WIN
-    #include <csetjmp>
-    static jmp_buf env;
-    static bool qAppOK;
-    static bool canDeleteApp = true;
-#endif
-
 static inline void forceKill()
 {
 #ifdef Q_OS_WIN
@@ -400,13 +371,6 @@ static void signal_handler(int s)
             }
             break;
         case SIGABRT:
-#ifndef Q_OS_WIN
-            if (!qAppOK && g_useGui)
-            {
-                canDeleteApp = g_useGui = false;
-                longjmp(env, 1);
-            }
-#endif
             QMPlay2Core.log("QMPlay2 has been aborted (SIGABRT)", ErrorLog | AddTimeToLog | (qApp ? SaveLog : DontShowInGUI));
             callDefaultSignalHandler(s);
             break;
@@ -432,6 +396,12 @@ static void signal_handler(int s)
     }
 }
 
+static inline void noAutoPlay()
+{
+    g_arguments.first += "noplay";
+    g_arguments.second += QString();
+}
+
 #ifdef Q_OS_WIN
 static LRESULT CALLBACK MMKeysHookProc(int code, WPARAM wparam, LPARAM lparam)
 {
@@ -461,50 +431,24 @@ static LRESULT CALLBACK MMKeysHookProc(int code, WPARAM wparam, LPARAM lparam)
 }
 #endif
 
-static QtMessageHandler g_defaultMsgHandler = nullptr;
-static QMutex g_messageHandlerMutex;
-static void messageHandler(QtMsgType type, const QMessageLogContext &context, const QString &message)
+    static QtMsgHandler g_defaultMsgHandler = nullptr;
+
+void messageHandler(QtMsgType type, const char *message)
 {
-    bool qmplay2Log = false;
-    if (QCoreApplication::instance())
-    {
-        // Use QMPlay2 logger only when we have a "QApplication" instance (we're still executing "main()"),
-        // so any static data including "QSystemLocaleSingleton" and "QMPlay2CoreClass" are still valid.
-        switch (type)
-        {
-            case QtWarningMsg:
-            case QtCriticalMsg:
-            case QtFatalMsg:
-                g_messageHandlerMutex.lock();
-                QMPlay2Core.logError(qFormatLogMessage(type, context, message), false);
-                g_messageHandlerMutex.unlock();
-                qmplay2Log = true;
-                break;
-            case QtDebugMsg:
-            case QtInfoMsg:
-                if (type != QtDebugMsg || qstrcmp(context.category, "js") == 0)
-                {
-                    g_messageHandlerMutex.lock();
-                    QMPlay2Core.logInfo(qFormatLogMessage(type, context, message), false);
-                    g_messageHandlerMutex.unlock();
-                    qmplay2Log = true;
-                }
-                break;
-            default:
-                break;
-        }
-    }
-    if (!qmplay2Log)
+    switch (type)
     {
-#ifdef Q_OS_ANDROID
-        if (g_defaultMsgHandler)
-            g_defaultMsgHandler(type, context, message);
-#else
-        g_messageHandlerMutex.lock();
-        fprintf(stderr, "%s\n", qFormatLogMessage(type, context, message).toLocal8Bit().constData());
-        fflush(stderr);
-        g_messageHandlerMutex.unlock();
-#endif
+        case QtDebugMsg:
+            fprintf(stderr, "Debug: %s\n", message);
+            break;
+        case QtWarningMsg:
+            fprintf(stderr, "Warning: %s\n", message);
+            break;
+        case QtCriticalMsg:
+            fprintf(stderr, "Critical: %s\n", message);
+            break;
+        case QtFatalMsg:
+            fprintf(stderr, "Fatal: %s\n", message);
+            abort(); // Abort on fatal messages
     }
 }
 
@@ -608,51 +552,27 @@ int main(int argc, char *argv[])
     checkForEGL();
 #endif
 
-    QGuiApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
-#ifndef Q_OS_WIN
-    QGuiApplication::setAttribute(Qt::AA_ShareOpenGLContexts);
-#endif
+        new QApplication(argc, argv, g_useGui);
 
-#ifndef Q_OS_WIN
-    if (!setjmp(env))
-#endif
-    new QApplication(argc, argv);
-#ifndef Q_OS_WIN
-    qAppOK = true;
-#endif
+    QTextCodec::setCodecForTr(QTextCodec::codecForName("UTF-8"));
+    QTextCodec::setCodecForCStrings(QTextCodec::codecForName("UTF-8"));
     QCoreApplication::setApplicationName("QMPlay2");
 
     QMPlay2GUIClass &qmplay2Gui = QMPlay2GUI; //Create "QMPlay2GUI" instance
-    g_defaultMsgHandler = qInstallMessageHandler(messageHandler);
+    g_defaultMsgHandler = qInstallMsgHandler(messageHandler);
 
-    QCommandLineParser *parser = createCmdParser(false);
-    parser->setSingleDashWordOptionMode(QCommandLineParser::ParseAsLongOptions);
-    parser->process(*qApp);
-    QList<QPair<QString, QString>> arguments = parseArguments(*parser);
-    const bool help = parser->isSet("help");
-    QString cmdLineProfile = parser->value("profile");
-    delete parser;
+    QStringList arguments = QCoreApplication::arguments();
+    arguments.removeFirst();
+    const bool help = arguments.contains("-help") || arguments.contains("-h");
 
     if (!help)
     {
-        bool useSocket = true;
-
-        for (auto &&argument : arguments)
-        {
-            if (argument.first == "opennew")
-            {
-                argument.first = "open";
-                useSocket = false;
-                break;
-            }
-        }
-
-        if (useSocket)
-        {
+// FIXME: try sorting this mess out.
             IPCSocket socket(qmplay2Gui.getPipe());
+            parseArguments(arguments);
             if (socket.open(IPCSocket::WriteOnly))
             {
-                if (writeToSocket(socket, arguments))
+                if (writeToSocket(socket))
                     g_useGui = false;
                 socket.close();
             }
@@ -660,22 +580,27 @@ int main(int argc, char *argv[])
             else if (QFile::exists(qmplay2Gui.getPipe()))
             {
                 QFile::remove(qmplay2Gui.getPipe());
-                arguments.append({"noplay", QString()});
+                noAutoPlay();
             }
 #endif
-        }
 
         if (!g_useGui)
         {
-#ifndef Q_OS_WIN
-            if (canDeleteApp)
-#endif
                 delete qApp;
             return 0;
         }
     }
 
-    qmplay2Gui.cmdLineProfile = std::move(cmdLineProfile);
+    for (int i = 0; i < g_arguments.first.count(); ++i)
+    {
+        if (g_arguments.first.at(i) == "profile")
+        {
+            qmplay2Gui.cmdLineProfile = g_arguments.second.at(i);
+            g_arguments.first.removeAt(i);
+            g_arguments.second.removeAt(i);
+            break;
+        }
+    }
 
     QString libPath, sharePath = QCoreApplication::applicationDirPath();
     bool cmakeBuildFound = false;
@@ -717,7 +642,6 @@ int main(int argc, char *argv[])
 
     qRegisterMetaType<VideoFrame>("VideoFrame");
 
-    QGuiApplication::setAttribute(Qt::AA_UseHighDpiPixmaps);
     QApplication::setAttribute(Qt::AA_DontCreateNativeWidgetSiblings);
 
     QDir::setCurrent(QCoreApplication::applicationDirPath()); //Is it really needed?
@@ -726,8 +650,6 @@ int main(int argc, char *argv[])
     {
         qmplay2Gui.screenSaver = g_screenSaver = new ScreenSaver;
         QApplication::setQuitOnLastWindowClosed(false);
-        qApp->installEventFilter(new EventFilterWorkarounds(qApp));
-        PanGestureEventFilter::install();
     }
 
 #ifdef Q_OS_WIN
@@ -751,16 +673,6 @@ int main(int argc, char *argv[])
         /* QMPlay2GUI musi być stworzone już wcześniej */
         QMPlay2Core.init(!help, cmakeBuildFound, libPath, sharePath, qmplay2Gui.cmdLineProfile);
 
-        if (help)
-        {
-            parser = createCmdParser(true);
-            parser->setApplicationDescription(QString("QMPlay2 - Qt Media Player 2 (%1)").arg((QString)Version::get()));
-            printf("%s", parser->helpText().toLocal8Bit().constData());
-            fflush(stdout);
-            delete parser;
-            break;
-        }
-
         if (!qmplay2Gui.cmdLineProfile.isEmpty() && QMPlay2Core.getSettingsProfile() == "/")
             qmplay2Gui.cmdLineProfile = QMPlay2Core.getSettingsProfile(); // Default profile
 
@@ -783,6 +695,12 @@ int main(int argc, char *argv[])
             settings.remove("Volume");
         }
 
+        if (help)
+        {
+            showHelp();
+            break;
+        }
+
         qmplay2Gui.loadIcons();
         {
             const QIcon scaledIcon = QMPlay2Core.getQMPlay2Icon();
@@ -861,7 +779,7 @@ int main(int argc, char *argv[])
 
         qmplay2Gui.restartApp = qmplay2Gui.removeSettings = qmplay2Gui.noAutoPlay = false;
         qmplay2Gui.newProfileName.clear();
-        new MainWidget(arguments);
+        new MainWidget(g_arguments);
         do
         {
             QCoreApplication::exec();
@@ -894,22 +812,15 @@ int main(int argc, char *argv[])
         }
 
         if (qmplay2Gui.noAutoPlay)
-            arguments.append({"noplay", QString()});
+            noAutoPlay();
 
         delete qmplay2Gui.pipe;
     } while (qmplay2Gui.restartApp);
 
     qmplay2Gui.deleteIcons();
 
-#ifdef Q_OS_WIN
-    UnhookWindowsHookEx(keyboardHook);
-#endif
-
     exitProcedure();
 
-#ifndef Q_OS_WIN
-    if (canDeleteApp)
-#endif
         delete qApp;
     return 0;
 }
diff --git a/src/gui/Main.hpp b/src/gui/Main.hpp
index e4916950..26f17d54 100644
--- a/src/gui/Main.hpp
+++ b/src/gui/Main.hpp
@@ -35,7 +35,7 @@ class VideoDock;
 class MenuBar;
 class QWidget;
 
-class QMPlay2GUIClass final : private QMPlay2CoreClass
+class QMPlay2GUIClass : private QMPlay2CoreClass
 {
     Q_DECLARE_TR_FUNCTIONS(QMPlay2GUIClass)
 
@@ -68,7 +68,7 @@ public:
 
     void updateInDockW();
 
-    const QWidget *getVideoDock() const override;
+    const QWidget *getVideoDock() const override final;
 
     QColor grad1, grad2, qmpTxt;
     QIcon *groupIcon, *mediaIcon, *folderIcon;
@@ -84,7 +84,7 @@ public:
     QString newProfileName, cmdLineProfile;
 private:
     QMPlay2GUIClass();
-    ~QMPlay2GUIClass();
+    ~QMPlay2GUIClass() final;
 };
 
 #define QMPlay2GUI \
-- 
2.49.0

