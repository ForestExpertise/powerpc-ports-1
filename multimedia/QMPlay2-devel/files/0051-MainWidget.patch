From bf65450a7c64b98e02052844c376c6be5461c981 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Fri, 18 Apr 2025 12:25:30 +0800
Subject: [PATCH 51/60] MainWidget

---
 src/gui/MainWidget.cpp | 76 ++++++++++++++++++++++++++----------------
 src/gui/MainWidget.hpp |  4 +++
 2 files changed, 51 insertions(+), 29 deletions(-)

diff --git a/src/gui/MainWidget.cpp b/src/gui/MainWidget.cpp
index fec3c152..4bbc7a61 100644
--- a/src/gui/MainWidget.cpp
+++ b/src/gui/MainWidget.cpp
@@ -353,21 +353,21 @@ MainWidget::MainWidget(QPair<QStringList, QStringList> &arguments) :
         if (tabBar && tabBar->property("changeCurrentOnDrag").isValid())
         {
             tabBar->setAcceptDrops(true);
-            tabBar->setChangeCurrentOnDrag(true);
         }
     }
 
     playlistDock->load(QMPlay2Core.getSettingsDir() + "Playlist.pls");
 
     bool noplay = false;
-    for (QList<QPair<QString, QString>>::const_iterator it = arguments.begin(); it != arguments.end(); ++it)
+    for (int i = 0; i < arguments.first.size(); ++i) // Iterate over the size of the first QStringList
     {
-        const QString &param = it->first;
-        const QString &data  = it->second;
+        const QString &param = arguments.first.at(i);  // Access the elements of the first QStringList
+        const QString &data  = arguments.second.at(i); // Access the corresponding elements of the second QStringList
         noplay |= (param == "open" || param == "noplay");
         processParam(param, data);
     }
-    arguments.clear();
+    arguments.first.clear();  // Clear the first QStringList
+    arguments.second.clear(); // Clear the second QStringList
 
     if (!noplay)
     {
@@ -384,22 +384,11 @@ MainWidget::MainWidget(QPair<QStringList, QStringList> &arguments) :
             playStateChanged(false);
     }
 
-#ifdef Q_OS_MACOS
-    qApp->installEventFilter(this);
-    fileOpenTimer.setSingleShot(true);
-    connect(&fileOpenTimer, &QTimer::timeout, this, &MainWidget::fileOpenTimerTimeout);
-    if (QMPlay2GUI.pipe) // Register media keys only for first QMPlay2 instance
-        QMPlay2MacExtensions::registerMacOSMediaKeys(std::bind(&MainWidget::processParam, this, std::placeholders::_1, QString()));
-#endif
-
     if (settings.getBool("AutoUpdates"))
         updater.downloadUpdate();
 }
 MainWidget::~MainWidget()
 {
-#ifdef Q_OS_MACOS
-    QMPlay2MacExtensions::unregisterMacOSMediaKeys();
-#endif
     QMPlay2Extensions::closeExtensions();
     emit QMPlay2Core.restoreCursor();
     Notifies::finalize();
@@ -698,11 +687,7 @@ void MainWidget::toggleVisibility()
             toggleFullScreen();
         if (!isTray)
         {
-#ifndef Q_OS_MACOS
             showMinimized();
-#else
-            QMPlay2MacExtensions::setApplicationVisible(false);
-#endif
         }
         else
         {
@@ -738,6 +723,7 @@ void MainWidget::toggleVisibility()
     }
 #endif
 }
+
 void MainWidget::createMenuBar()
 {
     menuBar = QMPlay2GUI.menuBar;
@@ -916,6 +902,7 @@ void MainWidget::createMenuBar()
     qt_mac_set_dock_menu(secondMenu);
 #endif
 }
+
 void MainWidget::trayIconClicked(QSystemTrayIcon::ActivationReason reason)
 {
 #if !defined Q_OS_MACOS && !defined Q_OS_ANDROID
@@ -938,6 +925,7 @@ void MainWidget::trayIconClicked(QSystemTrayIcon::ActivationReason reason)
     Q_UNUSED(reason)
 #endif
 }
+
 void MainWidget::toggleCompactView()
 {
     if (!isCompactView)
@@ -976,6 +964,7 @@ void MainWidget::toggleCompactView()
         statusBar->show();
     }
 }
+
 void MainWidget::toggleAlwaysOnTop(bool checked)
 {
     auto flags = windowFlags();
@@ -988,6 +977,7 @@ void MainWidget::toggleAlwaysOnTop(bool checked)
     if (visible)
         show();
 }
+
 void MainWidget::toggleFullScreen()
 {
     static bool visible, compact_view, tb_movable;
@@ -1073,7 +1063,6 @@ void MainWidget::toggleFullScreen()
 
 #ifndef Q_OS_ANDROID
         showNormal();
-#endif // Q_OS_MACOS
         if (maximized)
             showMaximized();
         else
@@ -1120,6 +1109,7 @@ void MainWidget::toggleFullScreen()
     }
     emit QMPlay2Core.fullScreenChanged(fullScreen);
 }
+
 void MainWidget::showMessage(const QString &msg, const QString &title, int messageIcon, int ms)
 {
     if (ms < 1 || !Notifies::notify(title, msg, ms, messageIcon))
@@ -1134,6 +1124,7 @@ void MainWidget::showMessage(const QString &msg, const QString &title, int messa
         messageBox->show();
     }
 }
+
 void MainWidget::statusBarMessage(const QString &msg, int ms)
 {
     statusBar->showMessage(msg, ms);
@@ -1151,14 +1142,17 @@ void MainWidget::openUrl()
 
     }
 }
+
 void MainWidget::openFiles()
 {
     playlistDock->add(QFileDialog::getOpenFileNames(this, tr("Choose files"), QMPlay2GUI.getCurrentPth(playlistDock->getUrl(), true)));
 }
+
 void MainWidget::openDir()
 {
     playlistDock->add(QFileDialog::getExistingDirectory(this, tr("Choose directory"), QMPlay2GUI.getCurrentPth(playlistDock->getUrl())));
 }
+
 void MainWidget::loadPlist()
 {
     QString filter = tr("Playlists") + " (";
@@ -1170,14 +1164,17 @@ void MainWidget::loadPlist()
         return;
     playlistDock->load(QFileDialog::getOpenFileName(this, tr("Choose playlist"), QMPlay2GUI.getCurrentPth(playlistDock->getUrl()), filter));
 }
+
 void MainWidget::savePlist()
 {
     savePlistHelper(tr("Save playlist"), QMPlay2GUI.getCurrentPth(playlistDock->getUrl()), false);
 }
+
 void MainWidget::saveGroup()
 {
     savePlistHelper(tr("Save group"), QMPlay2GUI.getCurrentPth(playlistDock->getUrl()) + playlistDock->getCurrentItemName(), true);
 }
+
 void MainWidget::showSettings(const QString &moduleName)
 {
     if (!settingsW)
@@ -1199,6 +1196,7 @@ void MainWidget::showSettings(const QString &moduleName)
             showSettings(moduleName);
     }
 }
+
 void MainWidget::showSettings()
 {
     showSettings(QString());
@@ -1211,6 +1209,7 @@ void MainWidget::itemDropped(const QString &pth, bool subs)
     else
         playlistDock->addAndPlay(pth);
 }
+
 void MainWidget::browseSubsFile()
 {
     QString dir = Functions::filePath(playC.getUrl());
@@ -1253,6 +1252,7 @@ void MainWidget::setSeekSMaximum(int max)
         seekS->setEnabled(false);
     }
 }
+
 void MainWidget::updatePos(double pos)
 {
     static int currPos;
@@ -1274,6 +1274,7 @@ void MainWidget::updatePos(double pos)
 #endif
     }
 }
+
 void MainWidget::mousePositionOnSlider(int pos)
 {
     statusBar->showMessage(tr("Pointed position") + ": " + timeToStr(pos / 10.0, true), 750);
@@ -1284,6 +1285,7 @@ void MainWidget::newConnection(IPCSocket *socket)
     connect(socket, SIGNAL(readyRead()), this, SLOT(readSocket()));
     connect(socket, SIGNAL(aboutToClose()), socket, SLOT(deleteLater()));
 }
+
 void MainWidget::readSocket()
 {
     IPCSocket *socket = (IPCSocket *)sender();
@@ -1330,6 +1332,7 @@ void MainWidget::hideMenu(bool h)
     }
 }
 #endif
+
 void MainWidget::lockWidgets(bool l)
 {
     if (fullScreen || isCompactView)
@@ -1361,18 +1364,14 @@ void MainWidget::hideDocksSlot()
             hideDocks();
     }
 }
+
 void MainWidget::doRestoreState(const QByteArray &data)
 {
     if (isMaximized())
     {
         setUpdatesEnabled(false);
-        QTimer::singleShot(0, this, [=] {
-            QTimer::singleShot(0, this, [=] {
-                restoreState(data);
-                setUpdatesEnabled(true);
-                repaint();
-            });
-        });
+        QTimer::singleShot(0, this, SLOT(doRestoreStateStep1()));
+        m_restoreStateData = data; // Store the data for use in later steps
     }
     else
     {
@@ -1380,6 +1379,18 @@ void MainWidget::doRestoreState(const QByteArray &data)
     }
 }
 
+void MainWidget::doRestoreStateStep1()
+{
+    QTimer::singleShot(0, this, SLOT(doRestoreStateStep2()));
+}
+
+void MainWidget::doRestoreStateStep2()
+{
+    restoreState(m_restoreStateData);
+    setUpdatesEnabled(true);
+    repaint();
+}
+
 void MainWidget::uncheckSuspend()
 {
     if (menuBar->player->suspend)
@@ -1442,6 +1453,7 @@ void MainWidget::showToolBar(bool showTB)
         statusBar->hide();
     }
 }
+
 void MainWidget::hideDocks()
 {
     fullScreenDockWidgetState = saveState();
@@ -1551,6 +1563,7 @@ void MainWidget::keyPressEvent(QKeyEvent *e)
     }
     QMainWindow::keyPressEvent(e);
 }
+
 void MainWidget::mouseMoveEvent(QMouseEvent *e)
 {
     if ((fullScreen || isCompactView) && (e->buttons() == Qt::NoButton || videoDock->isTouch))
@@ -1619,12 +1632,14 @@ void MainWidget::mouseMoveEvent(QMouseEvent *e)
     }
     QMainWindow::mouseMoveEvent(e);
 }
+
 void MainWidget::leaveEvent(QEvent *e)
 {
     if (fullScreen || isCompactView)
         QMetaObject::invokeMethod(this, "hideDocksSlot", Qt::QueuedConnection); //Qt5 can't hide docks properly here
     QMainWindow::leaveEvent(e);
 }
+
 void MainWidget::closeEvent(QCloseEvent *e)
 {
     const QString quitMsg = tr("Are you sure you want to quit?");
@@ -1691,12 +1706,14 @@ void MainWidget::closeEvent(QCloseEvent *e)
 
     playC.stop(true);
 }
+
 void MainWidget::moveEvent(QMoveEvent *e)
 {
     if (videoDock->isVisible() && !videoDock->isFloating())
         emit QMPlay2Core.videoDockMoved();
     QMainWindow::moveEvent(e);
 }
+
 void MainWidget::showEvent(QShowEvent *)
 {
     if (!wasShow)
@@ -1715,6 +1732,7 @@ void MainWidget::showEvent(QShowEvent *)
     }
     menuBar->window->toggleVisibility->setText(tr("&Hide"));
 }
+
 void MainWidget::hideEvent(QHideEvent *)
 {
 #ifndef Q_OS_ANDROID
@@ -1732,7 +1750,7 @@ bool MainWidget::eventFilter(QObject *obj, QEvent *event)
     if (tray && obj == tray && event->type() == QEvent::Wheel)
     {
         QWheelEvent *we = static_cast<QWheelEvent *>(event);
-        volW->changeVolume(we->angleDelta().y() / 30);
+        volW->changeVolume(we->delta() / 30);
     }
 #ifdef Q_OS_MACOS
     else if (event->type() == QEvent::FileOpen)
diff --git a/src/gui/MainWidget.hpp b/src/gui/MainWidget.hpp
index a7015dc6..daaf545c 100644
--- a/src/gui/MainWidget.hpp
+++ b/src/gui/MainWidget.hpp
@@ -123,6 +123,8 @@ private slots:
 
     void hideDocksSlot();
     void doRestoreState(const QByteArray &data);
+    void doRestoreStateStep1();
+    void doRestoreStateStep2();
 
     void uncheckSuspend();
 private:
@@ -191,6 +193,8 @@ private:
 #endif
     QAction *lockWidgetsAct;
 
+    QByteArray m_restoreStateData; // Temporary storage for the state data
+
     Updater updater;
 
 #ifdef Q_OS_WIN
-- 
2.49.0

