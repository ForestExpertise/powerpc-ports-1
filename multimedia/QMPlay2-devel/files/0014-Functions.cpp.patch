From 1ac625db6f06a203d61f723d355bbc88e9779e4e Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Tue, 15 Apr 2025 19:21:22 +0800
Subject: [PATCH 14/60] Functions.cpp

---
 src/qmplay2/Functions.cpp | 32 +++++++++++++++++++-------------
 1 file changed, 19 insertions(+), 13 deletions(-)

diff --git a/src/qmplay2/Functions.cpp b/src/qmplay2/Functions.cpp
index 572952e2..554b0100 100644
--- a/src/qmplay2/Functions.cpp
+++ b/src/qmplay2/Functions.cpp
@@ -36,12 +36,16 @@
 #include <QDir>
 #include <QUrl>
 #include <QRegExp>
-#include <QWindow>
+#include <QWidget>
 #include <QLibrary>
 #include <QTextCodec>
 #include <QMessageBox>
 #include <QStyleOption>
 
+#ifdef Q_WS_X11
+#include <QX11Info>
+#endif
+
 extern "C"
 {
     #include <libavformat/version.h>
@@ -58,14 +62,16 @@ static inline void swapArray(quint8 *a, quint8 *b, int size)
     memcpy(b, t, size);
 }
 
-static inline QWindow *getNativeWindow(const QWidget *w)
+static inline WId getNativeWindow(const QWidget *w)
 {
     if (w)
     {
-        if (QWidget *winW = w->window())
-            return winW->windowHandle();
+        if (const QWidget *winW = w->window())
+        {
+            return winW->winId();
+        }
     }
-    return nullptr;
+    return 0;
 }
 
 /**/
@@ -301,7 +307,8 @@ QPixmap Functions::getPixmapFromIcon(const QIcon &icon, QSize size, QWidget *w)
         imgSize.scale(size, size.isEmpty() ? Qt::KeepAspectRatioByExpanding : Qt::KeepAspectRatio);
     }
 
-    return icon.pixmap(getNativeWindow(w), imgSize);
+    Q_UNUSED(w)
+    return icon.pixmap(imgSize);
 }
 void Functions::drawPixmap(QPainter &p, const QPixmap &pixmap, const QWidget *w, Qt::TransformationMode transformationMode, Qt::AspectRatioMode aRatioMode, QSize size, qreal scale)
 {
@@ -347,14 +354,13 @@ void Functions::drawPixmap(QPainter &p, const QPixmap &pixmap, const QWidget *w,
         pixmapSize = pixmap.size();
     }
 
-    const qreal dpr = w->devicePixelRatioF();
+    qreal devicePixelRatio = QMPlay2Core.getVideoDevicePixelRatio();
 
-    pixmapToDraw = pixmapToDraw.scaled(pixmapSize * dpr, Qt::IgnoreAspectRatio, transformationMode);
-    pixmapToDraw.setDevicePixelRatio(dpr);
+    pixmapToDraw = pixmapToDraw.scaled(pixmapSize * devicePixelRatio, Qt::IgnoreAspectRatio, transformationMode);
 
     const QPoint pixmapPos {
-        size.width()  / 2 - int(pixmapToDraw.width()  / (dpr * 2)),
-        size.height() / 2 - int(pixmapToDraw.height() / (dpr * 2))
+        size.width()  / 2 - int(pixmapToDraw.width()  / (devicePixelRatio * 2)),
+        size.height() / 2 - int(pixmapToDraw.height() / (devicePixelRatio * 2))
     };
 
     p.drawPixmap(pixmapPos, pixmapToDraw);
@@ -405,8 +411,8 @@ void Functions::paintOSD(bool rgbSwapped, const QList<const QMPlay2OSD *> &osd_l
         for (int j = 0; j < osd->imageCount(); j++)
         {
             const QMPlay2OSD::Image &img = osd->getImage(j);
-            const QImage qImg = QImage((const uchar *)img.data.constData(), img.rect.width(), img.rect.height(), rgbSwapped ? QImage::Format_RGBA8888 : QImage::Format_ARGB32);
-            painter.drawImage(img.rect.topLeft(), qImg);
+            const QImage qImg = QImage((uchar *)img.data.data(), img.rect.width(), img.rect.height(), QImage::Format_ARGB32);
+            painter.drawImage(img.rect.topLeft(), rgbSwapped ? qImg.rgbSwapped() : qImg);
         }
         if (osd->needsRescale())
             painter.restore();
-- 
2.49.0

