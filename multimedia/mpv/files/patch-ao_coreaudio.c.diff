--- audio/out/ao_coreaudio.c	2025-03-26 01:33:27.000000000 +0800
+++ audio/out/ao_coreaudio.c	2025-05-12 05:31:28.000000000 +0800
@@ -29,11 +29,6 @@
 #include "ao_coreaudio_utils.h"
 #include "osdep/mac/compat.h"
 
-// The timeout for stopping the audio unit after being reset. This allows the
-// device to sleep after playback paused. The duration is chosen to match the
-// behavior of AVFoundation.
-#define IDLE_TIME 7 * NSEC_PER_SEC
-
 struct priv {
     // This must be put in the front
     struct coreaudio_cb_sem sem;
@@ -48,10 +43,6 @@
 
     bool change_physical_format;
 
-    // Block that is executed after `IDLE_TIME` to stop audio output unit.
-    dispatch_block_t idle_work;
-    dispatch_queue_t queue;
-
     int hotplug_cb_registration_times;
 };
 
@@ -190,9 +181,6 @@
     reinit_latency(ao);
     ao->device_buffer = av_rescale(p->hw_latency_ns, ao->samplerate, 1000000000) * 2;
 
-    p->queue = dispatch_queue_create("io.mpv.coreaudio_stop_during_idle",
-                                     DISPATCH_QUEUE_SERIAL);
-
     return CONTROL_OK;
 
 coreaudio_error:
@@ -359,89 +347,24 @@
     p->hw_latency_ns = ca_get_hardware_latency(ao);
 }
 
-static void stop(struct ao *ao)
-{
-    struct priv *p = ao->priv;
-    OSStatus err = AudioOutputUnitStop(p->audio_unit);
-    CHECK_CA_WARN("can't stop audio unit");
-}
-
-static void cancel_and_release_idle_work(struct priv *p)
-{
-    if (!p->idle_work)
-        return;
-
-    dispatch_block_cancel(p->idle_work);
-    Block_release(p->idle_work);
-    p->idle_work = NULL;
-}
-
-static void stop_after_idle_time(struct ao *ao)
-{
-    struct priv *p = ao->priv;
-
-    cancel_and_release_idle_work(p);
-
-    p->idle_work = dispatch_block_create(0, ^{
-        MP_VERBOSE(ao, "Stopping audio unit due to idle timeout\n");
-        stop(ao);
-    });
-
-    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, IDLE_TIME),
-                   p->queue, p->idle_work);
-}
-
-static void _reset(void *_ao)
+static void reset(struct ao *ao)
 {
-    struct ao *ao = (struct ao *)_ao;
     struct priv *p = ao->priv;
     OSStatus err = AudioUnitReset(p->audio_unit, kAudioUnitScope_Global, 0);
     CHECK_CA_WARN("can't reset audio unit");
-
-    // Until the audio unit is stopped the macOS daemon coreaudiod continues to
-    // consume CPU and prevent macOS from sleeping. Immediately stopping the
-    // audio unit would be disruptive for short pause/resume cycles as
-    // restarting the audio unit takes a noticeable amount of time when a
-    // wireless audio device is being used. Instead the audio unit is stopped
-    // after a delay if it remains idle.
-    stop_after_idle_time(ao);
 }
 
-static void reset(struct ao *ao)
-{
-    struct priv *p = ao->priv;
-    // Must dispatch to serialize reset, start and stop operations.
-    dispatch_sync_f(p->queue, ao, &_reset);
-}
-
-static void _start(void *_ao)
+static void start(struct ao *ao)
 {
-    struct ao *ao = (struct ao *)_ao;
     struct priv *p = ao->priv;
-
-    if (p->idle_work)
-        dispatch_block_cancel(p->idle_work);
-
     OSStatus err = AudioOutputUnitStart(p->audio_unit);
     CHECK_CA_WARN("can't start audio unit");
 }
 
-static void start(struct ao *ao)
-{
-    struct priv *p = ao->priv;
-    // Must dispatch to serialize reset, start and stop operations.
-    dispatch_sync_f(p->queue, ao, &_start);
-}
-
 static void uninit(struct ao *ao)
 {
     struct priv *p = ao->priv;
 
-    dispatch_sync(p->queue, ^{
-        cancel_and_release_idle_work(p);
-    });
-    dispatch_release(p->queue);
-
     AudioOutputUnitStop(p->audio_unit);
     AudioUnitUninitialize(p->audio_unit);
     AudioComponentInstanceDispose(p->audio_unit);
