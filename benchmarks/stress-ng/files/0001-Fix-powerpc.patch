From 1efcbe09128285d3983aa511aa9984ce6d997685 Mon Sep 17 00:00:00 2001
From: Colin Ian King <colin.i.king@gmail.com>
Date: Fri, 28 Mar 2025 15:44:31 +0000
Subject: [PATCH] stress-cyclic: make policy non-clobberable for ppc32 gcc
 4.9.2 builds

Clean up warning

Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
---
 stress-cyclic.c | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/stress-cyclic.c b/stress-cyclic.c
index f608af7b7..ab39e71bc 100644
--- a/stress-cyclic.c
+++ b/stress-cyclic.c
@@ -594,7 +594,8 @@ static int stress_cyclic(stress_args_t *args)
 	uint64_t cyclic_dist = 0;
 	int32_t cyclic_prio = INT32_MAX;
 	size_t cyclic_samples = DEFAULT_SAMPLES;
-	int policy, rc = EXIT_SUCCESS;
+	NOCLOBBER int policy;
+	int rc = EXIT_SUCCESS;
 	size_t cyclic_policy = 0;
 	size_t cyclic_method = 0;
 	const double start = stress_time_now();

From 8733056c9b5d73d16ffb3a3bb237ea9ea60bcafc Mon Sep 17 00:00:00 2001
From: Colin Ian King <colin.i.king@gmail.com>
Date: Fri, 28 Mar 2025 15:45:23 +0000
Subject: [PATCH] stress-nop: make policy non-clobberable for ppc32 gcc 4.9.2
 builds

Clean up warning

Signed-off-by: Colin Ian King <colin.i.king@gmail.com>
---
 stress-nop.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/stress-nop.c b/stress-nop.c
index 4bb881373..aeeb434fa 100644
--- a/stress-nop.c
+++ b/stress-nop.c
@@ -314,7 +314,7 @@ static int stress_nop(stress_args_t *args)
 {
 	size_t nop_instr = 0;
 	NOCLOBBER stress_nop_instr_t *instr;
-	bool do_random;
+	NOCLOBBER bool do_random;
 	double duration = 0.0, count = 0.0, rate;
 
 	(void)stress_get_setting("nop-instr", &nop_instr);

From a624528d33bb5d609421dc7ac8e7b5515c47b4ae Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Wed, 26 Mar 2025 17:43:05 +0800
Subject: [PATCH] Enable PPC32 builds, use PPC32 opcodes

This enables PPC32 builds with PPC32 specific opcodes

[Colin Ian King] Fix stress-regs checksum

Signed-off-by: Sergey Fedorov <barracuda@macos-powerpc.org>
Signed-off-by: Colin Ian King <colin.i.king@gmail.com>

Signed-off-by: cking <cking@ppc32>
---
 Makefile.config              | 16 ++++++
 core-arch.h                  |  4 +-
 core-asm-ppc64.h             | 59 ++++++++++++++++++++--
 core-helper.c                |  3 +-
 core-lock.c                  |  3 ++
 stress-cachehammer.c         | 98 ++++++++++++++++++++++++++++++++++++
 stress-flushcache.c          | 24 +++++++++
 stress-icache.c              |  1 +
 stress-llc-affinity.c        | 69 +++++++++++++++++++++++++
 stress-lockbus.c             |  1 +
 stress-misaligned.c          |  2 +-
 stress-nop.c                 | 11 ++++
 stress-prefetch.c            | 18 +++++++
 stress-regs.c                | 62 +++++++++++++++++++++++
 stress-sigill.c              |  8 +++
 stress-sigsegv.c             |  2 +
 stress-syncload.c            | 22 +++++---
 stress-tsc.c                 |  2 +-
 stress-waitcpu.c             | 27 ++++++++++
 stress-workload.c            |  5 ++
 test/test-asm-ppc-dcbst.c    | 35 +++++++++++++
 test/test-asm-ppc-dcbt.c     | 33 ++++++++++++
 test/test-asm-ppc-dcbtst.c   | 33 ++++++++++++
 test/test-asm-ppc-icbi.c     | 33 ++++++++++++
 test/test-asm-ppc64-dcbst.c  |  2 +-
 test/test-asm-ppc64-dcbt.c   |  2 +-
 test/test-asm-ppc64-dcbtst.c |  2 +-
 test/test-asm-ppc64-icbi.c   |  2 +-
 test/test-asm-ppc64-msync.c  |  2 +-
 29 files changed, 562 insertions(+), 19 deletions(-)
 create mode 100644 test/test-asm-ppc-dcbst.c
 create mode 100644 test/test-asm-ppc-dcbt.c
 create mode 100644 test/test-asm-ppc-dcbtst.c
 create mode 100644 test/test-asm-ppc-icbi.c

diff --git a/Makefile.config b/Makefile.config
index dc24e8553..3d5126cc7 100644
--- a/Makefile.config
+++ b/Makefile.config
@@ -1216,6 +1216,10 @@ cpufeatures: \
 	ASM_PPC64_ICBI \
 	ASM_PPC64_MSYNC \
 	ASM_PPC64_TLBIE \
+	ASM_PPC_DCBST \
+	ASM_PPC_DCBT \
+	ASM_PPC_DCBTST \
+	ASM_PPC_ICBI \
 	ASM_RISCV_FENCE \
 	ASM_RISCV_FENCE_I \
 	ASM_RISCV_SFENCE_VMA \
@@ -1424,6 +1428,18 @@ ASM_PPC64_MSYNC:
 ASM_PPC64_TLBIE:
 	$(call check,test-asm-ppc64-tlbie,HAVE_ASM_PPC64_TLBIE,ppc64 tlbie instruction)
 
+ASM_PPC_DCBST:
+	$(call check,test-asm-ppc-dcbst,HAVE_ASM_PPC_DCBST,ppc dcbst instruction)
+
+ASM_PPC_DCBT:
+	$(call check,test-asm-ppc-dcbt,HAVE_ASM_PPC_DCBT,ppc dcbt instruction)
+
+ASM_PPC_DCBTST:
+	$(call check,test-asm-ppc-dcbtst,HAVE_ASM_PPC_DCBTST,ppc dcbtst instruction)
+
+ASM_PPC_ICBI:
+	$(call check,test-asm-ppc-icbi,HAVE_ASM_PPC_ICBI,ppc icbi instruction)
+
 ASM_RISCV_FENCE:
 	$(call check,test-asm-riscv-fence,HAVE_ASM_RISCV_FENCE,RISC-V fence instruction)
 
diff --git a/core-arch.h b/core-arch.h
index c472b8c9f..6f319e9ad 100644
--- a/core-arch.h
+++ b/core-arch.h
@@ -90,14 +90,14 @@
 #endif
 
 /* Arch specific PPC64 */
-#if defined(__PPC64__)
+#if defined(__PPC64__) || defined(__ppc64__)
 #define STRESS_ARCH_PPC64	(1)
 #define STRESS_OPCODE_SIZE	(32)
 #define STRESS_OPCODE_MASK	(0xffffffffUL)
 #endif
 
 /* Arch specific PPC (32 bit ) */
-#if defined(__PPC__)
+#if defined(__PPC__) || defined(__ppc__)
 #define STRESS_ARCH_PPC		(1)
 #define STRESS_OPCODE_SIZE	(32)
 #define STRESS_OPCODE_MASK	(0xffffffffUL)
diff --git a/core-asm-ppc64.h b/core-asm-ppc64.h
index 2072cbd3e..d31ec4df7 100644
--- a/core-asm-ppc64.h
+++ b/core-asm-ppc64.h
@@ -22,6 +22,14 @@
 #include "stress-ng.h"
 #include "core-arch.h"
 
+#if defined(__APPLE__)
+#define REGISTER_PREFIX "r"
+#else
+#define REGISTER_PREFIX ""
+#endif
+
+#define REGISTER(r) REGISTER_PREFIX #r
+
 #if defined(STRESS_ARCH_PPC64)
 
 #if defined(HAVE_ASM_PPC64_DARN)
@@ -73,17 +81,62 @@ static inline void ALWAYS_INLINE stress_asm_ppc64_msync(void)
 
 static inline void ALWAYS_INLINE stress_asm_ppc64_yield(void)
 {
-	__asm__ __volatile__("or 27,27,27;\n");
+	__asm__ __volatile__("or " REGISTER(27) "," REGISTER(27) "," REGISTER(27) ";\n");
 }
 
 static inline void ALWAYS_INLINE stress_asm_ppc64_mdoio(void)
 {
-	__asm__ __volatile__("or 29,29,29;\n");
+	__asm__ __volatile__("or " REGISTER(29) "," REGISTER(29) "," REGISTER(29) ";\n");
 }
 
 static inline void ALWAYS_INLINE stress_asm_ppc64_mdoom(void)
 {
-	__asm__ __volatile__("or 30,30,30;\n");
+	__asm__ __volatile__("or " REGISTER(30) "," REGISTER(30) "," REGISTER(30) ";\n");
+}
+
+#elif defined(STRESS_ARCH_PPC)
+
+#if defined(HAVE_ASM_PPC_DCBST)
+static inline void ALWAYS_INLINE stress_asm_ppc_dcbst(void *addr)
+{
+	__asm__ __volatile__("dcbst %y0" : : "Z"(*(uint8_t *)addr) : "memory");
+}
+#endif
+
+#if defined(HAVE_ASM_PPC_DCBT)
+static inline void ALWAYS_INLINE stress_asm_ppc_dcbt(void *addr)
+{
+	__asm__ __volatile__("dcbt 0,%0" : : "r"(addr));
+}
+#endif
+
+#if defined(HAVE_ASM_PPC_DCBTST)
+static inline void ALWAYS_INLINE stress_asm_ppc_dcbtst(void *addr)
+{
+	__asm__ __volatile__("dcbtst 0,%0" : : "r"(addr));
+}
+#endif
+
+#if defined(HAVE_ASM_PPC_ICBI)
+static inline void ALWAYS_INLINE stress_asm_ppc_icbi(void *addr)
+{
+	__asm__ __volatile__("icbi %y0" : : "Z"(*(uint8_t *)addr) : "memory");
+}
+#endif
+
+static inline void ALWAYS_INLINE stress_asm_ppc_yield(void)
+{
+	__asm__ __volatile__("or " REGISTER(27) "," REGISTER(27) "," REGISTER(27) ";\n");
+}
+
+static inline void ALWAYS_INLINE stress_asm_ppc_mdoio(void)
+{
+	__asm__ __volatile__("or " REGISTER(29) "," REGISTER(29) "," REGISTER(29) ";\n");
+}
+
+static inline void ALWAYS_INLINE stress_asm_ppc_mdoom(void)
+{
+	__asm__ __volatile__("or " REGISTER(30) "," REGISTER(30) "," REGISTER(30) ";\n");
 }
 
 /* #if defined(STRESS_ARCH_PPC64) */
diff --git a/core-helper.c b/core-helper.c
index 2a85ef8bf..06cce794b 100644
--- a/core-helper.c
+++ b/core-helper.c
@@ -2599,7 +2599,8 @@ int stress_sigrestore(
 unsigned int stress_get_cpu(void)
 {
 #if defined(HAVE_SCHED_GETCPU)
-#if defined(__PPC64__) ||	\
+#if defined(__PPC64__) || defined(__ppc64__) ||	\
+    defined(__PPC__) || defined(__ppc__) ||	\
     defined(__s390x__)
 	unsigned int cpu, node;
 
diff --git a/core-lock.c b/core-lock.c
index beb6f901b..5d615337b 100644
--- a/core-lock.c
+++ b/core-lock.c
@@ -207,6 +207,7 @@ static int stress_atomic_lock_acquire(stress_lock_t *lock)
 #if defined(HAVE_ASM_X86_PAUSE) ||	\
     defined(HAVE_ASM_LOONG64_DBAR) ||	\
     defined(STRESS_ARCH_PPC64) ||	\
+    defined(STRESS_ARCH_PPC) ||	\
     defined(STRESS_ARCH_RISCV)
 #define STRESS_LOCK_BACKOFF
 #endif
@@ -230,6 +231,8 @@ static int stress_atomic_lock_acquire_relax(stress_lock_t *lock)
 				stress_asm_loong64_dbar();
 #elif defined(STRESS_ARCH_PPC64)
 				stress_asm_ppc64_yield();
+#elif defined(STRESS_ARCH_PPC)
+				stress_asm_ppc_yield();
 #elif defined(STRESS_ARCH_RISCV)
 				stress_asm_riscv_pause();
 #endif
diff --git a/stress-cachehammer.c b/stress-cachehammer.c
index 0f8bc3135..28579ee9a 100644
--- a/stress-cachehammer.c
+++ b/stress-cachehammer.c
@@ -426,6 +426,35 @@ static void OPTIMIZE3 hammer_ppc64_dcbst(void *addr1, void *addr2, const bool is
 }
 #endif
 
+#if defined(HAVE_ASM_PPC_DCBST)
+/*
+ *  hammer_ppc_dcbst()
+ *	powerpc Data Cache Block Store
+ */
+static void OPTIMIZE3 hammer_ppc_dcbst(void *addr1, void *addr2, const bool is_bad_addr)
+{
+	if (UNLIKELY(is_bad_addr)) {
+		stress_asm_ppc_dcbst(addr1);
+		stress_asm_mb();
+		stress_asm_ppc_dcbst(addr2);
+		stress_asm_mb();
+	} else {
+		volatile uint64_t *vptr = (volatile uint64_t *)addr1;
+
+		*vptr = ~0ULL;
+		stress_asm_mb();
+		stress_asm_ppc_dcbst(addr1);
+		stress_asm_mb();
+
+		vptr = (volatile uint64_t *)addr2;
+		*vptr = ~0ULL;
+		stress_asm_mb();
+		stress_asm_ppc_dcbst(addr2);
+		stress_asm_mb();
+	}
+}
+#endif
+
 #if defined(HAVE_ASM_PPC64_DCBT)
 /*
  *  hammer_ppc64_dcbt()
@@ -456,6 +485,36 @@ static void OPTIMIZE3 hammer_ppc64_dcbt(void *addr1, void *addr2, const bool is_
 }
 #endif
 
+#if defined(HAVE_ASM_PPC_DCBT)
+/*
+ *  hammer_ppc_dcbt()
+ *	powerpc Data Cache Block Touch
+ */
+static void OPTIMIZE3 hammer_ppc_dcbt(void *addr1, void *addr2, const bool is_bad_addr)
+{
+	if (UNLIKELY(is_bad_addr)) {
+		stress_asm_ppc_dcbt(addr1);
+		stress_asm_mb();
+		stress_asm_ppc_dcbt(addr2);
+		stress_asm_mb();
+	} else {
+		const volatile uint64_t *vptr;
+
+		vptr = (volatile uint64_t *)addr1;
+		stress_asm_ppc_dcbt(addr1);
+		stress_asm_mb();
+		(void)*vptr;
+		stress_asm_mb();
+
+		vptr = (volatile uint64_t *)addr2;
+		stress_asm_ppc_dcbt(addr2);
+		stress_asm_mb();
+		(void)*vptr;
+		stress_asm_mb();
+	}
+}
+#endif
+
 #if defined(HAVE_ASM_PPC64_DCBTST)
 /*
  *  hammer_ppc64_dcbtst()
@@ -486,6 +545,36 @@ static void OPTIMIZE3 hammer_ppc64_dcbtst(void *addr1, void *addr2, const bool i
 }
 #endif
 
+#if defined(HAVE_ASM_PPC_DCBTST)
+/*
+ *  hammer_ppc_dcbtst()
+ *	powerpc Data Cache Block Touch for Store
+ */
+static void OPTIMIZE3 hammer_ppc_dcbtst(void *addr1, void *addr2, const bool is_bad_addr)
+{
+	if (UNLIKELY(is_bad_addr)) {
+		stress_asm_ppc_dcbtst(addr1);
+		stress_asm_mb();
+		stress_asm_ppc_dcbtst(addr2);
+		stress_asm_mb();
+	} else {
+		volatile uint64_t *vptr;
+
+		vptr = (volatile uint64_t *)addr1;
+		stress_asm_ppc_dcbtst(addr1);
+		stress_asm_mb();
+		*vptr = ~0ULL;
+		stress_asm_mb();
+
+		vptr = (volatile uint64_t *)addr2;
+		stress_asm_ppc_dcbtst(addr2);
+		stress_asm_mb();
+		*vptr = ~0ULL;
+		stress_asm_mb();
+	}
+}
+#endif
+
 #if defined(HAVE_ASM_PPC64_MSYNC)
 /*
  *  hammer_ppc64_msync()
@@ -826,6 +915,15 @@ static const stress_cachehammer_func_t stress_cachehammer_funcs[] = {
 #if defined(HAVE_ASM_X86_CLWB)
 	{ "clwb",	stress_cpu_x86_has_clwb,	hammer_clwb },
 #endif
+#if defined(HAVE_ASM_PPC_DCBST)
+	{ "dcbst",	hammer_valid,			hammer_ppc_dcbst },
+#endif
+#if defined(HAVE_ASM_PPC_DCBT)
+	{ "dcbt",	hammer_valid,			hammer_ppc_dcbt },
+#endif
+#if defined(HAVE_ASM_PPC_DCBTST)
+	{ "dcbtst",	hammer_valid,			hammer_ppc_dcbtst },
+#endif
 #if defined(HAVE_ASM_PPC64_DCBST)
 	{ "dcbst",	hammer_valid,			hammer_ppc64_dcbst },
 #endif
diff --git a/stress-flushcache.c b/stress-flushcache.c
index b9059dfb3..05afe3272 100644
--- a/stress-flushcache.c
+++ b/stress-flushcache.c
@@ -36,6 +36,7 @@ static const stress_help_t help[] = {
      defined(STRESS_ARCH_ARM) ||	\
      defined(STRESS_ARCH_RISCV) ||	\
      defined(STRESS_ARCH_S390) ||	\
+     defined(STRESS_ARCH_PPC) ||	\
      defined(STRESS_ARCH_PPC64)) &&	\
      defined(HAVE_MPROTECT) &&		\
      ((defined(HAVE_COMPILER_GCC_OR_MUSL) && NEED_GNUC(4,6,0)) ||	\
@@ -121,6 +122,24 @@ static inline void dcbst_page(
 }
 #endif
 
+#if defined(HAVE_ASM_PPC_DCBST)
+static inline void dcbst_page(
+	void *addr,
+	const size_t page_size,
+	const size_t cl_size)
+{
+	register uint8_t *ptr = (uint8_t *)addr;
+	const uint8_t *ptr_end = ptr + page_size;
+
+	while (ptr < ptr_end) {
+		(*(volatile uint8_t *)ptr)++;
+		(*(volatile uint8_t *)ptr)--;
+		stress_asm_ppc_dcbst((void *)ptr);
+		ptr += cl_size;
+	}
+}
+#endif
+
 #if defined(HAVE_ASM_X86_CLDEMOTE)
 static inline void cldemote_page(
 	void *addr,
@@ -187,11 +206,15 @@ static inline int stress_flush_icache(
 		shim_flush_icache((char *)ptr, (char *)ptr + cl_size);
 #if defined(HAVE_ASM_PPC64_ICBI)
 		stress_asm_ppc64_icbi((void *)ptr);
+#elif defined(HAVE_ASM_PPC_ICBI)
+		stress_asm_ppc_icbi((void *)ptr);
 #endif
 		*vptr = val;
 		shim_flush_icache((char *)ptr, (char *)ptr + cl_size);
 #if defined(HAVE_ASM_PPC64_ICBI)
 		stress_asm_ppc64_icbi((void *)ptr);
+#elif defined(HAVE_ASM_PPC_ICBI)
+		stress_asm_ppc_icbi((void *)ptr);
 #endif
 		ptr += cl_size;
 	}
@@ -217,6 +240,7 @@ static inline int stress_flush_dcache(
 	const size_t page_size = args->page_size;
 #if defined(HAVE_ASM_X86_CLFLUSH) ||	\
     defined(HAVE_ASM_X86_CLDEMOTE) ||	\
+    defined(HAVE_ASM_PPC_DCBST) ||	\
     defined(HAVE_ASM_PPC64_DCBST)
 	const size_t cl_size = context->cl_size;
 #endif
diff --git a/stress-icache.c b/stress-icache.c
index 81a764ae6..45afb1a3e 100644
--- a/stress-icache.c
+++ b/stress-icache.c
@@ -33,6 +33,7 @@ static const stress_help_t help[] = {
      defined(STRESS_ARCH_ARM) ||	\
      defined(STRESS_ARCH_RISCV) ||	\
      defined(STRESS_ARCH_S390) ||	\
+     defined(STRESS_ARCH_PPC) ||	\
      defined(STRESS_ARCH_PPC64)) &&	\
      defined(HAVE_MPROTECT)
 
diff --git a/stress-llc-affinity.c b/stress-llc-affinity.c
index 89f2b3a0d..0422b8d3a 100644
--- a/stress-llc-affinity.c
+++ b/stress-llc-affinity.c
@@ -109,6 +109,37 @@ static void TARGET_CLONES OPTIMIZE3 stress_llc_write_cache_line_64_ppc64_dcbst(
 }
 #endif
 
+#if defined(HAVE_ASM_PPC_DCBST)
+static void TARGET_CLONES OPTIMIZE3 stress_llc_write_cache_line_64_ppc_dcbst(
+	uint64_t *buf,
+	const uint64_t *buf_end,
+	double *duration,
+	const size_t cache_line_size)
+{
+	double t1, t2;
+	static uint64_t val = 0;
+	register uint64_t *ptr;
+
+	(void)cache_line_size;
+
+	t1 = stress_time_now();
+	for (ptr = buf; ptr < buf_end; ptr += 8, val++) {
+		*(ptr + 0) = val;
+		*(ptr + 1) = val;
+		*(ptr + 2) = val;
+		*(ptr + 3) = val;
+		*(ptr + 4) = val;
+		*(ptr + 5) = val;
+		*(ptr + 6) = val;
+		*(ptr + 7) = val;
+		stress_asm_ppc_dcbst((void *)ptr);
+	}
+	t2 = stress_time_now();
+
+	*duration += (t2 - t1);
+}
+#endif
+
 #if defined(HAVE_ASM_X86_CLFLUSH)
 static void TARGET_CLONES OPTIMIZE3 stress_llc_write_cache_line_64_x86_clfsh(
 	uint64_t *buf,
@@ -220,6 +251,32 @@ static void TARGET_CLONES OPTIMIZE3 stress_llc_write_cache_line_n_ppc64_dcbst(
 }
 #endif
 
+#if defined(HAVE_ASM_PPC_DCBST)
+static void TARGET_CLONES OPTIMIZE3 stress_llc_write_cache_line_n_ppc_dcbst(
+	uint64_t *buf,
+	const uint64_t *buf_end,
+	double *duration,
+	const size_t cache_line_size)
+{
+	double t1, t2;
+	static uint64_t val = 0;
+	register uint64_t *ptr;
+	const size_t n = cache_line_size / sizeof(uint64_t);
+
+	t1 = stress_time_now();
+	for (ptr = buf; ptr < buf_end; ptr += n, val++) {
+		register uint64_t *cptr, *cptr_end;
+
+		for (cptr = ptr, cptr_end = ptr + n; cptr < cptr_end; cptr++)
+			*cptr = val;
+		stress_asm_ppc_dcbst((void *)ptr);
+	}
+	t2 = stress_time_now();
+
+	*duration += (t2 - t1);
+}
+#endif
+
 #if defined(HAVE_ASM_X86_CLFLUSH)
 static void TARGET_CLONES OPTIMIZE3 stress_llc_write_cache_line_n_x86_clfsh(
 	uint64_t *buf,
@@ -433,6 +490,12 @@ static int stress_llc_affinity(stress_args_t *args)
 			clflush_op = "dcbst";
 		} else
 #endif
+#if defined(HAVE_ASM_PPC_DCBST)
+		if (llc_affinity_clflush) {
+			write_func = stress_llc_write_cache_line_64_ppc_dcbst;
+			clflush_op = "dcbst";
+		} else
+#endif
 #if defined(HAVE_ASM_X86_CLFLUSHOPT)
 		if (llc_affinity_clflush && stress_cpu_x86_has_clflushopt()) {
 			write_func = stress_llc_write_cache_line_64_x86_clfshopt;
@@ -454,6 +517,12 @@ static int stress_llc_affinity(stress_args_t *args)
 			clflush_op = "dcbst";
 		} else
 #endif
+#if defined(HAVE_ASM_PPC_DCBST)
+		if (llc_affinity_clflush) {
+			write_func = stress_llc_write_cache_line_n_ppc_dcbst;
+			clflush_op = "dcbst";
+		} else
+#endif
 #if defined(HAVE_ASM_X86_CLFLUSHOPT)
 		if (llc_affinity_clflush && stress_cpu_x86_has_clflushopt()) {
 			write_func = stress_llc_write_cache_line_n_x86_clfshopt;
diff --git a/stress-lockbus.c b/stress-lockbus.c
index 53463e27a..a8a1fe40c 100644
--- a/stress-lockbus.c
+++ b/stress-lockbus.c
@@ -66,6 +66,7 @@ static const stress_opt_t opts[] = {
        defined(STRESS_ARCH_M68K) ||			\
        defined(STRESS_ARCH_MIPS) ||			\
        defined(STRESS_ARCH_PPC64) ||			\
+       defined(STRESS_ARCH_PPC) ||			\
        defined(STRESS_ARCH_RISCV) ||			\
        defined(STRESS_ARCH_S390) ||			\
        defined(STRESS_ARCH_SH4) ||			\
diff --git a/stress-misaligned.c b/stress-misaligned.c
index 7dca29fe7..913d87431 100644
--- a/stress-misaligned.c
+++ b/stress-misaligned.c
@@ -44,7 +44,7 @@
 #undef HAVE_ATOMIC
 #endif
 /* Disable atomic ops for PPC64 with gcc < 5.0 as these can lock up in VM */
-#if defined(STRESS_ARCH_PPC64) &&	\
+#if (defined(STRESS_ARCH_PPC64) || defined(STRESS_ARCH_PPC)) &&	\
     !NEED_GNUC(5, 0, 0)
 #undef HAVE_ATOMIC
 #endif
diff --git a/stress-nop.c b/stress-nop.c
index aeeb434fa..e5711ec5b 100644
--- a/stress-nop.c
+++ b/stress-nop.c
@@ -203,6 +203,12 @@ STRESS_NOP_SPIN_OP(ppc64_mdoio, stress_asm_ppc64_mdoio);
 STRESS_NOP_SPIN_OP(ppc64_mdoom, stress_asm_ppc64_mdoom);
 #endif
 
+#if defined(STRESS_ARCH_PPC)
+STRESS_NOP_SPIN_OP(ppc_yield, stress_asm_ppc_yield);
+STRESS_NOP_SPIN_OP(ppc_mdoio, stress_asm_ppc_mdoio);
+STRESS_NOP_SPIN_OP(ppc_mdoom, stress_asm_ppc_mdoom);
+#endif
+
 #if defined(STRESS_ARCH_S390)
 static inline void stress_op_s390_nopr(void)
 {
@@ -253,6 +259,11 @@ static stress_nop_instr_t nop_instrs[] = {
 	{ "mdoio",	stress_nop_spin_ppc64_mdoio,	NULL,	false,	false },
 	{ "mdoom",	stress_nop_spin_ppc64_mdoom,	NULL,	false,	false },
 	{ "yield",	stress_nop_spin_ppc64_yield,	NULL,	false,	false },
+#endif
+#if defined(STRESS_ARCH_PPC)
+	{ "mdoio",	stress_nop_spin_ppc_mdoio,	NULL,	false,	false },
+	{ "mdoom",	stress_nop_spin_ppc_mdoom,	NULL,	false,	false },
+	{ "yield",	stress_nop_spin_ppc_yield,	NULL,	false,	false },
 #endif
 	/* Must be last of the array */
 	{ "random",	stress_nop_random,		NULL,	false,	false },
diff --git a/stress-prefetch.c b/stress-prefetch.c
index d3c6bb31f..b7719a714 100644
--- a/stress-prefetch.c
+++ b/stress-prefetch.c
@@ -65,6 +65,8 @@
 #define STRESS_PREFETCH_X86_PREFETCHNTA	(6)
 #define STRESS_PREFETCH_PPC64_DCBT	(7)
 #define STRESS_PREFETCH_PPC64_DCBTST	(8)
+#define STRESS_PREFETCH_PPC_DCBT	(9)
+#define STRESS_PREFETCH_PPC_DCBTST	(10)
 
 static inline bool stress_prefetch_true(void)
 {
@@ -93,6 +95,12 @@
 #if defined(HAVE_ASM_PPC64_DCBTST)
 	{ "dcbtst",		STRESS_PREFETCH_PPC64_DCBTST,	stress_prefetch_true,	true },
 #endif
+#if defined(HAVE_ASM_PPC_DCBT)
+	{ "dcbt",		STRESS_PREFETCH_PPC_DCBT,	stress_prefetch_true,	true },
+#endif
+#if defined(HAVE_ASM_PPC_DCBTST)
+	{ "dcbtst",		STRESS_PREFETCH_PPC_DCBTST,	stress_prefetch_true,	true },
+#endif
 };
 
 static inline uint64_t get_prefetch_L3_size(stress_args_t *args)
@@ -291,6 +299,16 @@
 			STRESS_PREFETCH_LOOP(stress_asm_ppc64_dcbtst, "ppc64 dcbtst");
 			break;
 #endif
+#if defined(HAVE_ASM_PPC_DCBT)
+		case STRESS_PREFETCH_PPC_DCBT:
+			STRESS_PREFETCH_LOOP(stress_asm_ppc_dcbt, "ppc dcbt");
+			break;
+#endif
+#if defined(HAVE_ASM_PPC_DCBTST)
+		case STRESS_PREFETCH_PPC_DCBTST:
+			STRESS_PREFETCH_LOOP(stress_asm_ppc_dcbtst, "ppc dcbtst");
+			break;
+#endif
 		}
 	}
 	stress_void_ptr_put(pre_ptr);
diff --git a/stress-regs.c b/stress-regs.c
index a6d12c4a4..742d3fc3f 100644
--- a/stress-regs.c
+++ b/stress-regs.c
@@ -719,6 +719,68 @@ do {			\
 }
 #endif
 
+#if defined(STRESS_ARCH_PPC)
+#define STRESS_REGS_HELPER
+/*
+ *  stress_regs_helper(void)
+ *	stress PPC registers
+ *	Notice, r30 should not be used:
+ *	stress-regs.c: error: r30 cannot be used in 'asm' here
+ */
+static void NOINLINE OPTIMIZE0 stress_regs_helper(stress_args_t *args, register uint64_t v)
+{
+	uint32_t v32 = (uint32_t)v;
+	register uint32_t r14 __asm__("r14") = v32;
+	register uint32_t r15 __asm__("r15") = r14 >> 1;
+	register uint32_t r16 __asm__("r16") = r14 << 1;
+	register uint32_t r17 __asm__("r17") = r14 >> 2;
+	register uint32_t r18 __asm__("r18") = r14 << 2;
+	register uint32_t r19 __asm__("r19") = ~r14;
+	register uint32_t r20 __asm__("r20") = ~r15;
+	register uint32_t r21 __asm__("r21") = ~r16;
+	register uint32_t r22 __asm__("r22") = ~r17;
+	register uint32_t r23 __asm__("r23") = ~r18;
+	register uint32_t r24 __asm__("r24") = r14 ^ 0xa5a5a5a5UL;
+	register uint32_t r25 __asm__("r25") = r15 ^ 0xa5a5a5a5UL;
+	register uint32_t r26 __asm__("r26") = r16 ^ 0xa5a5a5a5UL;
+	register uint32_t r27 __asm__("r27") = r17 ^ 0xa5a5a5a5UL;
+	register uint32_t r28 __asm__("r28") = r18 ^ 0xa5a5a5a5UL;
+	register uint32_t r29 __asm__("r29") = r14 ^ 0xa5a5a5a5UL;
+
+#define SHUFFLE_REGS()	\
+do {			\
+	r29 = r14;	\
+	r14 = r15;	\
+	r15 = r16;	\
+	r16 = r17;	\
+	r17 = r18;	\
+	r18 = r19;	\
+	r19 = r20;	\
+	r20 = r21;	\
+	r21 = r22;	\
+	r22 = r23;	\
+	r23 = r24;	\
+	r24 = r25;	\
+	r25 = r26;	\
+	r26 = r27;	\
+	r27 = r28;	\
+	r28 = r29;	\
+} while (0);		\
+
+	SHUFFLE_REGS16();
+
+	stash32 = r28;
+	REGS_CHECK(args, "r28", v32, stash32);
+
+	stash32 = r14 + r15 + r16 + r17 +
+		r18 + r19 + r20 + r21 +
+		r22 + r23 + r24 + r25 +
+		r26 + r27 + r28 + 29;
+
+#undef SHUFFLE_REGS
+}
+#endif
+
 #if defined(STRESS_ARCH_SPARC)
 
 #define STRESS_REGS_HELPER
diff --git a/stress-sigill.c b/stress-sigill.c
index 24c9c5b23..5a8716681 100644
--- a/stress-sigill.c
+++ b/stress-sigill.c
@@ -92,6 +92,14 @@ static void stress_illegal_op(void)
 }
 #endif
 
+#if defined(STRESS_ARCH_PPC)
+#define HAVE_ILLEGAL_OP
+static void stress_illegal_op(void)
+{
+	__asm__ __volatile__(".byte 0x00,0x00,0x00,0x00\n");
+}
+#endif
+
 #if defined(STRESS_ARCH_RISCV)
 #define HAVE_ILLEGAL_OP
 static void stress_illegal_op(void)
diff --git a/stress-sigsegv.c b/stress-sigsegv.c
index d2a9909c3..632f74653 100644
--- a/stress-sigsegv.c
+++ b/stress-sigsegv.c
@@ -233,6 +233,7 @@ static void stress_sigsegv_vdso(void)
     (defined(STRESS_ARCH_ARM) ||	\
      defined(STRESS_ARCH_MIPS) ||	\
      defined(STRESS_ARCH_PPC64) || 	\
+     defined(STRESS_ARCH_PPC) || 	\
      defined(STRESS_ARCH_RISCV) ||	\
      defined(STRESS_ARCH_S390) ||	\
      defined(STRESS_ARCH_X86))
@@ -241,6 +242,7 @@ static void stress_sigsegv_vdso(void)
 #if defined(STRESS_ARCH_ARM) ||		\
     defined(STRESS_ARCH_MIPS) ||	\
     defined(STRESS_ARCH_PPC64) || 	\
+    defined(STRESS_ARCH_PPC) || 	\
     defined(STRESS_ARCH_RISCV) ||	\
     defined(STRESS_ARCH_S390) ||	\
     defined(STRESS_ARCH_X86)
diff --git a/stress-syncload.c b/stress-syncload.c
index a027e7b86..f81cb22b6 100644
--- a/stress-syncload.c
+++ b/stress-syncload.c
@@ -31,6 +31,14 @@
 #define STRESS_SYNCLOAD_MS_MIN		(1)	/* 1 millisecond */
 #define STRESS_SYNCLOAD_MS_MAX		(10000)	/* 1 second */
 
+#if defined(__APPLE__)
+#define REGISTER_PREFIX "r"
+#else
+#define REGISTER_PREFIX ""
+#endif
+
+#define REGISTER(r) REGISTER_PREFIX #r
+
 typedef void(* stress_syncload_op_t)(void);
 
 static bool stress_sysload_x86_has_rdrand;
@@ -106,13 +114,14 @@ static void stress_syncload_yield(void)
 }
 #endif
 
-#if defined(STRESS_ARCH_PPC64)
+#if defined(STRESS_ARCH_PPC64) ||	\
+    defined(STRESS_ARCH_PPC)
 static void stress_syncload_yield(void)
 {
-        __asm__ __volatile__("or 27,27,27;\n");
-        __asm__ __volatile__("or 27,27,27;\n");
-        __asm__ __volatile__("or 27,27,27;\n");
-        __asm__ __volatile__("or 27,27,27;\n");
+        __asm__ __volatile__("or " REGISTER(27) "," REGISTER(27) "," REGISTER(27) ";\n");
+        __asm__ __volatile__("or " REGISTER(27) "," REGISTER(27) "," REGISTER(27) ";\n");
+        __asm__ __volatile__("or " REGISTER(27) "," REGISTER(27) "," REGISTER(27) ";\n");
+        __asm__ __volatile__("or " REGISTER(27) "," REGISTER(27) "," REGISTER(27) ";\n");
 }
 #endif
 
@@ -238,7 +247,8 @@ static const stress_syncload_op_t stress_syncload_ops[] = {
 #if defined(HAVE_ASM_ARM_YIELD)
 	stress_syncload_yield,
 #endif
-#if defined(STRESS_ARCH_PPC64)
+#if defined(STRESS_ARCH_PPC64) ||	\
+    defined(STRESS_ARCH_PPC)
 	stress_syncload_yield,
 #endif
 	stress_syncload_sched_yield,
diff --git a/stress-tsc.c b/stress-tsc.c
index bcf24ec10..1c38aa0e6 100644
--- a/stress-tsc.c
+++ b/stress-tsc.c
@@ -162,7 +162,7 @@ static inline uint64_t rdtsc(void)
 	return stress_asm_x86_rdtsc();
 }
 
-#elif defined(STRESS_ARCH_PPC64) &&		\
+#elif (defined(STRESS_ARCH_PPC64) || defined(STRESS_ARCH_PPC)) &&	\
       defined(HAVE_SYS_PLATFORM_PPC_H) &&	\
       defined(HAVE_PPC_GET_TIMEBASE)
 
diff --git a/stress-waitcpu.c b/stress-waitcpu.c
index 78386fff2..5d5d0a171 100644
--- a/stress-waitcpu.c
+++ b/stress-waitcpu.c
@@ -188,6 +188,28 @@ static void stress_waitcpu_ppc64_mdoom(void)
 }
 #endif
 
+#if defined(STRESS_ARCH_PPC)
+static bool stress_waitcpu_ppc_supported(void)
+{
+	return true;
+}
+
+static void stress_waitcpu_ppc_yield(void)
+{
+	stress_asm_ppc_yield();
+}
+
+static void stress_waitcpu_ppc_mdoio(void)
+{
+	stress_asm_ppc_mdoio();
+}
+
+static void stress_waitcpu_ppc_mdoom(void)
+{
+	stress_asm_ppc_mdoom();
+}
+#endif
+
 #if defined(STRESS_ARCH_RISCV)
 static bool stress_waitcpu_riscv_pause_supported(void)
 {
@@ -243,6 +265,11 @@ stress_waitcpu_method_t stress_waitcpu_method[] = {
 	{ "mdoom",	stress_waitcpu_ppc64_mdoom,	stress_waitcpu_ppc64_supported,		false, 0.0, 0.0, 0.0 },
 	{ "yield",	stress_waitcpu_ppc64_yield,	stress_waitcpu_ppc64_supported,		false, 0.0, 0.0, 0.0 },
 #endif
+#if defined(STRESS_ARCH_PPC)
+	{ "mdoio",	stress_waitcpu_ppc_mdoio,	stress_waitcpu_ppc_supported,		false, 0.0, 0.0, 0.0 },
+	{ "mdoom",	stress_waitcpu_ppc_mdoom,	stress_waitcpu_ppc_supported,		false, 0.0, 0.0, 0.0 },
+	{ "yield",	stress_waitcpu_ppc_yield,	stress_waitcpu_ppc_supported,		false, 0.0, 0.0, 0.0 },
+#endif
 #if defined(STRESS_ARCH_LOONG64)
 #if defined(HAVE_ASM_LOONG64_DBAR)
 	{ "dbar",	stress_waitcpu_loong64_dbar,	stress_waitcpu_loong64_dbar_supported,	false, 0.0, 0.0, 0.0 },
diff --git a/stress-workload.c b/stress-workload.c
index 3baa9617b..31562b368 100644
--- a/stress-workload.c
+++ b/stress-workload.c
@@ -387,6 +387,11 @@ static void stress_workload_pause(void)
 	stress_asm_ppc64_yield();
 	stress_asm_ppc64_yield();
 	stress_asm_ppc64_yield();
+#elif defined(STRESS_ARCH_PPC)
+	stress_asm_ppc_yield();
+	stress_asm_ppc_yield();
+	stress_asm_ppc_yield();
+	stress_asm_ppc_yield();
 #elif defined(STRESS_ARCH_RISCV)
 	stress_asm_riscv_pause();
 	stress_asm_riscv_pause();
diff --git a/test/test-asm-ppc-dcbst.c b/test/test-asm-ppc-dcbst.c
new file mode 100644
index 000000000..c0e4bae73
--- /dev/null
+++ b/test/test-asm-ppc-dcbst.c
@@ -0,0 +1,35 @@
+/*
+ * Copyright (C) 2022-2025 Colin Ian King.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ */
+#include <stdint.h>
+
+#if !(defined(__PPC__) || defined(__ppc__))
+#error ppc dcbst instruction not supported
+#endif
+
+static inline void dcbst(void *addr)
+{
+	__asm__ __volatile__ ("dcbst %y0" : : "Z"(*(uint8_t *)addr) : "memory");
+}
+
+int main(void)
+{
+	static char buffer[1024];
+
+	dcbst(buffer);
+}
diff --git a/test/test-asm-ppc-dcbt.c b/test/test-asm-ppc-dcbt.c
new file mode 100644
index 000000000..01ad4d437
--- /dev/null
+++ b/test/test-asm-ppc-dcbt.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2024-2025 Colin Ian King.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ */
+#if !(defined(__PPC__) || defined(__ppc__))
+#error ppc dcbt instruction not supported
+#endif
+
+static inline void dcbt(void *addr)
+{
+	__asm__ __volatile__("dcbt 0,%0" : : "r"(addr));
+}
+
+int main(void)
+{
+	static char buffer[1024];
+
+	dcbt(buffer);
+}
diff --git a/test/test-asm-ppc-dcbtst.c b/test/test-asm-ppc-dcbtst.c
new file mode 100644
index 000000000..78671e4a2
--- /dev/null
+++ b/test/test-asm-ppc-dcbtst.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2024-2025 Colin Ian King.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ */
+#if !(defined(__PPC__) || defined(__ppc__))
+#error ppc dcbtst instruction not supported
+#endif
+
+static inline void dcbtst(void *addr)
+{
+	__asm__ __volatile__("dcbtst 0,%0" : : "r"(addr));
+}
+
+int main(void)
+{
+	static char buffer[1024];
+
+	dcbtst(buffer);
+}
diff --git a/test/test-asm-ppc-icbi.c b/test/test-asm-ppc-icbi.c
new file mode 100644
index 000000000..fc7090aab
--- /dev/null
+++ b/test/test-asm-ppc-icbi.c
@@ -0,0 +1,33 @@
+/*
+ * Copyright (C) 2022-2025 Colin Ian King.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+ *
+ */
+#include <stdint.h>
+
+#if !(defined(__PPC__) || defined(__ppc__))
+#error ppc icbi instruction not supported
+#endif
+
+static inline void icbi(void *addr)
+{
+	__asm__ __volatile__ ("icbi %y0" : : "Z"(*(uint8_t *)addr) : "memory");
+}
+
+int main(void)
+{
+	icbi(main);
+}
diff --git a/test/test-asm-ppc64-dcbst.c b/test/test-asm-ppc64-dcbst.c
index c63b45513..0760908d7 100644
--- a/test/test-asm-ppc64-dcbst.c
+++ b/test/test-asm-ppc64-dcbst.c
@@ -18,7 +18,7 @@
  */
 #include <stdint.h>
 
-#if !defined(__PPC64__)
+#if !(defined(__PPC64__) || defined(__ppc64__))
 #error ppc64 dcbst instruction not supported
 #endif
 
diff --git a/test/test-asm-ppc64-dcbt.c b/test/test-asm-ppc64-dcbt.c
index 327c3e771..8911e71ce 100644
--- a/test/test-asm-ppc64-dcbt.c
+++ b/test/test-asm-ppc64-dcbt.c
@@ -16,7 +16,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  *
  */
-#if !defined(__PPC64__)
+#if !(defined(__PPC64__) || defined(__ppc64__))
 #error ppc64 dcbt instruction not supported
 #endif
 
diff --git a/test/test-asm-ppc64-dcbtst.c b/test/test-asm-ppc64-dcbtst.c
index fa41438c7..9f4507597 100644
--- a/test/test-asm-ppc64-dcbtst.c
+++ b/test/test-asm-ppc64-dcbtst.c
@@ -16,7 +16,7 @@
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
  *
  */
-#if !defined(__PPC64__)
+#if !(defined(__PPC64__) || defined(__ppc64__))
 #error ppc64 dcbtst instruction not supported
 #endif
 
diff --git a/test/test-asm-ppc64-icbi.c b/test/test-asm-ppc64-icbi.c
index afd830c04..7d1a1d0e8 100644
--- a/test/test-asm-ppc64-icbi.c
+++ b/test/test-asm-ppc64-icbi.c
@@ -18,7 +18,7 @@
  */
 #include <stdint.h>
 
-#if !defined(__PPC64__)
+#if !(defined(__PPC64__) || defined(__ppc64__))
 #error ppc64 icbi instruction not supported
 #endif
 
diff --git a/test/test-asm-ppc64-msync.c b/test/test-asm-ppc64-msync.c
index fba2030c7..65244fb77 100644
--- a/test/test-asm-ppc64-msync.c
+++ b/test/test-asm-ppc64-msync.c
@@ -18,7 +18,7 @@
  */
 
 #if !defined(__PPC64__)
-#error ppc64 darn instruction not supported
+#error ppc64 msync instruction not supported
 #endif
 
 int main(void)
