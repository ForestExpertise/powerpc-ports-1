From 729d6855f4c4f13cc574338c81cba1214d372600 Mon Sep 17 00:00:00 2001
From: Karl Dahlke <eklhad@comcast.net>
Date: Wed, 9 Apr 2025 16:06:08 -0400
Subject: [PATCH] Fudge factor so edbrowse builds against quickjs version
 2024-02-14 and above. They moved JS_VALUE_GET_OBJ out of the public header
 file, so I have to copy that macro into jseng-quick.c and hope it doesn't
 change. This is not the first code I've copied, not ideal, but it's what we
 have.

But there's more.
This version of quickjs introduces a bug which causes addEventListener to fail.
I will introduce some kind of workaround, when I find one,
and hopefully this bug will be fixed at some point.
Demonstrate the bug:

dd = {};
var evfn = "onsnork$$fn";
var sss = 'dd.'+evfn+' = function(e){                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                };';
alert(sss.length);
eval(sss);
alert(typeof dd.onsnork$$fn);

Take one space out of the sss string and it works.

Assuming I find a workaround, I'd rather it be in a separate commit.
---
 README            |  5 +++--
 src/jseng-quick.c | 11 ++++++++++-
 2 files changed, 13 insertions(+), 3 deletions(-)

diff --git a/README b/README
index 6a0e9dcd..f35c4dac 100644
--- README
+++ README
@@ -106,11 +106,12 @@ cd quickjs
 make
 If you get a lot of atomic undefines:
 make EXTRA_LIBS=-latomic
-This builds a static library- libquickjs.a.
+Even with this, some targets do not link properly on some platforms,
+but I get the static library libquickjs.a, and qjs, which is all I need.
 By default, edbrowse links to this library, and thus the
 quickjs code is part of edbrowse, and a quickjs package,
 or a dependency thereto, is not necessary.
-If your distrubution provides quickjs like a prebuilt package,
+If your distribution provides quickjs like a prebuilt package,
 set QUICKJS_INCLUDE to the quickjs directory containing its
 library header files, and QUICKJS_LIB to the directory containing
 the libquickjs.a static library.
diff --git a/src/jseng-quick.c b/src/jseng-quick.c
index ad72ee09..fc7f2716 100644
--- src/jseng-quick.c
+++ src/jseng-quick.c
@@ -17,8 +17,17 @@ you will need to include the MIT open source license.
 // So this basic include should work.
 #include "quickjs-libc.h"
 
+/*********************************************************************
+Somewhere between 01/03/2024 and 02/14/2024, JS_VALUE_GET_OBJ
+became opaque. Moved from the visible quickjs.h to quickjs.c.
+I don't know why. So one of those dreaded copy operations here.
+Let's hope this macro doesn't change out from under me; not likely.
+*********************************************************************/
+typedef struct JSObject JSObject;
+#define JS_VALUE_GET_OBJ(v) ((JSObject *)JS_VALUE_GET_PTR(v))
+
 // to track down memory leaks
-// Warning, if you turn this feature on it slows things down.
+// Warning, if you turn this feature on it slows things down, a lot!
 #ifdef LEAK
 // the quick js pointer
 struct qjp { struct qjp *next; void *ptr; short count; short lineno; };


From b41aba5dc2e2ff0c8f28f91b9a94afe4cae8d683 Mon Sep 17 00:00:00 2001
From: Karl Dahlke <eklhad@comcast.net>
Date: Wed, 9 Apr 2025 18:17:22 -0400
Subject: [PATCH] This is the workaround for the bug described in the previous
 commit. If any component of a concatenated string is longer than 512 bytes,
 eval on that string won't work; so I break it up into shorter pieces. In some
 ways that is clearer than the way I wrote it before.

---
 src/shared.js      | 27 +++++++++--------
 src/startwindow.js | 72 +++++++++++++++++++++++-----------------------
 2 files changed, 49 insertions(+), 50 deletions(-)

diff --git a/src/shared.js b/src/shared.js
index d2e3d499..f61d5506 100644
--- src/shared.js
+++ src/shared.js
@@ -619,20 +619,19 @@ if(!this[evarray]) {
 /* attaching the first handler */
 if(db$flags(1))  alert3("establish " + this.nodeName + "." + evfn);
 eval(
-'this["'+evfn+'"] = function(e){ var rc, a = this["' + evarray + '"]; \
-if(this["' + ev + '"] && e.eventPhase < 3) { \
-alert3("fire orig tag " + (this.eb$seqno >= 0 ? this.eb$seqno : -1)); rc = this["' + ev + '"](e); alert3("endfire orig");} \
-if((typeof rc == "boolean" || typeof rc == "number") && !rc) return false; \
-for(var i = 0; i<a.length; ++i) a[i].did$run = false; \
-for(var i = 0; i<a.length; ++i) { var h = a[i];if(h.did$run) continue; \
-if(e.eventPhase== 1 && !h.do$capture || e.eventPhase == 3 && !h.do$bubble) continue; \
-var ehsn = h.ehsn; \
-if(ehsn) ehsn = "" + ehsn; else ehsn = ""; /* from int to string */ \
-h.did$run = true; alert3("fire tag " + (this.eb$seqno >= 0 ? this.eb$seqno : -1) + (ehsn.length ? " handler " + ehsn : "")); rc = h.call(this,e); alert3("endfire handler " + ehsn); \
-if(h.do$once) { alert3("once"); this.removeEventListener(e.type, h, h.do$capture); } \
-if((typeof rc == "boolean" || typeof rc == "number") && !rc) return false; \
-i = -1; \
-} return true; };');
+'this["'+evfn+'"] = function(e){ var rc, a = this["' + evarray + '"]; ' +
+'if(this["' + ev + '"] && e.eventPhase < 3) { ' +
+'alert3("fire orig tag " + (this.eb$seqno >= 0 ? this.eb$seqno : -1)); rc = this["' + ev + '"](e); alert3("endfire orig");} ' +
+'if((typeof rc == "boolean" || typeof rc == "number") && !rc) return false; ' +
+'for(var i = 0; i<a.length; ++i) a[i].did$run = false; ' +
+'for(var i = 0; i<a.length; ++i) { var h = a[i];if(h.did$run) continue; ' +
+'if(e.eventPhase== 1 && !h.do$capture || e.eventPhase == 3 && !h.do$bubble) continue; ' +
+'var ehsn = h.ehsn; ' +
+'if(ehsn) ehsn = "" + ehsn; else ehsn = ""; /* from int to string */ ' +
+'h.did$run = true; alert3("fire tag " + (this.eb$seqno >= 0 ? this.eb$seqno : -1) + (ehsn.length ? " handler " + ehsn : "")); rc = h.call(this,e); alert3("endfire handler " + ehsn); ' +
+'if(h.do$once) { alert3("once"); this.removeEventListener(e.type, h, h.do$capture); } ' +
+'if((typeof rc == "boolean" || typeof rc == "number") && !rc) return false; ' +
+'i = -1; } return true; };');
 
 this[evarray] = [];
 }
diff --git a/src/startwindow.js b/src/startwindow.js
index 6e853789..00ca1cce 100644
--- src/startwindow.js
+++ src/startwindow.js
@@ -1151,29 +1151,29 @@ var ulist = ["href", "href", "src"];
 for(var i=0; i<cnlist.length; ++i) {
 var cn = cnlist[i]; // class name
 var u = ulist[i]; // url name
-eval('Object.defineProperty(' + cn + '.prototype, "' + u + '", { \
-get: function() { return this.href$2 ? this.href$2 : ""}, \
-set: function(h) { if(h === null || h === undefined) h = ""; \
-if(h instanceof URL || h.dom$class == "URL") h = h.toString(); \
-var w = my$win(); \
-if(typeof h != "string") { alert3("hrefset " + typeof h); \
-w.hrefset$p.push("' + cn + '"); \
-w.hrefset$a.push(h); \
-return; } \
-/* h is a string version of the url. Dont know what to do if h is empty. */ \
-if(!h) return; \
-var last_href = (this.href$2 ? this.href$2.toString() : null); \
-this.setAttribute("' + u +'",h); \
-/* special code for setting frame.src, redirect to a new page. */ \
-h = this.href$2.href$val; \
-if(this.is$frame && this.eb$expf && last_href != h) { \
-/* There is a nasty corner case here, dont know if it ever happens. What if we are replacing the running frame? window.parent.src = new_url; See if we can get around it this way. */ \
-if(w == this.contentWindow) { w.location = h; return; } \
-delete this.eb$expf; \
-eb$unframe(this); /* fix links on the edbrowse side */ \
-/* I can force the opening of this new frame, but should I? */ \
-this.contentDocument; eb$unframe2(this); \
-} }});');
+eval('Object.defineProperty(' + cn + '.prototype, "' + u + '", { ' +
+'get: function() { return this.href$2 ? this.href$2 : ""}, ' +
+'set: function(h) { if(h === null || h === undefined) h = ""; ' +
+'if(h instanceof URL || h.dom$class == "URL") h = h.toString(); ' +
+'var w = my$win(); ' +
+'if(typeof h != "string") { alert3("hrefset " + typeof h); ' +
+'w.hrefset$p.push("' + cn + '"); ' +
+'w.hrefset$a.push(h); ' +
+'return; } ' +
+'/* h is a string version of the url. Dont know what to do if h is empty. */ ' +
+'if(!h) return; ' +
+'var last_href = (this.href$2 ? this.href$2.toString() : null); ' +
+'this.setAttribute("' + u +'",h); ' +
+'/* special code for setting frame.src, redirect to a new page. */ ' +
+'h = this.href$2.href$val; ' +
+'if(this.is$frame && this.eb$expf && last_href != h) { ' +
+'/* There is a nasty corner case here, dont know if it ever happens. What if we are replacing the running frame? window.parent.src = new_url; See if we can get around it this way. */ ' +
+'if(w == this.contentWindow) { w.location = h; return; } ' +
+'delete this.eb$expf; ' +
+'eb$unframe(this); /* fix links on the edbrowse side */ ' +
+'/* I can force the opening of this new frame, but should I? */ ' +
+'this.contentDocument; eb$unframe2(this); ' +
+'} }});');
 var piecelist = ["protocol", "pathname", "host", "search", "hostname", "port", "hash"];
 for(var j=0; j<piecelist.length; ++j) {
 var piece = piecelist[j];
@@ -1196,19 +1196,19 @@ var ulist = ["action", "src", "src", "href", "href", "src"];
 for(var i=0; i<cnlist.length; ++i) {
 var cn = cnlist[i]; // class name
 var u = ulist[i]; // url name
-eval('Object.defineProperty(' + cn + '.prototype, "' + u + '", { \
-get: function() { return this.href$2 ? this.href$2 : ""}, \
-set: function(h) { if(h instanceof URL || h.dom$class == "URL") h = h.toString(); \
-if(h === null || h === undefined) h = ""; \
-var w = my$win(); \
-if(typeof h != "string") { alert3("hrefset " + typeof h); \
-w.hrefset$p.push("' + cn + '"); \
-w.hrefset$a.push(h); \
-return; } \
-if(!h) return; \
-var last_href = (this.href$2 ? this.href$2 : null); \
-this.setAttribute("' + u +'",h) \
- }});');
+eval('Object.defineProperty(' + cn + '.prototype, "' + u + '", { ' +
+'get: function() { return this.href$2 ? this.href$2 : ""}, ' +
+'set: function(h) { if(h instanceof URL || h.dom$class == "URL") h = h.toString(); ' +
+'if(h === null || h === undefined) h = ""; ' +
+'var w = my$win(); ' +
+'if(typeof h != "string") { alert3("hrefset " + typeof h); ' +
+'w.hrefset$p.push("' + cn + '"); ' +
+'w.hrefset$a.push(h); ' +
+'return; } ' +
+'if(!h) return; ' +
+'var last_href = (this.href$2 ? this.href$2 : null); ' +
+'this.setAttribute("' + u +'",h) ' +
+' }});');
 }
 })();
 
