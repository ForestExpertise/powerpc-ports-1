From 22d292c22b291429731ea26ba29b61843066e7f8 Mon Sep 17 00:00:00 2001
From: Eduardo Aguilar <eduardo.aguilar@mind.be>
Date: Mon, 17 Aug 2020 17:22:51 +0200
Subject: [PATCH] ppc32: return cr condition check as it was before

Signed-off-by: Eduardo Aguilar <eduardo.aguilar@mind.be>
---
 deps/v8/src/builtins/ppc/builtins-ppc.cc            | 13 +++++++++----
 deps/v8/src/codegen/ppc/macro-assembler-ppc.cc      | 12 +++++++++---
 .../src/compiler/backend/ppc/code-generator-ppc.cc  | 13 ++++++++-----
 3 files changed, 26 insertions(+), 12 deletions(-)

diff --git a/deps/v8/src/builtins/ppc/builtins-ppc.cc b/deps/v8/src/builtins/ppc/builtins-ppc.cc
index f29f7ccc..0f4ef499 100644
--- a/deps/v8/src/builtins/ppc/builtins-ppc.cc
+++ b/deps/v8/src/builtins/ppc/builtins-ppc.cc
@@ -2807,7 +2807,7 @@ void Builtins::Generate_CEntry(MacroAssembler* masm, int result_size,
 }
 
 void Builtins::Generate_DoubleToI(MacroAssembler* masm) {
-  Label out_of_range, only_low, negate, done, fastpath_done;
+  Label out_of_range, only_low, negate, done, fastpath_done, conv_inv, conv_ok;
   Register result_reg = r3;
 
   HardAbortScope hard_abort(masm);  // Avoid calls to Abort.
@@ -2835,13 +2835,18 @@ void Builtins::Generate_DoubleToI(MacroAssembler* masm) {
   __ mtfsb0(VXCVI);
   __ ConvertDoubleToInt32NoPPC64(double_scratch, result_reg, scratch);
   __ mcrfs(cr, VXCVI);
-  __ bc(v8::internal::kInstrSize * 2, BT, crbit);
-  __ b(&fastpath_done);
+  __ bc(__ branch_offset(&conv_inv), BT, crbit);
+  __ addi(scratch, result_reg, Operand(0));
+  __ b(&conv_ok);
+  __ bind(&conv_inv);
+  __ addi(scratch, result_reg, Operand(1));
+  __ bind(&conv_ok);
+  __ cmp(scratch, result_reg, cr);
 #else
   __ ConvertDoubleToInt64(double_scratch, result_reg, d0);
   __ TestIfInt32(result_reg, r0);
-  __ beq(&fastpath_done);
 #endif
+  __ beq(&fastpath_done);
 
   __ Push(scratch_high, scratch_low);
   // Account for saved regs.
diff --git a/deps/v8/src/codegen/ppc/macro-assembler-ppc.cc b/deps/v8/src/codegen/ppc/macro-assembler-ppc.cc
index 2a213c80..0f29f544 100644
--- a/deps/v8/src/codegen/ppc/macro-assembler-ppc.cc
+++ b/deps/v8/src/codegen/ppc/macro-assembler-ppc.cc
@@ -1713,6 +1713,7 @@ void TurboAssembler::TruncateDoubleToI(Isolate* isolate, Zone* zone,
 void TurboAssembler::TryInlineTruncateDoubleToI(Register result,
                                                 DoubleRegister double_input,
                                                 Label* done) {
+ Label conv_inv, conv_ok;
 #if !V8_TARGET_ARCH_PPC64
   Register scratch = r11;
   CRegister cr = cr7;
@@ -1721,14 +1722,19 @@ void TurboAssembler::TryInlineTruncateDoubleToI(Register result,
   mtfsb0(VXCVI);
   ConvertDoubleToInt32NoPPC64(double_input, result, scratch);
   mcrfs(cr, VXCVI);
-  bc(v8::internal::kInstrSize * 2, BT, crbit);
-  b(done);
+  bc(branch_offset(&conv_inv), BT, crbit);
+  addi(scratch, result, Operand(0));
+  b(&conv_ok);
+  bind(&conv_inv);
+  addi(scratch, result, Operand(1));
+  bind(&conv_ok);
+  cmp(scratch, result, cr);
 #else
   DoubleRegister double_scratch = kScratchDoubleReg;
   ConvertDoubleToInt64(double_input, result, double_scratch);
   TestIfInt32(result, r0);
-  beq(done);
 #endif
+  b(done);
 }
 
 void TurboAssembler::CallRuntimeWithCEntry(Runtime::FunctionId fid,
diff --git a/deps/v8/src/compiler/backend/ppc/code-generator-ppc.cc b/deps/v8/src/compiler/backend/ppc/code-generator-ppc.cc
index 203feca8..a9295a6a 100644
--- a/deps/v8/src/compiler/backend/ppc/code-generator-ppc.cc
+++ b/deps/v8/src/compiler/backend/ppc/code-generator-ppc.cc
@@ -1866,7 +1866,7 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
     case kPPC_DoubleToUint32:
 #if !V8_TARGET_ARCH_PPC64
     {
-      Label exit_inv;
+      Label conv_inv, conv_ok;
       Register scratch = kScratchReg;
       CRegister cr = cr7;
       int crbit = v8::internal::Assembler::encode_crbit(
@@ -1874,10 +1874,13 @@ CodeGenerator::CodeGenResult CodeGenerator::AssembleArchInstruction(
       __ mtfsb0(VXCVI);
       __ ConvertDoubleToInt32NoPPC64(i.InputDoubleRegister(0), i.OutputRegister(), scratch);
       __ mcrfs(cr, VXCVI);
-      __ bc(__ branch_offset(&exit_inv), BT, crbit);
-      break;
-      __ bind(&exit_inv);
-      __ li(i.OutputRegister(), Operand::Zero());
+      __ bc(__ branch_offset(&conv_inv), BT, crbit);
+      __ addi(scratch, i.OutputRegister(), Operand(0));
+      __ b(&conv_ok);
+      __ bind(&conv_inv);
+      __ addi(scratch, i.OutputRegister(), Operand(1));
+      __ bind(&conv_ok);
+      __ cmp(scratch, i.OutputRegister(), cr);
       break;
     }
 #endif
-- 
2.20.1

