From e4707d03d57fb77240c6abd8d16dd5ba4c71d72a Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Sun, 4 May 2025 15:14:31 +0800
Subject: [PATCH 01/10] Revert "Cleanup Qt4 compatibility, raise Qt minimum to
 5.6.0"

This reverts commit e13bc2940e78cdab28a2562e5225202279fd220b.
---
 CMakeLists.txt   | 32 ++++++++++++++++++++++++++------
 src/common.cpp   |  6 +++++-
 src/git.cpp      |  4 ++++
 src/listview.cpp | 16 ++++++++++++++--
 src/mainimpl.cpp | 15 +++++++++++++++
 src/qgit.cpp     |  6 ++++--
 6 files changed, 68 insertions(+), 11 deletions(-)

diff --git CMakeLists.txt CMakeLists.txt
index 3153ea3..16354ff 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -17,8 +17,29 @@ set(CMAKE_INCLUDE_CURRENT_DIR ON)
 # Instruct CMake to run moc automatically when needed.
 set(CMAKE_AUTOMOC ON)
 
-set(QT_MIN_VERSION 5.11.0)
-find_package(Qt5 ${QT_MIN_VERSION} REQUIRED COMPONENTS Core Gui Widgets)
+option(UseQt5 "Use Qt5?" ON)
+ if (UseQt5)
+   set(QT_MIN_VERSION 5.11.0)
+   find_package(Qt5 ${QT_MIN_VERSION} REQUIRED COMPONENTS Core Gui Widgets)
+   set(QT_LIBRARIES Qt5::Widgets)
+
+   macro(qt_wrap_ui)
+     qt5_wrap_ui(${ARGN})
+   endmacro()
+   macro(qt_add_resources)
+     qt5_add_resources(${ARGN})
+   endmacro()
+ else()
+   find_package(Qt4 REQUIRED COMPONENTS QtCore QtGui)
+   include(${QT_USE_FILE})
+
+   macro(qt_wrap_ui)
+     qt4_wrap_ui(${ARGN})
+   endmacro()
+   macro(qt_add_resources)
+     qt4_add_resources(${ARGN})
+   endmacro()
+ endif()
 
 include_directories(
     ${CMAKE_SOURCE_DIR}/src
@@ -57,7 +78,7 @@ set(CPP_SOURCES
 )
 
 # UIS_HDRS will be used later in add_executable
-qt5_wrap_ui(UIS_HDRS
+qt_wrap_ui(UIS_HDRS
     src/commit.ui
     src/console.ui
     src/customaction.ui
@@ -77,11 +98,10 @@ set(RESOURCE_FILES
 
 # this command will generate rules that will run rcc on all files from SAMPLE_RCS
 # in result SAMPLE_RC_SRCS variable will contain paths to files produced by rcc
-qt5_add_resources(RC_SRCS ${RESOURCE_FILES})
+qt_add_resources(RC_SRCS ${RESOURCE_FILES})
 
 add_executable(qgit ${CPP_SOURCES} ${UIS_HDRS} ${RC_SRCS})
-target_link_libraries(qgit Qt5::Widgets)
-
+target_link_libraries(qgit ${QT_LIBRARIES})
 
 install(TARGETS qgit DESTINATION bin)
 
diff --git src/common.cpp src/common.cpp
index a13fc2a..b579462 100644
--- src/common.cpp
+++ src/common.cpp
@@ -265,5 +265,9 @@ RevFile& RevFile::operator<<(QDataStream& stream) {
 }
 
 QString qt4and5escaping(QString toescape) {
-    return toescape.toHtmlEscaped();
+#if QT_VERSION >= 0x050000
+	return toescape.toHtmlEscaped();
+#else
+	return Qt::escape(toescape);
+#endif
 }
diff --git src/git.cpp src/git.cpp
index a1d2723..47c24e4 100644
--- src/git.cpp
+++ src/git.cpp
@@ -1951,8 +1951,12 @@ Rev* Git::fakeRevData(SCRef sha, SCList parents, SCRef author, SCRef date, SCRef
         if (!patch.isEmpty())
                 data.append('\n' + patch);
 
+#if QT_VERSION >= 0x050000
         QTextCodec* tc = QTextCodec::codecForLocale();
         QByteArray* ba = new QByteArray(tc->fromUnicode(data));
+#else
+        QByteArray* ba = new QByteArray(data.toLatin1());
+#endif
         ba->append('\0');
 
         fh->rowData.append(ba);
diff --git src/listview.cpp src/listview.cpp
index e42bc5e..b4ba080 100644
--- src/listview.cpp
+++ src/listview.cpp
@@ -95,9 +95,15 @@ void ListView::setupGeometry() {
 
 	QHeaderView* hv = header();
 	hv->setStretchLastSection(true);
+#if QT_VERSION >= 0x050000
 	hv->setSectionResizeMode(LOG_COL, QHeaderView::Interactive);
 	hv->setSectionResizeMode(TIME_COL, QHeaderView::Interactive);
 	hv->setSectionResizeMode(ANN_ID_COL, QHeaderView::ResizeToContents);
+#else
+	hv->setResizeMode(LOG_COL, QHeaderView::Interactive);
+	hv->setResizeMode(TIME_COL, QHeaderView::Interactive);
+	hv->setResizeMode(ANN_ID_COL, QHeaderView::ResizeToContents);
+#endif
 	hv->resizeSection(GRAPH_COL, DEF_GRAPH_COL_WIDTH);
 	hv->resizeSection(LOG_COL, DEF_LOG_COL_WIDTH);
 	hv->resizeSection(HASH_COL, DEF_HASH_COL_WIDTH);
@@ -1169,7 +1175,11 @@ QString ListView::refNameAt(const QPoint &pos)
  * Return the device pixel ratio
  */
 qreal ListViewDelegate::dpr(void) const {
-	return qApp->devicePixelRatio();
+#if QT_VERSION >= QT_VERSION_CHECK(5,6,0)
+    return qApp->devicePixelRatio();
+#else
+    return 1.0;
+#endif
 }
 
 void ListViewDelegate::addTextPixmap(QPixmap** pp, SCRef txt, const QStyleOptionViewItem& opt) const {
@@ -1189,7 +1199,9 @@ void ListViewDelegate::addTextPixmap(QPixmap** pp, SCRef txt, const QStyleOption
 			 static_cast<int>(text_height * dpr()));
 
 	QPixmap* newPm = new QPixmap(pixmapSize);
-	newPm->setDevicePixelRatio(dpr());
+#if QT_VERSION >= QT_VERSION_CHECK(5,6,0)
+    newPm->setDevicePixelRatio(dpr());
+#endif
 
 	QPainter p;
 	p.begin(newPm);
diff --git src/mainimpl.cpp src/mainimpl.cpp
index eca2f82..1ca655f 100644
--- src/mainimpl.cpp
+++ src/mainimpl.cpp
@@ -83,14 +83,25 @@ MainImpl::MainImpl(SCRef cd, QWidget* p) : QMainWindow(p) {
 	QSettings settings;
 	QString font(settings.value(STD_FNT_KEY).toString());
 	if (font.isEmpty()) {
+#if (QT_VERSION >= QT_VERSION_CHECK(5,2,0))
 		font = QFontDatabase::systemFont(QFontDatabase::GeneralFont).toString();
+#else
+		font = QApplication::font().toString();
+#endif
 	}
 	QGit::STD_FONT.fromString(font);
 
 	// set-up typewriter (fixed width) font
 	font = settings.value(TYPWRT_FNT_KEY).toString();
 	if (font.isEmpty()) { // choose a sensible default
+#if (QT_VERSION >= QT_VERSION_CHECK(5,2,0))
 		QFont fnt = QFontDatabase::systemFont(QFontDatabase::FixedFont);
+#else
+		QFont fnt = QApplication::font();
+		fnt.setStyleHint(QFont::TypeWriter, QFont::PreferDefault);
+		fnt.setFixedPitch(true);
+		fnt.setFamily(fnt.defaultFamily()); // the family corresponding
+#endif
 		font = fnt.toString();              // to current style hint
 	}
 	QGit::TYPE_WRITER_FONT.fromString(font);
@@ -1143,7 +1154,11 @@ void MainImpl::shortCutActivated() {
 	QShortcut* se = dynamic_cast<QShortcut*>(sender());
 
 	if (se) {
+#if QT_VERSION >= 0x050000
 		const QKeySequence& key = se->key();
+#else
+		const int key = se->key();
+#endif
 
 		if (key == Qt::Key_I) {
 			rv->tab()->listViewLog->on_keyUp();
diff --git src/qgit.cpp src/qgit.cpp
index 26c8d59..fa256ac 100644
--- src/qgit.cpp
+++ src/qgit.cpp
@@ -21,8 +21,10 @@ using namespace QGit;
 int main(int argc, char* argv[]) {
 
 	QApplication app(argc, argv);
-	app.setAttribute(Qt::AA_UseHighDpiPixmaps, true);
-	QCoreApplication::setOrganizationName(ORG_KEY);
+#if QT_VERSION >= QT_VERSION_CHECK(5,6,0)
+    app.setAttribute(Qt::AA_UseHighDpiPixmaps, true);
+#endif
+    QCoreApplication::setOrganizationName(ORG_KEY);
 	QCoreApplication::setApplicationName(APP_KEY);
 
 	QCommandLineParser parser;
-- 
2.49.0

