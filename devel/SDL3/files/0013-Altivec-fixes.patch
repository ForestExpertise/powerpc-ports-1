From 41f4aa8cd66ccb8acec639f637cd0d388676b0d4 Mon Sep 17 00:00:00 2001
From: Ozkan Sezer <sezeroz@gmail.com>
Date: Mon, 7 Apr 2025 20:43:00 +0300
Subject: [PATCH] rename local vars 'pixel' to 'pixelvalue'

Reference issue: https://github.com/libsdl-org/SDL/issues/12749.
---
 src/render/software/SDL_triangle.c |   6 +-
 src/video/SDL_blit_0.c             |  12 +-
 src/video/SDL_blit_1.c             |   8 +-
 src/video/SDL_blit_auto.c          | 664 ++++++++++++++---------------
 src/video/SDL_blit_slow.c          |  46 +-
 src/video/SDL_bmp.c                |  12 +-
 src/video/SDL_pixels.c             |   6 +-
 7 files changed, 377 insertions(+), 377 deletions(-)

diff --git a/src/render/software/SDL_triangle.c b/src/render/software/SDL_triangle.c
index 3023006eb600c..2a4d150b884e2 100644
--- src/render/software/SDL_triangle.c
+++ src/render/software/SDL_triangle.c
@@ -945,9 +945,9 @@ static void SDL_BlitTriangle_Slow(SDL_BlitInfo *info,
             ASSEMBLE_RGB(dst, dstbpp, dst_fmt, dstR, dstG, dstB);
         } else {
             // SDL_PIXELFORMAT_ARGB2101010
-            Uint32 pixel;
-            ARGB2101010_FROM_RGBA(pixel, dstR, dstG, dstB, dstA);
-            *(Uint32 *)dst = pixel;
+            Uint32 pixelvalue;
+            ARGB2101010_FROM_RGBA(pixelvalue, dstR, dstG, dstB, dstA);
+            *(Uint32 *)dst = pixelvalue;
         }
     }
     TRIANGLE_END_LOOP
diff --git a/src/video/SDL_blit_0.c b/src/video/SDL_blit_0.c
index 0d05bddfb1a32..c5070efea4fd9 100644
--- src/video/SDL_blit_0.c
+++ src/video/SDL_blit_0.c
@@ -617,7 +617,7 @@ static void BlitBtoNAlpha(SDL_BlitInfo *info)
     const SDL_PixelFormatDetails *dstfmt = info->dst_fmt;
     int srcbpp, dstbpp;
     int c;
-    Uint32 pixel, mask, align;
+    Uint32 pixelvalue, mask, align;
     unsigned sR, sG, sB;
     unsigned dR, dG, dB, dA;
     const unsigned A = info->a;
@@ -646,7 +646,7 @@ static void BlitBtoNAlpha(SDL_BlitInfo *info)
                     sR = srcpal[bit].r;
                     sG = srcpal[bit].g;
                     sB = srcpal[bit].b;
-                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixel, dR, dG, dB, dA);
+                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixelvalue, dR, dG, dB, dA);
                     ALPHA_BLEND_RGBA(sR, sG, sB, A, dR, dG, dB, dA);
                     ASSEMBLE_RGBA(dst, dstbpp, dstfmt, dR, dG, dB, dA);
                 }
@@ -668,7 +668,7 @@ static void BlitBtoNAlpha(SDL_BlitInfo *info)
                     sR = srcpal[bit].r;
                     sG = srcpal[bit].g;
                     sB = srcpal[bit].b;
-                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixel, dR, dG, dB, dA);
+                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixelvalue, dR, dG, dB, dA);
                     ALPHA_BLEND_RGBA(sR, sG, sB, A, dR, dG, dB, dA);
                     ASSEMBLE_RGBA(dst, dstbpp, dstfmt, dR, dG, dB, dA);
                 }
@@ -694,7 +694,7 @@ static void BlitBtoNAlphaKey(SDL_BlitInfo *info)
     const SDL_Color *srcpal = info->src_pal->colors;
     int srcbpp, dstbpp;
     int c;
-    Uint32 pixel, mask, align;
+    Uint32 pixelvalue, mask, align;
     unsigned sR, sG, sB;
     unsigned dR, dG, dB, dA;
     const unsigned A = info->a;
@@ -724,7 +724,7 @@ static void BlitBtoNAlphaKey(SDL_BlitInfo *info)
                     sR = srcpal[bit].r;
                     sG = srcpal[bit].g;
                     sB = srcpal[bit].b;
-                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixel, dR, dG, dB, dA);
+                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixelvalue, dR, dG, dB, dA);
                     ALPHA_BLEND_RGBA(sR, sG, sB, A, dR, dG, dB, dA);
                     ASSEMBLE_RGBA(dst, dstbpp, dstfmt, dR, dG, dB, dA);
                 }
@@ -746,7 +746,7 @@ static void BlitBtoNAlphaKey(SDL_BlitInfo *info)
                     sR = srcpal[bit].r;
                     sG = srcpal[bit].g;
                     sB = srcpal[bit].b;
-                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixel, dR, dG, dB, dA);
+                    DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixelvalue, dR, dG, dB, dA);
                     ALPHA_BLEND_RGBA(sR, sG, sB, A, dR, dG, dB, dA);
                     ASSEMBLE_RGBA(dst, dstbpp, dstfmt, dR, dG, dB, dA);
                 }
diff --git a/src/video/SDL_blit_1.c b/src/video/SDL_blit_1.c
index e08561028970f..dda2e35843ed7 100644
--- src/video/SDL_blit_1.c
+++ src/video/SDL_blit_1.c
@@ -434,7 +434,7 @@ static void Blit1toNAlpha(SDL_BlitInfo *info)
     const SDL_PixelFormatDetails *dstfmt = info->dst_fmt;
     const SDL_Color *srcpal = info->src_pal->colors;
     int dstbpp;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     unsigned sR, sG, sB, sA;
     unsigned dR, dG, dB, dA;
     const unsigned A = info->a;
@@ -450,7 +450,7 @@ static void Blit1toNAlpha(SDL_BlitInfo *info)
             sG = srcpal[*src].g;
             sB = srcpal[*src].b;
             sA = (srcpal[*src].a * A) / 255;
-            DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixel, dR, dG, dB, dA);
+            DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixelvalue, dR, dG, dB, dA);
             ALPHA_BLEND_RGBA(sR, sG, sB, sA, dR, dG, dB, dA);
             ASSEMBLE_RGBA(dst, dstbpp, dstfmt, dR, dG, dB, dA);
             src++;
@@ -475,7 +475,7 @@ static void Blit1toNAlphaKey(SDL_BlitInfo *info)
     const SDL_Color *srcpal = info->src_pal->colors;
     Uint32 ckey = info->colorkey;
     int dstbpp;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     unsigned sR, sG, sB, sA;
     unsigned dR, dG, dB, dA;
     const unsigned A = info->a;
@@ -492,7 +492,7 @@ static void Blit1toNAlphaKey(SDL_BlitInfo *info)
                 sG = srcpal[*src].g;
                 sB = srcpal[*src].b;
                 sA = (srcpal[*src].a * A) / 255;
-                DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixel, dR, dG, dB, dA);
+                DISEMBLE_RGBA(dst, dstbpp, dstfmt, pixelvalue, dR, dG, dB, dA);
                 ALPHA_BLEND_RGBA(sR, sG, sB, sA, dR, dG, dB, dA);
                 ASSEMBLE_RGBA(dst, dstbpp, dstfmt, dR, dG, dB, dA);
             }
diff --git a/src/video/SDL_blit_auto.c b/src/video/SDL_blit_auto.c
index d9bf67335ff84..27cd9c714eef4 100644
--- src/video/SDL_blit_auto.c
+++ src/video/SDL_blit_auto.c
@@ -185,7 +185,7 @@ static void SDL_Blit_XRGB8888_XRGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -193,15 +193,15 @@ static void SDL_Blit_XRGB8888_XRGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -216,7 +216,7 @@ static void SDL_Blit_XRGB8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -236,15 +236,15 @@ static void SDL_Blit_XRGB8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -449,7 +449,7 @@ static void SDL_Blit_XRGB8888_XRGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_XRGB8888_XBGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -469,10 +469,10 @@ static void SDL_Blit_XRGB8888_XBGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -609,7 +609,7 @@ static void SDL_Blit_XRGB8888_XBGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -617,15 +617,15 @@ static void SDL_Blit_XRGB8888_XBGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -640,7 +640,7 @@ static void SDL_Blit_XRGB8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -660,15 +660,15 @@ static void SDL_Blit_XRGB8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -873,7 +873,7 @@ static void SDL_Blit_XRGB8888_XBGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_XRGB8888_ARGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = 0xFF;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -893,9 +893,9 @@ static void SDL_Blit_XRGB8888_ARGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel |= (A << 24);
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue |= (A << 24);
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -1037,7 +1037,7 @@ static void SDL_Blit_XRGB8888_ARGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
 
@@ -1046,15 +1046,15 @@ static void SDL_Blit_XRGB8888_ARGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -1070,7 +1070,7 @@ static void SDL_Blit_XRGB8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
@@ -1091,15 +1091,15 @@ static void SDL_Blit_XRGB8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -1314,7 +1314,7 @@ static void SDL_Blit_XRGB8888_ARGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_XRGB8888_ABGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = 0xFF;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
@@ -1335,10 +1335,10 @@ static void SDL_Blit_XRGB8888_ABGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -1480,7 +1480,7 @@ static void SDL_Blit_XRGB8888_ABGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
 
@@ -1489,15 +1489,15 @@ static void SDL_Blit_XRGB8888_ABGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -1513,7 +1513,7 @@ static void SDL_Blit_XRGB8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
@@ -1534,15 +1534,15 @@ static void SDL_Blit_XRGB8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -1757,7 +1757,7 @@ static void SDL_Blit_XRGB8888_ABGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_XBGR8888_XRGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -1777,10 +1777,10 @@ static void SDL_Blit_XBGR8888_XRGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -1917,7 +1917,7 @@ static void SDL_Blit_XBGR8888_XRGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -1925,15 +1925,15 @@ static void SDL_Blit_XBGR8888_XRGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -1948,7 +1948,7 @@ static void SDL_Blit_XBGR8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -1968,15 +1968,15 @@ static void SDL_Blit_XBGR8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -2336,7 +2336,7 @@ static void SDL_Blit_XBGR8888_XBGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -2344,15 +2344,15 @@ static void SDL_Blit_XBGR8888_XBGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -2367,7 +2367,7 @@ static void SDL_Blit_XBGR8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -2387,15 +2387,15 @@ static void SDL_Blit_XBGR8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -2600,7 +2600,7 @@ static void SDL_Blit_XBGR8888_XBGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_XBGR8888_ARGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = 0xFF;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
@@ -2621,10 +2621,10 @@ static void SDL_Blit_XBGR8888_ARGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -2766,7 +2766,7 @@ static void SDL_Blit_XBGR8888_ARGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
 
@@ -2775,15 +2775,15 @@ static void SDL_Blit_XBGR8888_ARGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -2799,7 +2799,7 @@ static void SDL_Blit_XBGR8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
@@ -2820,15 +2820,15 @@ static void SDL_Blit_XBGR8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -3043,7 +3043,7 @@ static void SDL_Blit_XBGR8888_ARGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_XBGR8888_ABGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = 0xFF;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -3063,9 +3063,9 @@ static void SDL_Blit_XBGR8888_ABGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel |= (A << 24);
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue |= (A << 24);
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -3207,7 +3207,7 @@ static void SDL_Blit_XBGR8888_ABGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
 
@@ -3216,15 +3216,15 @@ static void SDL_Blit_XBGR8888_ABGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -3240,7 +3240,7 @@ static void SDL_Blit_XBGR8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     const Uint32 A = (flags & SDL_COPY_MODULATE_ALPHA) ? modulateA : 0xFF;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
@@ -3261,15 +3261,15 @@ static void SDL_Blit_XBGR8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -3484,7 +3484,7 @@ static void SDL_Blit_XBGR8888_ABGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_ARGB8888_XRGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
     Uint64 incy, incx;
@@ -3503,9 +3503,9 @@ static void SDL_Blit_ARGB8888_XRGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel &= 0xFFFFFF;
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue &= 0xFFFFFF;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -3694,7 +3694,7 @@ static void SDL_Blit_ARGB8888_XRGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -3702,15 +3702,15 @@ static void SDL_Blit_ARGB8888_XRGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -3725,7 +3725,7 @@ static void SDL_Blit_ARGB8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -3745,15 +3745,15 @@ static void SDL_Blit_ARGB8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -3962,7 +3962,7 @@ static void SDL_Blit_ARGB8888_XRGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_ARGB8888_XBGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -3982,10 +3982,10 @@ static void SDL_Blit_ARGB8888_XBGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -4174,7 +4174,7 @@ static void SDL_Blit_ARGB8888_XBGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -4182,15 +4182,15 @@ static void SDL_Blit_ARGB8888_XBGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -4205,7 +4205,7 @@ static void SDL_Blit_ARGB8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -4225,15 +4225,15 @@ static void SDL_Blit_ARGB8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -4660,7 +4660,7 @@ static void SDL_Blit_ARGB8888_ARGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -4668,8 +4668,8 @@ static void SDL_Blit_ARGB8888_ARGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -4678,8 +4678,8 @@ static void SDL_Blit_ARGB8888_ARGB8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -4695,7 +4695,7 @@ static void SDL_Blit_ARGB8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -4715,8 +4715,8 @@ static void SDL_Blit_ARGB8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -4725,8 +4725,8 @@ static void SDL_Blit_ARGB8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -4945,7 +4945,7 @@ static void SDL_Blit_ARGB8888_ARGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_ARGB8888_ABGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -4965,10 +4965,10 @@ static void SDL_Blit_ARGB8888_ABGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel; A = (Uint8)(pixel >> 24);
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -5168,7 +5168,7 @@ static void SDL_Blit_ARGB8888_ABGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -5176,8 +5176,8 @@ static void SDL_Blit_ARGB8888_ABGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -5186,8 +5186,8 @@ static void SDL_Blit_ARGB8888_ABGR8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -5203,7 +5203,7 @@ static void SDL_Blit_ARGB8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -5223,8 +5223,8 @@ static void SDL_Blit_ARGB8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); B = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); B = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -5233,8 +5233,8 @@ static void SDL_Blit_ARGB8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -5453,7 +5453,7 @@ static void SDL_Blit_ARGB8888_ABGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_RGBA8888_XRGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
     Uint64 incy, incx;
@@ -5472,9 +5472,9 @@ static void SDL_Blit_RGBA8888_XRGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel >>= 8;
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue >>= 8;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -5663,7 +5663,7 @@ static void SDL_Blit_RGBA8888_XRGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -5671,15 +5671,15 @@ static void SDL_Blit_RGBA8888_XRGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -5694,7 +5694,7 @@ static void SDL_Blit_RGBA8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -5714,15 +5714,15 @@ static void SDL_Blit_RGBA8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -5931,7 +5931,7 @@ static void SDL_Blit_RGBA8888_XRGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_RGBA8888_XBGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -5951,10 +5951,10 @@ static void SDL_Blit_RGBA8888_XBGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8);
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8);
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -6143,7 +6143,7 @@ static void SDL_Blit_RGBA8888_XBGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -6151,15 +6151,15 @@ static void SDL_Blit_RGBA8888_XBGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -6174,7 +6174,7 @@ static void SDL_Blit_RGBA8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -6194,15 +6194,15 @@ static void SDL_Blit_RGBA8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -6411,7 +6411,7 @@ static void SDL_Blit_RGBA8888_XBGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_RGBA8888_ARGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
     Uint64 incy, incx;
@@ -6430,9 +6430,9 @@ static void SDL_Blit_RGBA8888_ARGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel = (pixel >> 8) | (pixel << 24);
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue = (pixelvalue >> 8) | (pixelvalue << 24);
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -6632,7 +6632,7 @@ static void SDL_Blit_RGBA8888_ARGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -6640,8 +6640,8 @@ static void SDL_Blit_RGBA8888_ARGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -6650,8 +6650,8 @@ static void SDL_Blit_RGBA8888_ARGB8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -6667,7 +6667,7 @@ static void SDL_Blit_RGBA8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -6687,8 +6687,8 @@ static void SDL_Blit_RGBA8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -6697,8 +6697,8 @@ static void SDL_Blit_RGBA8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -6917,7 +6917,7 @@ static void SDL_Blit_RGBA8888_ARGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_RGBA8888_ABGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -6937,10 +6937,10 @@ static void SDL_Blit_RGBA8888_ABGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8); A = (Uint8)pixel;
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -7140,7 +7140,7 @@ static void SDL_Blit_RGBA8888_ABGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -7148,8 +7148,8 @@ static void SDL_Blit_RGBA8888_ABGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -7158,8 +7158,8 @@ static void SDL_Blit_RGBA8888_ABGR8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -7175,7 +7175,7 @@ static void SDL_Blit_RGBA8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -7195,8 +7195,8 @@ static void SDL_Blit_RGBA8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            R = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); B = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            R = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); B = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -7205,8 +7205,8 @@ static void SDL_Blit_RGBA8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -7425,7 +7425,7 @@ static void SDL_Blit_RGBA8888_ABGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_ABGR8888_XRGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -7445,10 +7445,10 @@ static void SDL_Blit_ABGR8888_XRGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -7637,7 +7637,7 @@ static void SDL_Blit_ABGR8888_XRGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -7645,15 +7645,15 @@ static void SDL_Blit_ABGR8888_XRGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -7668,7 +7668,7 @@ static void SDL_Blit_ABGR8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -7688,15 +7688,15 @@ static void SDL_Blit_ABGR8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -7905,7 +7905,7 @@ static void SDL_Blit_ABGR8888_XRGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_ABGR8888_XBGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
     Uint64 incy, incx;
@@ -7924,9 +7924,9 @@ static void SDL_Blit_ABGR8888_XBGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel &= 0xFFFFFF;
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue &= 0xFFFFFF;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -8115,7 +8115,7 @@ static void SDL_Blit_ABGR8888_XBGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -8123,15 +8123,15 @@ static void SDL_Blit_ABGR8888_XBGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -8146,7 +8146,7 @@ static void SDL_Blit_ABGR8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -8166,15 +8166,15 @@ static void SDL_Blit_ABGR8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -8383,7 +8383,7 @@ static void SDL_Blit_ABGR8888_XBGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_ABGR8888_ARGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -8403,10 +8403,10 @@ static void SDL_Blit_ABGR8888_ARGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel; A = (Uint8)(pixel >> 24);
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -8606,7 +8606,7 @@ static void SDL_Blit_ABGR8888_ARGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -8614,8 +8614,8 @@ static void SDL_Blit_ABGR8888_ARGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -8624,8 +8624,8 @@ static void SDL_Blit_ABGR8888_ARGB8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -8641,7 +8641,7 @@ static void SDL_Blit_ABGR8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -8661,8 +8661,8 @@ static void SDL_Blit_ABGR8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -8671,8 +8671,8 @@ static void SDL_Blit_ABGR8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -9109,7 +9109,7 @@ static void SDL_Blit_ABGR8888_ABGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -9117,8 +9117,8 @@ static void SDL_Blit_ABGR8888_ABGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -9127,8 +9127,8 @@ static void SDL_Blit_ABGR8888_ABGR8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -9144,7 +9144,7 @@ static void SDL_Blit_ABGR8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -9164,8 +9164,8 @@ static void SDL_Blit_ABGR8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 16); G = (Uint8)(pixel >> 8); R = (Uint8)pixel; A = (Uint8)(pixel >> 24);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 16); G = (Uint8)(pixelvalue >> 8); R = (Uint8)pixelvalue; A = (Uint8)(pixelvalue >> 24);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -9174,8 +9174,8 @@ static void SDL_Blit_ABGR8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -9394,7 +9394,7 @@ static void SDL_Blit_ABGR8888_ABGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_BGRA8888_XRGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -9414,10 +9414,10 @@ static void SDL_Blit_BGRA8888_XRGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8);
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8);
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -9606,7 +9606,7 @@ static void SDL_Blit_BGRA8888_XRGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -9614,15 +9614,15 @@ static void SDL_Blit_BGRA8888_XRGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -9637,7 +9637,7 @@ static void SDL_Blit_BGRA8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -9657,15 +9657,15 @@ static void SDL_Blit_BGRA8888_XRGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -9874,7 +9874,7 @@ static void SDL_Blit_BGRA8888_XRGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_BGRA8888_XBGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
     Uint64 incy, incx;
@@ -9893,9 +9893,9 @@ static void SDL_Blit_BGRA8888_XBGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel >>= 8;
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue >>= 8;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -10084,7 +10084,7 @@ static void SDL_Blit_BGRA8888_XBGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
 
     while (info->dst_h--) {
@@ -10092,15 +10092,15 @@ static void SDL_Blit_BGRA8888_XBGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -10115,7 +10115,7 @@ static void SDL_Blit_BGRA8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateR = info->r;
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -10135,15 +10135,15 @@ static void SDL_Blit_BGRA8888_XBGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8);
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8);
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
                 MULT_DIV_255(B, modulateB, B);
             }
-            pixel = (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -10352,7 +10352,7 @@ static void SDL_Blit_BGRA8888_XBGR8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_BGRA8888_ARGB8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -10372,10 +10372,10 @@ static void SDL_Blit_BGRA8888_ARGB8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8); A = (Uint8)pixel;
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -10575,7 +10575,7 @@ static void SDL_Blit_BGRA8888_ARGB8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -10583,8 +10583,8 @@ static void SDL_Blit_BGRA8888_ARGB8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -10593,8 +10593,8 @@ static void SDL_Blit_BGRA8888_ARGB8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -10610,7 +10610,7 @@ static void SDL_Blit_BGRA8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -10630,8 +10630,8 @@ static void SDL_Blit_BGRA8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -10640,8 +10640,8 @@ static void SDL_Blit_BGRA8888_ARGB8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (R << 16) | (G << 8) | B;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (R << 16) | (G << 8) | B;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -10860,7 +10860,7 @@ static void SDL_Blit_BGRA8888_ARGB8888_Modulate_Blend_Scale(SDL_BlitInfo *info)
 
 static void SDL_Blit_BGRA8888_ABGR8888_Scale(SDL_BlitInfo *info)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
     Uint64 incy, incx;
@@ -10879,9 +10879,9 @@ static void SDL_Blit_BGRA8888_ABGR8888_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            pixel = (pixel >> 8) | (pixel << 24);
-            *dst = pixel;
+            pixelvalue = *src;
+            pixelvalue = (pixelvalue >> 8) | (pixelvalue << 24);
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
@@ -11081,7 +11081,7 @@ static void SDL_Blit_BGRA8888_ABGR8888_Modulate(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
 
     while (info->dst_h--) {
@@ -11089,8 +11089,8 @@ static void SDL_Blit_BGRA8888_ABGR8888_Modulate(SDL_BlitInfo *info)
         Uint32 *dst = (Uint32 *)info->dst;
         int n = info->dst_w;
         while (n--) {
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -11099,8 +11099,8 @@ static void SDL_Blit_BGRA8888_ABGR8888_Modulate(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             ++src;
             ++dst;
         }
@@ -11116,7 +11116,7 @@ static void SDL_Blit_BGRA8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
     const Uint32 modulateG = info->g;
     const Uint32 modulateB = info->b;
     const Uint32 modulateA = info->a;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     Uint64 srcy, srcx;
     Uint64 posy, posx;
@@ -11136,8 +11136,8 @@ static void SDL_Blit_BGRA8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
         while (n--) {
             srcx = posx >> 16;
             src = (Uint32 *)(info->src + (srcy * info->src_pitch) + (srcx * 4));
-            pixel = *src;
-            B = (Uint8)(pixel >> 24); G = (Uint8)(pixel >> 16); R = (Uint8)(pixel >> 8); A = (Uint8)pixel;
+            pixelvalue = *src;
+            B = (Uint8)(pixelvalue >> 24); G = (Uint8)(pixelvalue >> 16); R = (Uint8)(pixelvalue >> 8); A = (Uint8)pixelvalue;
             if (flags & SDL_COPY_MODULATE_COLOR) {
                 MULT_DIV_255(R, modulateR, R);
                 MULT_DIV_255(G, modulateG, G);
@@ -11146,8 +11146,8 @@ static void SDL_Blit_BGRA8888_ABGR8888_Modulate_Scale(SDL_BlitInfo *info)
             if (flags & SDL_COPY_MODULATE_ALPHA) {
                 MULT_DIV_255(A, modulateA, A);
             }
-            pixel = (A << 24) | (B << 16) | (G << 8) | R;
-            *dst = pixel;
+            pixelvalue = (A << 24) | (B << 16) | (G << 8) | R;
+            *dst = pixelvalue;
             posx += incx;
             ++dst;
         }
diff --git a/src/video/SDL_blit_slow.c b/src/video/SDL_blit_slow.c
index d0dd4cf3271d8..d9b01f01d9daa 100644
--- src/video/SDL_blit_slow.c
+++ src/video/SDL_blit_slow.c
@@ -296,25 +296,25 @@ void SDL_Blit_Slow(SDL_BlitInfo *info)
                 break;
             case SlowBlitPixelAccess_10Bit:
             {
-                Uint32 pixel;
+                Uint32 pixelvalue;
                 switch (dst_fmt->format) {
                 case SDL_PIXELFORMAT_XRGB2101010:
                     dstA = 0xFF;
                     SDL_FALLTHROUGH;
                 case SDL_PIXELFORMAT_ARGB2101010:
-                    ARGB2101010_FROM_RGBA(pixel, dstR, dstG, dstB, dstA);
+                    ARGB2101010_FROM_RGBA(pixelvalue, dstR, dstG, dstB, dstA);
                     break;
                 case SDL_PIXELFORMAT_XBGR2101010:
                     dstA = 0xFF;
                     SDL_FALLTHROUGH;
                 case SDL_PIXELFORMAT_ABGR2101010:
-                    ABGR2101010_FROM_RGBA(pixel, dstR, dstG, dstB, dstA);
+                    ABGR2101010_FROM_RGBA(pixelvalue, dstR, dstG, dstB, dstA);
                     break;
                 default:
-                    pixel = 0;
+                    pixelvalue = 0;
                     break;
                 }
-                *(Uint32 *)dst = pixel;
+                *(Uint32 *)dst = pixelvalue;
                 break;
             }
             case SlowBlitPixelAccess_Large:
@@ -424,49 +424,49 @@ static Uint16 float_to_half(float a)
 static void ReadFloatPixel(Uint8 *pixels, SlowBlitPixelAccess access, const SDL_PixelFormatDetails *fmt, const SDL_Palette *pal, SDL_Colorspace colorspace, float SDR_white_point,
                            float *outR, float *outG, float *outB, float *outA)
 {
-    Uint32 pixel;
+    Uint32 pixelvalue;
     Uint32 R, G, B, A;
     float fR = 0.0f, fG = 0.0f, fB = 0.0f, fA = 0.0f;
     float v[4];
 
     switch (access) {
     case SlowBlitPixelAccess_Index8:
-        pixel = *pixels;
-        fR = (float)pal->colors[pixel].r / 255.0f;
-        fG = (float)pal->colors[pixel].g / 255.0f;
-        fB = (float)pal->colors[pixel].b / 255.0f;
-        fA = (float)pal->colors[pixel].a / 255.0f;
+        pixelvalue = *pixels;
+        fR = (float)pal->colors[pixelvalue].r / 255.0f;
+        fG = (float)pal->colors[pixelvalue].g / 255.0f;
+        fB = (float)pal->colors[pixelvalue].b / 255.0f;
+        fA = (float)pal->colors[pixelvalue].a / 255.0f;
         break;
     case SlowBlitPixelAccess_RGB:
-        DISEMBLE_RGB(pixels, fmt->bytes_per_pixel, fmt, pixel, R, G, B);
+        DISEMBLE_RGB(pixels, fmt->bytes_per_pixel, fmt, pixelvalue, R, G, B);
         fR = (float)R / 255.0f;
         fG = (float)G / 255.0f;
         fB = (float)B / 255.0f;
         fA = 1.0f;
         break;
     case SlowBlitPixelAccess_RGBA:
-        DISEMBLE_RGBA(pixels, fmt->bytes_per_pixel, fmt, pixel, R, G, B, A);
+        DISEMBLE_RGBA(pixels, fmt->bytes_per_pixel, fmt, pixelvalue, R, G, B, A);
         fR = (float)R / 255.0f;
         fG = (float)G / 255.0f;
         fB = (float)B / 255.0f;
         fA = (float)A / 255.0f;
         break;
     case SlowBlitPixelAccess_10Bit:
-        pixel = *((Uint32 *)pixels);
+        pixelvalue = *((Uint32 *)pixels);
         switch (fmt->format) {
         case SDL_PIXELFORMAT_XRGB2101010:
-            RGBAFLOAT_FROM_ARGB2101010(pixel, fR, fG, fB, fA);
+            RGBAFLOAT_FROM_ARGB2101010(pixelvalue, fR, fG, fB, fA);
             fA = 1.0f;
             break;
         case SDL_PIXELFORMAT_XBGR2101010:
-            RGBAFLOAT_FROM_ABGR2101010(pixel, fR, fG, fB, fA);
+            RGBAFLOAT_FROM_ABGR2101010(pixelvalue, fR, fG, fB, fA);
             fA = 1.0f;
             break;
         case SDL_PIXELFORMAT_ARGB2101010:
-            RGBAFLOAT_FROM_ARGB2101010(pixel, fR, fG, fB, fA);
+            RGBAFLOAT_FROM_ARGB2101010(pixelvalue, fR, fG, fB, fA);
             break;
         case SDL_PIXELFORMAT_ABGR2101010:
-            RGBAFLOAT_FROM_ABGR2101010(pixel, fR, fG, fB, fA);
+            RGBAFLOAT_FROM_ABGR2101010(pixelvalue, fR, fG, fB, fA);
             break;
         default:
             fR = fG = fB = fA = 0.0f;
@@ -587,7 +587,7 @@ static void WriteFloatPixel(Uint8 *pixels, SlowBlitPixelAccess access, const SDL
                             float fR, float fG, float fB, float fA)
 {
     Uint32 R, G, B, A;
-    Uint32 pixel;
+    Uint32 pixelvalue;
     float v[4];
 
     // We converted to nits so src and dst are guaranteed to be linear and in the same units
@@ -637,19 +637,19 @@ static void WriteFloatPixel(Uint8 *pixels, SlowBlitPixelAccess access, const SDL
             fA = 1.0f;
             SDL_FALLTHROUGH;
         case SDL_PIXELFORMAT_ARGB2101010:
-            ARGB2101010_FROM_RGBAFLOAT(pixel, fR, fG, fB, fA);
+            ARGB2101010_FROM_RGBAFLOAT(pixelvalue, fR, fG, fB, fA);
             break;
         case SDL_PIXELFORMAT_XBGR2101010:
             fA = 1.0f;
             SDL_FALLTHROUGH;
         case SDL_PIXELFORMAT_ABGR2101010:
-            ABGR2101010_FROM_RGBAFLOAT(pixel, fR, fG, fB, fA);
+            ABGR2101010_FROM_RGBAFLOAT(pixelvalue, fR, fG, fB, fA);
             break;
         default:
-            pixel = 0;
+            pixelvalue = 0;
             break;
         }
-        *(Uint32 *)pixels = pixel;
+        *(Uint32 *)pixels = pixelvalue;
         break;
     }
     case SlowBlitPixelAccess_Large:
diff --git a/src/video/SDL_bmp.c b/src/video/SDL_bmp.c
index 688086fc43742..a9b6e6c4af061 100644
--- src/video/SDL_bmp.c
+++ src/video/SDL_bmp.c
@@ -92,13 +92,13 @@ static bool readRlePixels(SDL_Surface *surface, SDL_IOStream *src, int isRle8)
         | with two colour indexes to alternate between for the run
         */
         if (ch) {
-            Uint8 pixel;
-            if (!SDL_ReadU8(src, &pixel)) {
+            Uint8 pixelvalue;
+            if (!SDL_ReadU8(src, &pixelvalue)) {
                 return false;
             }
             ch /= pixels_per_byte;
             do {
-                COPY_PIXEL(pixel);
+                COPY_PIXEL(pixelvalue);
             } while (--ch);
         } else {
             /*
@@ -131,11 +131,11 @@ static bool readRlePixels(SDL_Surface *surface, SDL_IOStream *src, int isRle8)
                 ch /= pixels_per_byte;
                 needsPad = (ch & 1);
                 do {
-                    Uint8 pixel;
-                    if (!SDL_ReadU8(src, &pixel)) {
+                    Uint8 pixelvalue;
+                    if (!SDL_ReadU8(src, &pixelvalue)) {
                         return false;
                     }
-                    COPY_PIXEL(pixel);
+                    COPY_PIXEL(pixelvalue);
                 } while (--ch);
 
                 // pad at even boundary
diff --git a/src/video/SDL_pixels.c b/src/video/SDL_pixels.c
index ed908eb0fdf58..b918f86dd72a4 100644
--- src/video/SDL_pixels.c
+++ src/video/SDL_pixels.c
@@ -1133,7 +1133,7 @@ Uint8 SDL_FindColor(const SDL_Palette *pal, Uint8 r, Uint8 g, Uint8 b, Uint8 a)
     unsigned int distance;
     int rd, gd, bd, ad;
     int i;
-    Uint8 pixel = 0;
+    Uint8 pixelvalue = 0;
 
     smallest = ~0U;
     for (i = 0; i < pal->ncolors; ++i) {
@@ -1143,14 +1143,14 @@ Uint8 SDL_FindColor(const SDL_Palette *pal, Uint8 r, Uint8 g, Uint8 b, Uint8 a)
         ad = pal->colors[i].a - a;
         distance = (rd * rd) + (gd * gd) + (bd * bd) + (ad * ad);
         if (distance < smallest) {
-            pixel = (Uint8)i;
+            pixelvalue = (Uint8)i;
             if (distance == 0) { // Perfect match!
                 break;
             }
             smallest = distance;
         }
     }
-    return pixel;
+    return pixelvalue;
 }
 
 Uint8 SDL_LookupRGBAColor(SDL_HashTable *palette_map, Uint32 pixelvalue, const SDL_Palette *pal)


From d5caa8ddfd8d10ac2f3c76b695618e43d0947424 Mon Sep 17 00:00:00 2001
From: Ozkan Sezer <sezeroz@gmail.com>
Date: Mon, 7 Apr 2025 15:50:25 +0300
Subject: [PATCH] rename 'pixel' params of SDL_GetRGB, SDL_GetRGBA and
 SDL_LookupRGBAColor

Reference issue: https://github.com/libsdl-org/SDL/issues/12749.
---
 include/SDL3/SDL_pixels.h |  8 ++---
 src/video/SDL_pixels.c    | 64 +++++++++++++++++++--------------------
 src/video/SDL_pixels_c.h  |  2 +-
 3 files changed, 37 insertions(+), 37 deletions(-)

diff --git a/include/SDL3/SDL_pixels.h b/include/SDL3/SDL_pixels.h
index 4127ac06c7d9a..294f1a7918bd4 100644
--- include/SDL3/SDL_pixels.h
+++ include/SDL3/SDL_pixels.h
@@ -1379,7 +1379,7 @@ extern SDL_DECLSPEC Uint32 SDLCALL SDL_MapRGBA(const SDL_PixelFormatDetails *for
  * (e.g., a completely white pixel in 16-bit RGB565 format would return [0xff,
  * 0xff, 0xff] not [0xf8, 0xfc, 0xf8]).
  *
- * \param pixel a pixel value.
+ * \param pixelvalue a pixel value.
  * \param format a pointer to SDL_PixelFormatDetails describing the pixel
  *               format.
  * \param palette an optional palette for indexed formats, may be NULL.
@@ -1397,7 +1397,7 @@ extern SDL_DECLSPEC Uint32 SDLCALL SDL_MapRGBA(const SDL_PixelFormatDetails *for
  * \sa SDL_MapRGB
  * \sa SDL_MapRGBA
  */
-extern SDL_DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);
+extern SDL_DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);
 
 /**
  * Get RGBA values from a pixel in the specified format.
@@ -1410,7 +1410,7 @@ extern SDL_DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatD
  * If the surface has no alpha component, the alpha will be returned as 0xff
  * (100% opaque).
  *
- * \param pixel a pixel value.
+ * \param pixelvalue a pixel value.
  * \param format a pointer to SDL_PixelFormatDetails describing the pixel
  *               format.
  * \param palette an optional palette for indexed formats, may be NULL.
@@ -1429,7 +1429,7 @@ extern SDL_DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatD
  * \sa SDL_MapRGB
  * \sa SDL_MapRGBA
  */
-extern SDL_DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
+extern SDL_DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
 
 
 /* Ends C function definitions when using C++ */
diff --git a/src/video/SDL_pixels.c b/src/video/SDL_pixels.c
index 5e341f43630c9..ed908eb0fdf58 100644
--- src/video/SDL_pixels.c
+++ src/video/SDL_pixels.c
@@ -1153,19 +1153,19 @@ Uint8 SDL_FindColor(const SDL_Palette *pal, Uint8 r, Uint8 g, Uint8 b, Uint8 a)
     return pixel;
 }
 
-Uint8 SDL_LookupRGBAColor(SDL_HashTable *palette_map, Uint32 pixel, const SDL_Palette *pal)
+Uint8 SDL_LookupRGBAColor(SDL_HashTable *palette_map, Uint32 pixelvalue, const SDL_Palette *pal)
 {
     Uint8 color_index = 0;
     const void *value;
-    if (SDL_FindInHashTable(palette_map, (const void *)(uintptr_t)pixel, &value)) {
+    if (SDL_FindInHashTable(palette_map, (const void *)(uintptr_t)pixelvalue, &value)) {
         color_index = (Uint8)(uintptr_t)value;
     } else {
-        Uint8 r = (Uint8)((pixel >> 24) & 0xFF);
-        Uint8 g = (Uint8)((pixel >> 16) & 0xFF);
-        Uint8 b = (Uint8)((pixel >>  8) & 0xFF);
-        Uint8 a = (Uint8)((pixel >>  0) & 0xFF);
+        Uint8 r = (Uint8)((pixelvalue >> 24) & 0xFF);
+        Uint8 g = (Uint8)((pixelvalue >> 16) & 0xFF);
+        Uint8 b = (Uint8)((pixelvalue >>  8) & 0xFF);
+        Uint8 a = (Uint8)((pixelvalue >>  0) & 0xFF);
         color_index = SDL_FindColor(pal, r, g, b, a);
-        SDL_InsertIntoHashTable(palette_map, (const void *)(uintptr_t)pixel, (const void *)(uintptr_t)color_index, true);
+        SDL_InsertIntoHashTable(palette_map, (const void *)(uintptr_t)pixelvalue, (const void *)(uintptr_t)color_index, true);
     }
     return color_index;
 }
@@ -1274,7 +1274,7 @@ Uint32 SDL_MapRGBA(const SDL_PixelFormatDetails *format, const SDL_Palette *pale
     }
 }
 
-void SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b)
+void SDL_GetRGB(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b)
 {
     Uint8 unused;
 
@@ -1294,10 +1294,10 @@ void SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Pa
     }
 
     if (SDL_ISPIXELFORMAT_INDEXED(format->format)) {
-        if (palette && pixel < (unsigned)palette->ncolors) {
-            *r = palette->colors[pixel].r;
-            *g = palette->colors[pixel].g;
-            *b = palette->colors[pixel].b;
+        if (palette && pixelvalue < (unsigned)palette->ncolors) {
+            *r = palette->colors[pixelvalue].r;
+            *g = palette->colors[pixelvalue].g;
+            *b = palette->colors[pixelvalue].b;
         } else {
             *r = *g = *b = 0;
         }
@@ -1306,24 +1306,24 @@ void SDL_GetRGB(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Pa
 
     if (SDL_ISPIXELFORMAT_10BIT(format->format)) {
         unsigned v;
-        v = (pixel & format->Rmask) >> format->Rshift;
+        v = (pixelvalue & format->Rmask) >> format->Rshift;
         *r = (Uint8)(v >> 2);
-        v = (pixel & format->Gmask) >> format->Gshift;
+        v = (pixelvalue & format->Gmask) >> format->Gshift;
         *g = (Uint8)(v >> 2);
-        v = (pixel & format->Bmask) >> format->Bshift;
+        v = (pixelvalue & format->Bmask) >> format->Bshift;
         *b = (Uint8)(v >> 2);
     } else {
         unsigned v;
-        v = (pixel & format->Rmask) >> format->Rshift;
+        v = (pixelvalue & format->Rmask) >> format->Rshift;
         *r = SDL_expand_byte[format->Rbits][v];
-        v = (pixel & format->Gmask) >> format->Gshift;
+        v = (pixelvalue & format->Gmask) >> format->Gshift;
         *g = SDL_expand_byte[format->Gbits][v];
-        v = (pixel & format->Bmask) >> format->Bshift;
+        v = (pixelvalue & format->Bmask) >> format->Bshift;
         *b = SDL_expand_byte[format->Bbits][v];
     }
 }
 
-void SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a)
+void SDL_GetRGBA(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a)
 {
     Uint8 unused;
 
@@ -1346,11 +1346,11 @@ void SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_P
     }
 
     if (SDL_ISPIXELFORMAT_INDEXED(format->format)) {
-        if (palette && pixel < (unsigned)palette->ncolors) {
-            *r = palette->colors[pixel].r;
-            *g = palette->colors[pixel].g;
-            *b = palette->colors[pixel].b;
-            *a = palette->colors[pixel].a;
+        if (palette && pixelvalue < (unsigned)palette->ncolors) {
+            *r = palette->colors[pixelvalue].r;
+            *g = palette->colors[pixelvalue].g;
+            *b = palette->colors[pixelvalue].b;
+            *a = palette->colors[pixelvalue].a;
         } else {
             *r = *g = *b = *a = 0;
         }
@@ -1359,23 +1359,23 @@ void SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormatDetails *format, const SDL_P
 
     if (SDL_ISPIXELFORMAT_10BIT(format->format)) {
         unsigned v;
-        v = (pixel & format->Rmask) >> format->Rshift;
+        v = (pixelvalue & format->Rmask) >> format->Rshift;
         *r = (Uint8)(v >> 2);
-        v = (pixel & format->Gmask) >> format->Gshift;
+        v = (pixelvalue & format->Gmask) >> format->Gshift;
         *g = (Uint8)(v >> 2);
-        v = (pixel & format->Bmask) >> format->Bshift;
+        v = (pixelvalue & format->Bmask) >> format->Bshift;
         *b = (Uint8)(v >> 2);
-        v = (pixel & format->Amask) >> format->Ashift;
+        v = (pixelvalue & format->Amask) >> format->Ashift;
         *a = SDL_expand_byte[format->Abits][v];
     } else {
         unsigned v;
-        v = (pixel & format->Rmask) >> format->Rshift;
+        v = (pixelvalue & format->Rmask) >> format->Rshift;
         *r = SDL_expand_byte[format->Rbits][v];
-        v = (pixel & format->Gmask) >> format->Gshift;
+        v = (pixelvalue & format->Gmask) >> format->Gshift;
         *g = SDL_expand_byte[format->Gbits][v];
-        v = (pixel & format->Bmask) >> format->Bshift;
+        v = (pixelvalue & format->Bmask) >> format->Bshift;
         *b = SDL_expand_byte[format->Bbits][v];
-        v = (pixel & format->Amask) >> format->Ashift;
+        v = (pixelvalue & format->Amask) >> format->Ashift;
         *a = SDL_expand_byte[format->Abits][v];
     }
 }
diff --git a/src/video/SDL_pixels_c.h b/src/video/SDL_pixels_c.h
index 11be7f3f2b233..f6411f7cbdb10 100644
--- src/video/SDL_pixels_c.h
+++ src/video/SDL_pixels_c.h
@@ -50,7 +50,7 @@ extern bool SDL_MapSurface(SDL_Surface *src, SDL_Surface *dst);
 // Miscellaneous functions
 extern void SDL_DitherPalette(SDL_Palette *palette);
 extern Uint8 SDL_FindColor(const SDL_Palette *pal, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
-extern Uint8 SDL_LookupRGBAColor(SDL_HashTable *palette_map, Uint32 pixel, const SDL_Palette *pal);
+extern Uint8 SDL_LookupRGBAColor(SDL_HashTable *palette_map, Uint32 pixelvalue, const SDL_Palette *pal);
 extern void SDL_DetectPalette(const SDL_Palette *pal, bool *is_opaque, bool *has_alpha_channel);
 extern SDL_Surface *SDL_DuplicatePixels(int width, int height, SDL_PixelFormat format, SDL_Colorspace colorspace, void *pixels, int pitch);
 

From 172f912a9457eef8c553c01f372cbd9d946587f2 Mon Sep 17 00:00:00 2001
From: Ozkan Sezer <sezeroz@gmail.com>
Date: Tue, 8 Apr 2025 17:37:04 +0300
Subject: [PATCH] rename local pointer vars 'pixel' to 'pixels'

Reference issue: https://github.com/libsdl-org/SDL/issues/12749.
---
 src/events/SDL_mouse.c             |   8 +-
 src/render/software/SDL_draw.h     | 187 +++++++++++++++--------------
 src/render/software/SDL_drawline.c |  10 +-
 src/video/stb_image.h              |  24 ++--
 4 files changed, 115 insertions(+), 114 deletions(-)

diff --git a/src/events/SDL_mouse.c b/src/events/SDL_mouse.c
index d47b3fe815c13..c663ca83ba2fa 100644
--- src/events/SDL_mouse.c
+++ src/events/SDL_mouse.c
@@ -1477,7 +1477,7 @@ SDL_Cursor *SDL_CreateCursor(const Uint8 *data, const Uint8 *mask, int w, int h,
     SDL_Surface *surface;
     SDL_Cursor *cursor;
     int x, y;
-    Uint32 *pixel;
+    Uint32 *pixels;
     Uint8 datab = 0, maskb = 0;
     const Uint32 black = 0xFF000000;
     const Uint32 white = 0xFFFFFFFF;
@@ -1498,16 +1498,16 @@ SDL_Cursor *SDL_CreateCursor(const Uint8 *data, const Uint8 *mask, int w, int h,
         return NULL;
     }
     for (y = 0; y < h; ++y) {
-        pixel = (Uint32 *)((Uint8 *)surface->pixels + y * surface->pitch);
+        pixels = (Uint32 *)((Uint8 *)surface->pixels + y * surface->pitch);
         for (x = 0; x < w; ++x) {
             if ((x % 8) == 0) {
                 datab = *data++;
                 maskb = *mask++;
             }
             if (maskb & 0x80) {
-                *pixel++ = (datab & 0x80) ? black : white;
+                *pixels++ = (datab & 0x80) ? black : white;
             } else {
-                *pixel++ = (datab & 0x80) ? inverted : transparent;
+                *pixels++ = (datab & 0x80) ? inverted : transparent;
             }
             datab <<= 1;
             maskb <<= 1;
diff --git a/src/render/software/SDL_draw.h b/src/render/software/SDL_draw.h
index ec7752733ec62..0cd2018a2d016 100644
--- src/render/software/SDL_draw.h
+++ src/render/software/SDL_draw.h
@@ -18,6 +18,7 @@
      misrepresented as being the original software.
   3. This notice may not be removed or altered from any source distribution.
 */
+
 #include "SDL_internal.h"
 
 #include "../../video/SDL_surface_c.h"
@@ -29,7 +30,7 @@
 #define DRAW_MUL(_a, _b) (((unsigned)(_a) * (_b)) / 255)
 
 #define DRAW_FASTSETPIXEL(type) \
-    *pixel = (type)color
+    *pixels = (type)color
 
 #define DRAW_FASTSETPIXEL1 DRAW_FASTSETPIXEL(Uint8)
 #define DRAW_FASTSETPIXEL2 DRAW_FASTSETPIXEL(Uint16)
@@ -126,7 +127,7 @@
 
 #define DRAW_SETPIXELXY(x, y, type, bpp, op)                                     \
     do {                                                                         \
-        type *pixel = (type *)((Uint8 *)dst->pixels + (y)*dst->pitch + (x)*bpp); \
+        type *pixels = (type *)((Uint8 *)dst->pixels + (y)*dst->pitch + (x)*bpp);\
         op;                                                                      \
     } while (0)
 
@@ -135,27 +136,27 @@
  */
 
 #define DRAW_SETPIXEL_RGB555 \
-    DRAW_SETPIXEL(RGB555_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL(RGB555_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_RGB555                           \
-    DRAW_SETPIXEL_BLEND(RGB_FROM_RGB555(*pixel, sr, sg, sb), \
-                        RGB555_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND(RGB_FROM_RGB555(*pixels, sr, sg, sb),\
+                        RGB555_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_CLAMPED_RGB555                           \
-    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_RGB555(*pixel, sr, sg, sb), \
-                                RGB555_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_RGB555(*pixels, sr, sg, sb),\
+                                RGB555_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_ADD_RGB555                           \
-    DRAW_SETPIXEL_ADD(RGB_FROM_RGB555(*pixel, sr, sg, sb), \
-                      RGB555_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_ADD(RGB_FROM_RGB555(*pixels, sr, sg, sb),\
+                      RGB555_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MOD_RGB555                           \
-    DRAW_SETPIXEL_MOD(RGB_FROM_RGB555(*pixel, sr, sg, sb), \
-                      RGB555_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_MOD(RGB_FROM_RGB555(*pixels, sr, sg, sb),\
+                      RGB555_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MUL_RGB555                           \
-    DRAW_SETPIXEL_MUL(RGB_FROM_RGB555(*pixel, sr, sg, sb), \
-                      RGB555_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_MUL(RGB_FROM_RGB555(*pixels, sr, sg, sb),\
+                      RGB555_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXELXY_RGB555(x, y) \
     DRAW_SETPIXELXY(x, y, Uint16, 2, DRAW_SETPIXEL_RGB555)
@@ -180,27 +181,27 @@
  */
 
 #define DRAW_SETPIXEL_RGB565 \
-    DRAW_SETPIXEL(RGB565_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL(RGB565_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_RGB565                           \
-    DRAW_SETPIXEL_BLEND(RGB_FROM_RGB565(*pixel, sr, sg, sb), \
-                        RGB565_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND(RGB_FROM_RGB565(*pixels, sr, sg, sb),\
+                        RGB565_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_CLAMPED_RGB565                           \
-    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_RGB565(*pixel, sr, sg, sb), \
-                                RGB565_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_RGB565(*pixels, sr, sg, sb),\
+                                RGB565_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_ADD_RGB565                           \
-    DRAW_SETPIXEL_ADD(RGB_FROM_RGB565(*pixel, sr, sg, sb), \
-                      RGB565_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_ADD(RGB_FROM_RGB565(*pixels, sr, sg, sb),\
+                      RGB565_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MOD_RGB565                           \
-    DRAW_SETPIXEL_MOD(RGB_FROM_RGB565(*pixel, sr, sg, sb), \
-                      RGB565_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_MOD(RGB_FROM_RGB565(*pixels, sr, sg, sb),\
+                      RGB565_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MUL_RGB565                           \
-    DRAW_SETPIXEL_MUL(RGB_FROM_RGB565(*pixel, sr, sg, sb), \
-                      RGB565_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_MUL(RGB_FROM_RGB565(*pixels, sr, sg, sb),\
+                      RGB565_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXELXY_RGB565(x, y) \
     DRAW_SETPIXELXY(x, y, Uint16, 2, DRAW_SETPIXEL_RGB565)
@@ -225,27 +226,27 @@
  */
 
 #define DRAW_SETPIXEL_XRGB8888 \
-    DRAW_SETPIXEL(XRGB8888_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL(XRGB8888_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_XRGB8888                           \
-    DRAW_SETPIXEL_BLEND(RGB_FROM_XRGB8888(*pixel, sr, sg, sb), \
-                        XRGB8888_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND(RGB_FROM_XRGB8888(*pixels, sr, sg, sb),\
+                        XRGB8888_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_CLAMPED_XRGB8888                           \
-    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_XRGB8888(*pixel, sr, sg, sb), \
-                                XRGB8888_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_XRGB8888(*pixels, sr, sg, sb),\
+                                XRGB8888_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_ADD_XRGB8888                           \
-    DRAW_SETPIXEL_ADD(RGB_FROM_XRGB8888(*pixel, sr, sg, sb), \
-                      XRGB8888_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_ADD(RGB_FROM_XRGB8888(*pixels, sr, sg, sb),\
+                      XRGB8888_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MOD_XRGB8888                           \
-    DRAW_SETPIXEL_MOD(RGB_FROM_XRGB8888(*pixel, sr, sg, sb), \
-                      XRGB8888_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_MOD(RGB_FROM_XRGB8888(*pixels, sr, sg, sb),\
+                      XRGB8888_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MUL_XRGB8888                           \
-    DRAW_SETPIXEL_MUL(RGB_FROM_XRGB8888(*pixel, sr, sg, sb), \
-                      XRGB8888_FROM_RGB(*pixel, sr, sg, sb))
+    DRAW_SETPIXEL_MUL(RGB_FROM_XRGB8888(*pixels, sr, sg, sb),\
+                      XRGB8888_FROM_RGB(*pixels, sr, sg, sb))
 
 #define DRAW_SETPIXELXY_XRGB8888(x, y) \
     DRAW_SETPIXELXY(x, y, Uint32, 4, DRAW_SETPIXEL_XRGB8888)
@@ -270,27 +271,27 @@
  */
 
 #define DRAW_SETPIXEL_ARGB8888 \
-    DRAW_SETPIXEL(ARGB8888_FROM_RGBA(*pixel, sr, sg, sb, sa))
+    DRAW_SETPIXEL(ARGB8888_FROM_RGBA(*pixels, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_BLEND_ARGB8888                                \
-    DRAW_SETPIXEL_BLEND(RGBA_FROM_ARGB8888(*pixel, sr, sg, sb, sa), \
-                        ARGB8888_FROM_RGBA(*pixel, sr, sg, sb, sa))
+    DRAW_SETPIXEL_BLEND(RGBA_FROM_ARGB8888(*pixels, sr, sg, sb, sa),\
+                        ARGB8888_FROM_RGBA(*pixels, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_BLEND_CLAMPED_ARGB8888                                \
-    DRAW_SETPIXEL_BLEND_CLAMPED(RGBA_FROM_ARGB8888(*pixel, sr, sg, sb, sa), \
-                                ARGB8888_FROM_RGBA(*pixel, sr, sg, sb, sa))
+    DRAW_SETPIXEL_BLEND_CLAMPED(RGBA_FROM_ARGB8888(*pixels, sr, sg, sb, sa),\
+                                ARGB8888_FROM_RGBA(*pixels, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_ADD_ARGB8888                                \
-    DRAW_SETPIXEL_ADD(RGBA_FROM_ARGB8888(*pixel, sr, sg, sb, sa), \
-                      ARGB8888_FROM_RGBA(*pixel, sr, sg, sb, sa))
+    DRAW_SETPIXEL_ADD(RGBA_FROM_ARGB8888(*pixels, sr, sg, sb, sa),\
+                      ARGB8888_FROM_RGBA(*pixels, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_MOD_ARGB8888                                \
-    DRAW_SETPIXEL_MOD(RGBA_FROM_ARGB8888(*pixel, sr, sg, sb, sa), \
-                      ARGB8888_FROM_RGBA(*pixel, sr, sg, sb, sa))
+    DRAW_SETPIXEL_MOD(RGBA_FROM_ARGB8888(*pixels, sr, sg, sb, sa),\
+                      ARGB8888_FROM_RGBA(*pixels, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_MUL_ARGB8888                                \
-    DRAW_SETPIXEL_MUL(RGBA_FROM_ARGB8888(*pixel, sr, sg, sb, sa), \
-                      ARGB8888_FROM_RGBA(*pixel, sr, sg, sb, sa))
+    DRAW_SETPIXEL_MUL(RGBA_FROM_ARGB8888(*pixels, sr, sg, sb, sa),\
+                      ARGB8888_FROM_RGBA(*pixels, sr, sg, sb, sa))
 
 #define DRAW_SETPIXELXY_ARGB8888(x, y) \
     DRAW_SETPIXELXY(x, y, Uint32, 4, DRAW_SETPIXEL_ARGB8888)
@@ -315,27 +316,27 @@
  */
 
 #define DRAW_SETPIXEL_RGB \
-    DRAW_SETPIXEL(PIXEL_FROM_RGB(*pixel, fmt, sr, sg, sb))
+    DRAW_SETPIXEL(PIXEL_FROM_RGB(*pixels, fmt, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_RGB                                  \
-    DRAW_SETPIXEL_BLEND(RGB_FROM_PIXEL(*pixel, fmt, sr, sg, sb), \
-                        PIXEL_FROM_RGB(*pixel, fmt, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND(RGB_FROM_PIXEL(*pixels, fmt, sr, sg, sb),\
+                        PIXEL_FROM_RGB(*pixels, fmt, sr, sg, sb))
 
 #define DRAW_SETPIXEL_BLEND_CLAMPED_RGB                                  \
-    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_PIXEL(*pixel, fmt, sr, sg, sb), \
-                                PIXEL_FROM_RGB(*pixel, fmt, sr, sg, sb))
+    DRAW_SETPIXEL_BLEND_CLAMPED(RGB_FROM_PIXEL(*pixels, fmt, sr, sg, sb),\
+                                PIXEL_FROM_RGB(*pixels, fmt, sr, sg, sb))
 
 #define DRAW_SETPIXEL_ADD_RGB                                  \
-    DRAW_SETPIXEL_ADD(RGB_FROM_PIXEL(*pixel, fmt, sr, sg, sb), \
-                      PIXEL_FROM_RGB(*pixel, fmt, sr, sg, sb))
+    DRAW_SETPIXEL_ADD(RGB_FROM_PIXEL(*pixels, fmt, sr, sg, sb),\
+                      PIXEL_FROM_RGB(*pixels, fmt, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MOD_RGB                                  \
-    DRAW_SETPIXEL_MOD(RGB_FROM_PIXEL(*pixel, fmt, sr, sg, sb), \
-                      PIXEL_FROM_RGB(*pixel, fmt, sr, sg, sb))
+    DRAW_SETPIXEL_MOD(RGB_FROM_PIXEL(*pixels, fmt, sr, sg, sb),\
+                      PIXEL_FROM_RGB(*pixels, fmt, sr, sg, sb))
 
 #define DRAW_SETPIXEL_MUL_RGB                                  \
-    DRAW_SETPIXEL_MUL(RGB_FROM_PIXEL(*pixel, fmt, sr, sg, sb), \
-                      PIXEL_FROM_RGB(*pixel, fmt, sr, sg, sb))
+    DRAW_SETPIXEL_MUL(RGB_FROM_PIXEL(*pixels, fmt, sr, sg, sb),\
+                      PIXEL_FROM_RGB(*pixels, fmt, sr, sg, sb))
 
 #define DRAW_SETPIXELXY2_RGB(x, y) \
     DRAW_SETPIXELXY(x, y, Uint16, 2, DRAW_SETPIXEL_RGB)
@@ -378,27 +379,27 @@
  */
 
 #define DRAW_SETPIXEL_RGBA \
-    DRAW_SETPIXEL(PIXEL_FROM_RGBA(*pixel, fmt, sr, sg, sb, sa))
+    DRAW_SETPIXEL(PIXEL_FROM_RGBA(*pixels, fmt, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_BLEND_RGBA                                      \
-    DRAW_SETPIXEL_BLEND(RGBA_FROM_PIXEL(*pixel, fmt, sr, sg, sb, sa), \
-                        PIXEL_FROM_RGBA(*pixel, fmt, sr, sg, sb, sa))
+    DRAW_SETPIXEL_BLEND(RGBA_FROM_PIXEL(*pixels, fmt, sr, sg, sb, sa),\
+                        PIXEL_FROM_RGBA(*pixels, fmt, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_BLEND_CLAMPED_RGBA                                      \
-    DRAW_SETPIXEL_BLEND_CLAMPED(RGBA_FROM_PIXEL(*pixel, fmt, sr, sg, sb, sa), \
-                                PIXEL_FROM_RGBA(*pixel, fmt, sr, sg, sb, sa))
+    DRAW_SETPIXEL_BLEND_CLAMPED(RGBA_FROM_PIXEL(*pixels, fmt, sr, sg, sb, sa),\
+                                PIXEL_FROM_RGBA(*pixels, fmt, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_ADD_RGBA                                      \
-    DRAW_SETPIXEL_ADD(RGBA_FROM_PIXEL(*pixel, fmt, sr, sg, sb, sa), \
-                      PIXEL_FROM_RGBA(*pixel, fmt, sr, sg, sb, sa))
+    DRAW_SETPIXEL_ADD(RGBA_FROM_PIXEL(*pixels, fmt, sr, sg, sb, sa),\
+                      PIXEL_FROM_RGBA(*pixels, fmt, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_MOD_RGBA                                      \
-    DRAW_SETPIXEL_MOD(RGBA_FROM_PIXEL(*pixel, fmt, sr, sg, sb, sa), \
-                      PIXEL_FROM_RGBA(*pixel, fmt, sr, sg, sb, sa))
+    DRAW_SETPIXEL_MOD(RGBA_FROM_PIXEL(*pixels, fmt, sr, sg, sb, sa),\
+                      PIXEL_FROM_RGBA(*pixels, fmt, sr, sg, sb, sa))
 
 #define DRAW_SETPIXEL_MUL_RGBA                                      \
-    DRAW_SETPIXEL_MUL(RGBA_FROM_PIXEL(*pixel, fmt, sr, sg, sb, sa), \
-                      PIXEL_FROM_RGBA(*pixel, fmt, sr, sg, sb, sa))
+    DRAW_SETPIXEL_MUL(RGBA_FROM_PIXEL(*pixels, fmt, sr, sg, sb, sa),\
+                      PIXEL_FROM_RGBA(*pixels, fmt, sr, sg, sb, sa))
 
 #define DRAW_SETPIXELXY4_RGBA(x, y) \
     DRAW_SETPIXELXY(x, y, Uint32, 4, DRAW_SETPIXEL_RGBA)
@@ -428,21 +429,21 @@
 #define HLINE(type, op, draw_end)                              \
     {                                                          \
         int length;                                            \
-        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel); \
-        type *pixel;                                           \
+        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel);  \
+        type *pixels;                                          \
         if (x1 <= x2) {                                        \
-            pixel = (type *)dst->pixels + y1 * pitch + x1;     \
+            pixels = (type *)dst->pixels + y1 * pitch + x1;    \
             length = draw_end ? (x2 - x1 + 1) : (x2 - x1);     \
         } else {                                               \
-            pixel = (type *)dst->pixels + y1 * pitch + x2;     \
+            pixels = (type *)dst->pixels + y1 * pitch + x2;    \
             if (!draw_end) {                                   \
-                ++pixel;                                       \
+                ++pixels;                                      \
             }                                                  \
             length = draw_end ? (x1 - x2 + 1) : (x1 - x2);     \
         }                                                      \
         while (length--) {                                     \
             op;                                                \
-            ++pixel;                                           \
+            ++pixels;                                          \
         }                                                      \
     }
 
@@ -450,21 +451,21 @@
 #define VLINE(type, op, draw_end)                              \
     {                                                          \
         int length;                                            \
-        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel); \
-        type *pixel;                                           \
+        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel);  \
+        type *pixels;                                          \
         if (y1 <= y2) {                                        \
-            pixel = (type *)dst->pixels + y1 * pitch + x1;     \
+            pixels = (type *)dst->pixels + y1 * pitch + x1;    \
             length = draw_end ? (y2 - y1 + 1) : (y2 - y1);     \
         } else {                                               \
-            pixel = (type *)dst->pixels + y2 * pitch + x1;     \
+            pixels = (type *)dst->pixels + y2 * pitch + x1;    \
             if (!draw_end) {                                   \
-                pixel += pitch;                                \
+                pixels += pitch;                               \
             }                                                  \
             length = draw_end ? (y1 - y2 + 1) : (y1 - y2);     \
         }                                                      \
         while (length--) {                                     \
             op;                                                \
-            pixel += pitch;                                    \
+            pixels += pitch;                                   \
         }                                                      \
     }
 
@@ -472,10 +473,10 @@
 #define DLINE(type, op, draw_end)                              \
     {                                                          \
         int length;                                            \
-        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel); \
-        type *pixel;                                           \
+        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel);  \
+        type *pixels;                                          \
         if (y1 <= y2) {                                        \
-            pixel = (type *)dst->pixels + y1 * pitch + x1;     \
+            pixels = (type *)dst->pixels + y1 * pitch + x1;    \
             if (x1 <= x2) {                                    \
                 ++pitch;                                       \
             } else {                                           \
@@ -483,14 +484,14 @@
             }                                                  \
             length = (y2 - y1);                                \
         } else {                                               \
-            pixel = (type *)dst->pixels + y2 * pitch + x2;     \
+            pixels = (type *)dst->pixels + y2 * pitch + x2;    \
             if (x2 <= x1) {                                    \
                 ++pitch;                                       \
             } else {                                           \
                 --pitch;                                       \
             }                                                  \
             if (!draw_end) {                                   \
-                pixel += pitch;                                \
+                pixels += pitch;                               \
             }                                                  \
             length = (y1 - y2);                                \
         }                                                      \
@@ -499,7 +500,7 @@
         }                                                      \
         while (length--) {                                     \
             op;                                                \
-            pixel += pitch;                                    \
+            pixels += pitch;                                   \
         }                                                      \
     }
 
@@ -692,9 +693,9 @@
     do {                                                               \
         int width = rect->w;                                           \
         int height = rect->h;                                          \
-        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel); \
+        int pitch = (dst->pitch / dst->fmt->bytes_per_pixel);          \
         int skip = pitch - width;                                      \
-        type *pixel = (type *)dst->pixels + rect->y * pitch + rect->x; \
+        type *pixels = (type *)dst->pixels + rect->y * pitch + rect->x;\
         while (height--) {                                             \
             {                                                          \
                 int n = (width + 3) / 4;                               \
@@ -702,22 +703,22 @@
                 case 0:                                                \
                     do {                                               \
                         op;                                            \
-                        pixel++;                                       \
+                        pixels++;                                      \
                         SDL_FALLTHROUGH;                               \
                     case 3:                                            \
                         op;                                            \
-                        pixel++;                                       \
+                        pixels++;                                      \
                         SDL_FALLTHROUGH;                               \
                     case 2:                                            \
                         op;                                            \
-                        pixel++;                                       \
+                        pixels++;                                      \
                         SDL_FALLTHROUGH;                               \
                     case 1:                                            \
                         op;                                            \
-                        pixel++;                                       \
+                        pixels++;                                      \
                     } while (--n > 0);                                 \
                 }                                                      \
             }                                                          \
-            pixel += skip;                                             \
+            pixels += skip;                                            \
         }                                                              \
     } while (0)
diff --git a/src/render/software/SDL_drawline.c b/src/render/software/SDL_drawline.c
index 59ba2688f4e20..89d98af91423e 100644
--- src/render/software/SDL_drawline.c
+++ src/render/software/SDL_drawline.c
@@ -32,18 +32,18 @@ static void SDL_DrawLine1(SDL_Surface *dst, int x1, int y1, int x2, int y2, Uint
     if (y1 == y2) {
         int length;
         int pitch = (dst->pitch / dst->fmt->bytes_per_pixel);
-        Uint8 *pixel;
+        Uint8 *pixels;
         if (x1 <= x2) {
-            pixel = (Uint8 *)dst->pixels + y1 * pitch + x1;
+            pixels = (Uint8 *)dst->pixels + y1 * pitch + x1;
             length = draw_end ? (x2 - x1 + 1) : (x2 - x1);
         } else {
-            pixel = (Uint8 *)dst->pixels + y1 * pitch + x2;
+            pixels = (Uint8 *)dst->pixels + y1 * pitch + x2;
             if (!draw_end) {
-                ++pixel;
+                ++pixels;
             }
             length = draw_end ? (x1 - x2 + 1) : (x1 - x2);
         }
-        SDL_memset(pixel, color, length);
+        SDL_memset(pixels, color, length);
     } else if (x1 == x2) {
         VLINE(Uint8, DRAW_FASTSETPIXEL1, draw_end);
     } else if (ABS(x1 - x2) == ABS(y1 - y2)) {
diff --git a/src/video/stb_image.h b/src/video/stb_image.h
index f22de1bbd77ee..72e5f4e72c8d7 100644
--- src/video/stb_image.h
+++ src/video/stb_image.h
@@ -6543,26 +6543,26 @@ static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req
    if (channelCount >= 4) {
       if (ri->bits_per_channel == 16) {
          for (i=0; i < w*h; ++i) {
-            stbi__uint16 *pixel = (stbi__uint16 *) out + 4*i;
-            if (pixel[3] != 0 && pixel[3] != 65535) {
-               float a = pixel[3] / 65535.0f;
+            stbi__uint16 *pixels = (stbi__uint16 *) out + 4*i;
+            if (pixels[3] != 0 && pixels[3] != 65535) {
+               float a = pixels[3] / 65535.0f;
                float ra = 1.0f / a;
                float inv_a = 65535.0f * (1 - ra);
-               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);
-               pixel[1] = (stbi__uint16) (pixel[1]*ra + inv_a);
-               pixel[2] = (stbi__uint16) (pixel[2]*ra + inv_a);
+               pixels[0] = (stbi__uint16) (pixels[0]*ra + inv_a);
+               pixels[1] = (stbi__uint16) (pixels[1]*ra + inv_a);
+               pixels[2] = (stbi__uint16) (pixels[2]*ra + inv_a);
             }
          }
       } else {
          for (i=0; i < w*h; ++i) {
-            unsigned char *pixel = out + 4*i;
-            if (pixel[3] != 0 && pixel[3] != 255) {
-               float a = pixel[3] / 255.0f;
+            unsigned char *pixels = out + 4*i;
+            if (pixels[3] != 0 && pixels[3] != 255) {
+               float a = pixels[3] / 255.0f;
                float ra = 1.0f / a;
                float inv_a = 255.0f * (1 - ra);
-               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
-               pixel[1] = (unsigned char) (pixel[1]*ra + inv_a);
-               pixel[2] = (unsigned char) (pixel[2]*ra + inv_a);
+               pixels[0] = (unsigned char) (pixels[0]*ra + inv_a);
+               pixels[1] = (unsigned char) (pixels[1]*ra + inv_a);
+               pixels[2] = (unsigned char) (pixels[2]*ra + inv_a);
             }
          }
       }
