From 2453f25b6f0144be8ee72be93eb5f961a23b0553 Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <vital.had@gmail.com>
Date: Fri, 30 May 2025 07:57:26 +0800
Subject: [PATCH 3/4] apple.hpp: some adjustments

---
 llarp/vpn/apple.hpp | 172 +++++++++++++++++++++++++++++++++-----------
 1 file changed, 131 insertions(+), 41 deletions(-)

diff --git a/llarp/vpn/apple.hpp b/llarp/vpn/apple.hpp
index 70497a72..a7bcc211 100644
--- a/llarp/vpn/apple.hpp
+++ b/llarp/vpn/apple.hpp
@@ -1,7 +1,8 @@
 #pragma once
 
-#include <llarp/ev/vpn.hpp>
+#include "platform.hpp"
 #include "common.hpp"
+#include "llarp/net/ip_range.hpp"
 
 #include <sys/kern_control.h>
 #include <sys/sys_domain.h>
@@ -29,25 +30,24 @@
 #include <string.h>
 #include <unistd.h>
 #include <errno.h>
+#include <variant>
 
 namespace llarp::vpn
 {
   class AppleInterface : public NetworkInterface
   {
     const int m_fd;
-    const InterfaceInfo m_Info;
     std::string m_IfName;
 
     static void
     Exec(std::string cmd)
     {
-      LogDebug(cmd);
       system(cmd.c_str());
     }
 
    public:
     AppleInterface(InterfaceInfo info)
-        : m_fd{::socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL)}, m_Info{std::move(info)}
+        : NetworkInterface{std::move(info)}, m_fd{::socket(PF_SYSTEM, SOCK_DGRAM, SYSPROTO_CONTROL)}
     {
       if (m_fd == -1)
         throw std::invalid_argument{"cannot open control socket: " + std::string{strerror(errno)}};
@@ -110,64 +110,154 @@ namespace llarp::vpn
       ::close(m_fd);
     }
 
-    std::string
-    IfName() const override
-    {
-      return m_IfName;
-    }
-
     int
     PollFD() const override
     {
       return m_fd;
     }
 
-    net::IPPacket
-    ReadNextPacket() override
-    {
-      constexpr int uintsize = sizeof(unsigned int);
-      net::IPPacket pkt{};
-      unsigned int pktinfo = 0;
-      const struct iovec vecs[2] = {
-          {.iov_base = &pktinfo, .iov_len = uintsize},
-          {.iov_base = pkt.buf, .iov_len = sizeof(pkt.buf)}};
-      int sz = readv(m_fd, vecs, 2);
-      if (sz >= uintsize)
-        pkt.sz = sz - uintsize;
-      else if (sz >= 0 || errno == EAGAIN || errno == EWOULDBLOCK)
-        pkt.sz = 0;
-      else
+  net::IPPacket ReadNextPacket() override
+  {
+    constexpr int uintsize = sizeof(unsigned int);
+    net::IPPacket pkt;
+
+    // Prepare storage for header + max-size packet.
+    pkt._buf.resize(net::IPPacket::MaxSize); // _buf is a std::vector<byte_t>
+    unsigned int pktinfo = 0;
+    struct iovec vecs[2] = {
+        { .iov_base = &pktinfo, .iov_len = uintsize },
+        { .iov_base = pkt._buf.data(), .iov_len = pkt._buf.size() }
+    };
+    int sz = readv(m_fd, vecs, 2);
+    if (sz >= uintsize)
+    {
+        pkt._buf.resize(sz - uintsize); // shrink to actual size
+    }
+    else if (sz >= 0 || errno == EAGAIN || errno == EWOULDBLOCK)
+    {
+        pkt._buf.resize(0);
+    }
+    else
+    {
         throw std::error_code{errno, std::system_category()};
-      return pkt;
     }
+    return pkt;
+  }
 
-    bool
-    WritePacket(net::IPPacket pkt) override
+  bool WritePacket(net::IPPacket pkt) override
+  {
+    static unsigned int af4 = htonl(AF_INET);
+    static unsigned int af6 = htonl(AF_INET6);
+    const void* af_ptr = pkt.IsV6() ? static_cast<const void*>(&af6) : static_cast<const void*>(&af4);
+    size_t af_len = sizeof(unsigned int);
+
+    struct iovec vecs[2] = {
+        { .iov_base = const_cast<void*>(af_ptr), .iov_len = af_len },
+        { .iov_base = const_cast<byte_t*>(pkt.data()), .iov_len = pkt.size() }
+    };
+    ssize_t n = writev(m_fd, vecs, 2);
+    if (n >= static_cast<ssize_t>(af_len))
     {
-      static unsigned int af4 = htonl(AF_INET);
-      static unsigned int af6 = htonl(AF_INET6);
+        n -= af_len;
+        return static_cast<size_t>(n) == pkt.size();
+    }
+    return false;
+  }
+};
 
-      const struct iovec vecs[2] = {
-          {.iov_base = pkt.IsV6() ? &af6 : &af4, .iov_len = sizeof(unsigned int)},
-          {.iov_base = pkt.buf, .iov_len = pkt.sz}};
+  class AppleRouteManager : public IRouteManager
+  {
+   public:
+    AppleRouteManager() = default;
+    ~AppleRouteManager() override = default;
 
-      ssize_t n = writev(m_fd, vecs, 2);
-      if (n >= (int)sizeof(unsigned int))
-      {
-        n -= sizeof(unsigned int);
-        return static_cast<size_t>(n) == pkt.sz;
-      }
-      return false;
+    // Add a route to a specific IP via a gateway
+    void AddRoute(net::ipaddr_t ip, net::ipaddr_t gateway) override
+    {
+      std::string cmd = "/sbin/route add -host " + llarp::net::ToString(ip) + " " + llarp::net::ToString(gateway);
+      int ret = std::system(cmd.c_str());
+      if (ret != 0)
+        throw std::runtime_error("AddRoute failed: " + cmd);
+    }
+
+    void DelRoute(net::ipaddr_t ip, net::ipaddr_t gateway) override
+    {
+      std::string cmd = "/sbin/route delete -host " + llarp::net::ToString(ip) + " " + llarp::net::ToString(gateway);
+      int ret = std::system(cmd.c_str());
+      if (ret != 0)
+        throw std::runtime_error("DelRoute failed: " + cmd);
+    }
+
+    // Add a default route via the VPN interface's first IPv4 address
+    void AddDefaultRouteViaInterface(NetworkInterface& vpn) override
+    {
+      const auto& info = vpn.Info();
+      if (info.addrs.empty())
+        throw std::runtime_error("No interface addresses found");
+
+      std::string gateway = info.addrs[0].range.addr.ToString();
+      std::string cmd = "/sbin/route add default " + gateway;
+      int ret = std::system(cmd.c_str());
+      if (ret != 0)
+        throw std::runtime_error("AddDefaultRouteViaInterface failed: " + cmd);
+    }
+
+    void DelDefaultRouteViaInterface(NetworkInterface& vpn) override
+    {
+      const auto& info = vpn.Info();
+      if (info.addrs.empty())
+        throw std::runtime_error("No interface addresses found");
+
+      std::string gateway = info.addrs[0].range.addr.ToString();
+      std::string cmd = "/sbin/route delete default " + gateway;
+      int ret = std::system(cmd.c_str());
+      if (ret != 0)
+        throw std::runtime_error("DelDefaultRouteViaInterface failed: " + cmd);
+    }
+
+    // Add a route for a subnet via the VPN interface
+    void AddRouteViaInterface(NetworkInterface& vpn, IPRange range) override
+    {
+      std::string cmd = "/sbin/route add -net " + range.addr.ToString() +
+                        " -netmask " + range.NetmaskString() +
+                        " -interface " + vpn.Info().ifname;
+      int ret = std::system(cmd.c_str());
+      if (ret != 0)
+        throw std::runtime_error("AddRouteViaInterface failed: " + cmd);
+    }
+
+    void DelRouteViaInterface(NetworkInterface& vpn, IPRange range) override
+    {
+      std::string cmd = "/sbin/route delete -net " + range.addr.ToString() +
+                        " -netmask " + range.NetmaskString() +
+                        " -interface " + vpn.Info().ifname;
+      int ret = std::system(cmd.c_str());
+      if (ret != 0)
+        throw std::runtime_error("DelRouteViaInterface failed: " + cmd);
+    }
+
+    std::vector<net::ipaddr_t> GetGatewaysNotOnInterface(NetworkInterface&) override
+    {
+      // Not implemented: could parse "netstat -rn" output if needed
+      return {};
     }
   };
 
   class ApplePlatform : public Platform
   {
+    AppleRouteManager _routeManager{};
+
    public:
     std::shared_ptr<NetworkInterface>
-    ObtainInterface(InterfaceInfo info) override
+    ObtainInterface(InterfaceInfo info, AbstractRouter*) override
     {
       return std::make_shared<AppleInterface>(std::move(info));
+    };
+
+    IRouteManager&
+    RouteManager() override
+    {
+      return _routeManager;
     }
   };
 }  // namespace llarp::vpn
-- 
2.24.3 (Apple Git-128)

