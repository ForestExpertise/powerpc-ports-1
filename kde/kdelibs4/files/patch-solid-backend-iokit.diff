diff --git a/solid/solid/backends/iokit/iokitaudiointerface.cpp b/solid/solid/backends/iokit/iokitaudiointerface.cpp
new file mode 100644
index 0000000..178b264
--- /dev/null
+++ b/solid/solid/backends/iokit/iokitaudiointerface.cpp
@@ -0,0 +1,101 @@
+/*
+    Copyright 2009 Harald Fernengel <harry@kdevelop.org>
+    Copyright 2015 R.J.V. Bertin <rjvbertin@gmail.com>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) version 3, or any
+    later version accepted by the membership of KDE e.V. (or its
+    successor approved by the membership of KDE e.V.), which shall
+    act as a proxy defined in Section 6 of version 3 of the license.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library. If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "iokitaudiointerface.h"
+#include "iokitdevice.h"
+
+#include <QtCore/qdebug.h>
+
+using namespace Solid::Backends::IOKit;
+
+AudioInterface::AudioInterface(IOKitDevice *device)
+    : DeviceInterface(device)
+{
+}
+
+AudioInterface::~AudioInterface()
+{
+}
+
+Solid::AudioInterface::AudioDriver AudioInterface::driver() const
+{
+    qDebug() << __FUNCTION__ << "returns UnknownAudioDriver";
+    return Solid::AudioInterface::UnknownAudioDriver;
+}
+
+QVariant AudioInterface::driverHandle() const
+{
+    qDebug() << __FUNCTION__ << "returns udi" << m_device->udi();
+    return m_device->udi(); //property(QLatin1String("IODialinDevice"));
+}
+
+QString AudioInterface::name() const
+{
+    qDebug() << __FUNCTION__ << "returns description" << m_device->description();
+    return m_device->description();
+}
+
+Solid::AudioInterface::AudioInterfaceTypes AudioInterface::deviceType() const
+{
+    Solid::AudioInterface::AudioInterfaceTypes ret = Solid::AudioInterface::UnknownAudioInterfaceType;
+    QString retStr = QString();
+    qDebug() << __FUNCTION__ << m_device->allProperties();
+    if (m_device->property(QLatin1String("IOAudioStreamIsMixable")).toLongLong()) {
+        ret |= Solid::AudioInterface::AudioControl;
+        retStr += "AudioControl|";
+    }
+    else {
+        qDebug() << "IOAudioStreamIsMixable=" << m_device->property(QLatin1String("IOAudioStreamIsMixable"));
+    }
+    if (m_device->propertyExists(QLatin1String("InputSampleLatency"))) {
+        ret |= Solid::AudioInterface::AudioInput;
+        retStr += "AudioInput|";
+    }
+    if (m_device->propertyExists(QLatin1String("OutputSampleLatency"))) {
+        ret |= Solid::AudioInterface::AudioOutput;
+        retStr += "AudioOutput|";
+    }
+    qDebug() << __FUNCTION__ << "returns" << retStr;
+    return Solid::AudioInterface::AudioControl | Solid::AudioInterface::AudioInput | Solid::AudioInterface::AudioOutput; //ret;
+}
+
+Solid::AudioInterface::SoundcardType AudioInterface::soundcardType() const
+{
+    QString ioClass = m_device->property(QLatin1String("IOClass")).toString();
+    if (ioClass.contains("AppleUSBAudioDevice", Qt::CaseInsensitive)){
+        qDebug() << __FUNCTION__ << "returns UsbSoundcard";
+        return Solid::AudioInterface::UsbSoundcard;
+    }
+    if (ioClass.contains("AppleFireWireAudioDevice", Qt::CaseInsensitive)){
+        // this one is guessed!
+        qDebug() << __FUNCTION__ << "returns FirewireSoundcard";
+        return Solid::AudioInterface::FirewireSoundcard;
+    }
+//     if (ioClass.contains("AppleHDADriver", Qt::CaseInsensitive)){
+        qDebug() << __FUNCTION__ << "returns InternalSoundcard";
+        return Solid::AudioInterface::InternalSoundcard;
+//     }
+}
+
+#include "backends/iokit/iokitaudiointerface.moc"
+
+
+
diff --git a/solid/solid/backends/iokit/iokitaudiointerface.h b/solid/solid/backends/iokit/iokitaudiointerface.h
new file mode 100644
index 0000000..3251135
--- /dev/null
+++ b/solid/solid/backends/iokit/iokitaudiointerface.h
@@ -0,0 +1,55 @@
+/*
+    Copyright 2009 Harald Fernengel <harry@kdevelop.org>
+    Copyright 2015 R.J.V. Bertin <rjvbertin@gmail.com>
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Lesser General Public
+    License as published by the Free Software Foundation; either
+    version 2.1 of the License, or (at your option) version 3, or any
+    later version accepted by the membership of KDE e.V. (or its
+    successor approved by the membership of KDE e.V.), which shall
+    act as a proxy defined in Section 6 of version 3 of the license.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Lesser General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public
+    License along with this library. If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef SOLID_BACKENDS_IOKIT_AUDIOINTERFACE_H
+#define SOLID_BACKENDS_IOKIT_AUDIOINTERFACE_H
+
+#include <solid/ifaces/audiointerface.h>
+#include "iokitdeviceinterface.h"
+
+namespace Solid
+{
+namespace Backends
+{
+namespace IOKit
+{
+class IOKitDevice;
+
+class AudioInterface : public DeviceInterface, virtual public Solid::Ifaces::AudioInterface
+{
+    Q_OBJECT
+    Q_INTERFACES(Solid::Ifaces::AudioInterface)
+
+public:
+    AudioInterface(IOKitDevice *device);
+    virtual ~AudioInterface();
+
+    Solid::AudioInterface::AudioDriver driver() const;
+    QVariant driverHandle() const;
+    QString name() const;
+    Solid::AudioInterface::AudioInterfaceTypes deviceType() const;
+    Solid::AudioInterface::SoundcardType soundcardType() const;
+};
+}
+}
+}
+
+#endif // SOLID_BACKENDS_IOKIT_AUDIOINTERFACE_H
diff --git a/solid/solid/backends/iokit/iokitdevice.cpp b/solid/solid/backends/iokit/iokitdevice.cpp
index f113c16..ff7d1bf 100644
--- a/solid/solid/backends/iokit/iokitdevice.cpp
+++ b/solid/solid/backends/iokit/iokitdevice.cpp
@@ -65,6 +65,27 @@ static QMap<QString, QVariant> getProperties(const io_registry_entry_t &entry)
     }
 
     QMap<QString, QVariant> result = q_toVariantMap(propertyDict);
+    qDebug() << "Solid: all IOKit properties for entry" << entry << ":" << result;
+// Solid: all IOKit properties: QMap(("CFBundleIdentifier", QVariant(QString, "com.apple.driver.AppleACPIPlatform") )
+//     ( "IOCPUID" ,  QVariant(qlonglong, -548564289024) ) ( "IOCPUNumber" ,  QVariant(int, 0) )
+//     ( "IOCPUState" ,  QVariant(QString, "Running") ) ( "IOClass" ,  QVariant(QString, "AppleACPICPU") )
+//     ( "IOInterruptControllers" ,  QVariant(QStringList, ("IOPlatformInterruptController", "IOPlatformInterruptController") ) )
+//     ( "IOInterruptSpecifiers" ,  QVariant(QVariantList, (QVariant(QByteArray, "
+// Solid: all IOKit properties: QMap(("CFBundleIdentifier", QVariant(QString, "com.apple.driver.AppleACPIPlatform") )
+//     ( "IOCPUID" ,  QVariant(qlonglong, -548564288768) ) ( "IOCPUNumber" ,  QVariant(int, 1) )
+//     ( "IOCPUState" ,  QVariant(QString, "Running") ) ( "IOClass" ,  QVariant(QString, "AppleACPICPU") )
+//     ( "IOInterruptControllers" ,  QVariant(QStringList, ("IOPlatformInterruptController", "IOPlatformInterruptController") ) )
+//     ( "IOInterruptSpecifiers" ,  QVariant(QVariantList, (QVariant(QByteArray, "
+// Solid: all IOKit properties: QMap(("CFBundleIdentifier", QVariant(QString, "com.apple.driver.AppleACPIPlatform") )
+//     ( "IOCPUID" ,  QVariant(qlonglong, -548564288512) ) ( "IOCPUNumber" ,  QVariant(int, 2) )
+//     ( "IOCPUState" ,  QVariant(QString, "Running") ) ( "IOClass" ,  QVariant(QString, "AppleACPICPU") )
+//     ( "IOInterruptControllers" ,  QVariant(QStringList, ("IOPlatformInterruptController", "IOPlatformInterruptController") ) )
+//     ( "IOInterruptSpecifiers" ,  QVariant(QVariantList, (QVariant(QByteArray, "
+// Solid: all IOKit properties: QMap(("CFBundleIdentifier", QVariant(QString, "com.apple.driver.AppleACPIPlatform") )
+//     ( "IOCPUID" ,  QVariant(qlonglong, -548564288256) ) ( "IOCPUNumber" ,  QVariant(int, 3) )
+//     ( "IOCPUState" ,  QVariant(QString, "Running") ) ( "IOClass" ,  QVariant(QString, "AppleACPICPU") )
+//     ( "IOInterruptControllers" ,  QVariant(QStringList, ("IOPlatformInterruptController", "IOPlatformInterruptController") ) )
+//     ( "IOInterruptSpecifiers" ,  QVariant(QVariantList, (QVariant(QByteArray, "
 
     CFRelease(propertyDict);
 
diff --git a/solid/solid/backends/iokit/iokitprocessor.cpp b/solid/solid/backends/iokit/iokitprocessor.cpp
index 5b5164d..5fd60a8 100644
--- a/solid/solid/backends/iokit/iokitprocessor.cpp
+++ b/solid/solid/backends/iokit/iokitprocessor.cpp
@@ -43,7 +43,7 @@ int Processor::number() const
 
 int Processor::maxSpeed() const
 {
-    return 0; // TODO
+    return m_device->property(QLatin1String("clock-frequency")).toInt();
 }
 
 bool Processor::canChangeFrequency() const
