diff --git a/cmake/modules/FindKDE4Internal.cmake b/cmake/modules/FindKDE4Internal.cmake
index c345eca36f4255c03e88a31c53cf2a2efd0e2c42..88de766c6aaef9958dbaccd2d4059b3ffcb65f62 100644
--- a/cmake/modules/FindKDE4Internal.cmake
+++ b/cmake/modules/FindKDE4Internal.cmake
@@ -345,6 +345,18 @@
 # Redistribution and use is allowed according to the terms of the BSD license.
 # For details see the accompanying COPYING-CMAKE-SCRIPTS file.
 
+
+# this is required now by cmake 2.6 and so must not be skipped by if(KDE4_FOUND) below
+cmake_minimum_required(VERSION 2.8.9 FATAL_ERROR)
+# set the cmake policies to the 2.4.x compatibility settings (may change for KDE 4.3)
+cmake_policy(VERSION 2.4.5)
+
+# Policy 25=new: identify Apple Clang as AppleClang to ensure
+#                consistency in compiler feature determination
+# Policy 60=new: don't rewrite ${prefix}/lib/libfoo.dylib as -lfoo
+cmake_policy(SET CMP0025 NEW)
+cmake_policy(SET CMP0060 NEW)
+
 # Only do something if it hasn't been found yet
 if(NOT KDE4_FOUND)
 
@@ -1088,7 +1100,7 @@ if (CMAKE_SYSTEM_NAME MATCHES Linux OR CMAKE_SYSTEM_NAME STREQUAL GNU)
 endif (CMAKE_SYSTEM_NAME MATCHES Linux OR CMAKE_SYSTEM_NAME STREQUAL GNU)
 
 if (UNIX)
-   set ( _KDE4_PLATFORM_DEFINITIONS "${_KDE4_PLATFORM_DEFINITIONS} -D_LARGEFILE64_SOURCE")
+   set ( _KDE4_PLATFORM_DEFINITIONS "${_KDE4_PLATFORM_DEFINITIONS} ")
 
    check_cxx_source_compiles("
 #include <sys/types.h>
@@ -1217,6 +1229,7 @@ if (CMAKE_COMPILER_IS_GNUCXX)
    # visibility support
    check_cxx_compiler_flag(-fvisibility=hidden __KDE_HAVE_GCC_VISIBILITY)
    set( __KDE_HAVE_GCC_VISIBILITY ${__KDE_HAVE_GCC_VISIBILITY} CACHE BOOL "GCC support for hidden visibility")
+   message(AUTHOR_WARNING "__KDE_HAVE_GCC_VISIBILITY=${__KDE_HAVE_GCC_VISIBILITY}")
 
    # get the gcc version
    exec_program(${CMAKE_C_COMPILER} ARGS ${CMAKE_C_COMPILER_ARG1} --version OUTPUT_VARIABLE _gcc_version_info)
@@ -1284,13 +1297,15 @@ if (CMAKE_COMPILER_IS_GNUCXX)
          set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Werror=return-type -fvisibility-inlines-hidden")
       endif (GCC_IS_NEWER_THAN_4_2)
    else (__KDE_HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_1 AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR AND NOT WIN32)
+	 message(WARNING "Turning off hidden visibility")
       set (__KDE_HAVE_GCC_VISIBILITY 0)
    endif (__KDE_HAVE_GCC_VISIBILITY AND GCC_IS_NEWER_THAN_4_1 AND NOT _GCC_COMPILED_WITH_BAD_ALLOCATOR AND NOT WIN32)
 
 endif (CMAKE_COMPILER_IS_GNUCXX)
 
 
-if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
+# Detect Clang the proper way (= including AppleClang)
+if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    _DETERMINE_GCC_SYSTEM_INCLUDE_DIRS(c++ _dirs)
    set(CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES
        ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES} ${_dirs})
@@ -1335,6 +1350,7 @@ if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
       set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -pthread")
    endif (CMAKE_SYSTEM_NAME STREQUAL GNU)
 
+   message(AUTHOR_WARNING "Building with Clang thus with hidden visibility")
    set(__KDE_HAVE_GCC_VISIBILITY TRUE)
 
    # check that Qt defines Q_DECL_EXPORT as __attribute__ ((visibility("default")))
