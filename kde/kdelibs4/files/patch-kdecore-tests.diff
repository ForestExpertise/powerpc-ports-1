diff --git a/kdecore/tests/CMakeLists.txt b/kdecore/tests/CMakeLists.txt
index 79ee90d..10b74f0 100644
--- a/kdecore/tests/CMakeLists.txt
+++ b/kdecore/tests/CMakeLists.txt
@@ -182,8 +182,12 @@ set_target_properties(klibloadertestmodule4 PROPERTIES SKIP_BUILD_RPATH FALSE BU
 
 endif (NOT WIN32)
 
-########### kcompositejobtest ###############
-
-set(kcompositejobtest_SRCS kcompositejobtest.cpp)
-kde4_add_unit_test(kcompositejobtest TESTNAME kdecore-kcompositejobtest ${kcompositejobtest_SRCS})
-target_link_libraries(kcompositejobtest ${KDE4_KDECORE_LIBS} ${QT_QTTEST_LIBRARY} )
+########### backtracetest ###############
+# this is a test not depending on any KDE or Qt libraries
+if (NOT WIN32) # TODO: is this possible on win32?
+set(backtracetest_SRCS backtracetest.cpp)
+kde4_add_executable(backtracetest NOGUI TEST ${backtracetest_SRCS})
+if (CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
+    target_link_libraries(backtracetest "-lexecinfo")
+endif(CMAKE_SYSTEM_NAME MATCHES "FreeBSD")
+endif (NOT WIN32)
diff --git a/kdecore/tests/backtracetest.cpp b/kdecore/tests/backtracetest.cpp
new file mode 100644
index 0000000..c310354
--- /dev/null
+++ b/kdecore/tests/backtracetest.cpp
@@ -0,0 +1,141 @@
+/* This file is part of the KDE project
+ *
+ *   Copyright (C) 2014 Ren√© Bertin (rjvbertin@gmail.com)
+ *   Copyright (C) 1997 Matthias Kalle Dalheimer (kalle@kde.org)
+ *                 2002 Holger Freyther (freyther@kde.org)
+ *
+ *   This library is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU Library General Public License as published
+ *   by the Free Software Foundation; either version 2 of the License or
+ *   ( at your option ) version 3 or, at the discretion of KDE e.V.
+ *   ( which shall act as a proxy as in section 14 of the GPLv3 ), any later version.
+ *
+ *   This library is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *   Library General Public License for more details.
+ *
+ *   You should have received a copy of the GNU Library General Public License
+ *   along with this library; see the file COPYING.LIB.  If not, write to
+ *   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+ *   Boston, MA 02110-1301, USA.
+ */
+
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <stddef.h>
+#include <execinfo.h>
+#include <errno.h>
+#include <string.h>
+
+#ifdef __cplusplus
+#include <cxxabi.h>
+#include <string>
+
+using namespace std;
+const char *maybeDemangledName(char *name)
+{
+    const int len = strlen(name);
+    string in = name;
+#ifdef __APPLE__
+    const int mangledNameStart = in.find(" _"), startOffset = 1;
+#elif defined(__FreeBSD__)
+    const int mangledNameStart = in.find(" <_"), startOffset = 2;
+#elif defined(__sun) && defined(__SVR4)
+    const int mangledNameStart = in.find("'"), startOffset = 0;
+#else
+    const int mangledNameStart = in.find("(_"), startOffset = 1;
+#endif
+    if (mangledNameStart >= 0) {
+        int mangledNameEnd = in.find('+', mangledNameStart + 2);
+        // check for and suppress trailing whitespace:
+        if (mangledNameEnd > 1 && isspace(name[mangledNameEnd-1])) {
+            mangledNameEnd -= 1;
+            while (mangledNameEnd > 1 && isspace(name[mangledNameEnd-1])) {
+                --mangledNameEnd;
+            }
+        }
+        if (mangledNameEnd >= 0) {
+            int status;
+            // if we forget about this line and the one that undoes its effect we don't change the
+            // internal data of the QByteArray::fromRawData() ;)
+            const char endChar = name[mangledNameEnd];
+            name[mangledNameEnd] = 0;
+            char *demangled = abi::__cxa_demangle(name + mangledNameStart + startOffset, 0, 0, &status);
+            name[mangledNameEnd] = endChar;
+            if (demangled) {
+                return demangled;
+            }
+        }
+    }
+    return NULL;
+}
+
+#endif
+
+#ifdef __cplusplus
+int show_backtrace(int levels=-1)
+#else
+int show_backtrace(int levels)
+#endif
+{
+    void* trace[256];
+    char **strings = NULL;
+    int i, n;
+
+    errno = 0;
+#ifndef __has_feature
+#define __has_feature(x) 0
+#endif
+#if __has_feature(blocks)
+    char **(^traceblock)(void**, int, int*) = ^char**(void **buf, int buflen, int *N) {
+        *N = backtrace(buf, buflen);
+        if( !*N ){
+            fprintf( stderr, "No backtrace info (%s)\n", strerror(errno) );
+            return NULL;
+        }
+        errno = 0;
+        return backtrace_symbols(buf, *N);
+    };
+    strings = traceblock(trace, 256, &n);
+#else
+    n = backtrace(trace, 256);
+    if( !n ){
+        fprintf( stderr, "No backtrace info (%s)\n", strerror(errno) );
+        return(-1);
+    }
+    errno = 0;
+    strings = backtrace_symbols( trace, n );
+#endif
+
+#ifdef __cplusplus
+    if( levels >= 0 && levels < n ){
+	    n = levels;
+    }
+#endif
+    if( strings ){
+        for( i = 0; i < n; ++i ){
+#ifdef __cplusplus
+            const char *demangled = maybeDemangledName(strings[i]);
+            fprintf( stdout, "%d: %s", i, strings[i] );
+            if( demangled ){
+                fprintf( stdout, " -> '%s'", demangled );
+                free((void*)demangled);
+            }
+            fputc( '\n', stdout );
+#else
+            fprintf( stdout, "%d: %s\n", i, strings[i] );
+#endif
+        }
+        free(strings);
+        return 0;
+    }
+    fprintf( stderr, "Got backtrace info but no symbol info (%s)\n", strerror(errno) );
+    return -1;
+}
+
+int main(int argc, char *argv[] )
+{
+    exit( show_backtrace(-1) );
+}
diff --git a/kdecore/tests/kdebugtest.cpp b/kdecore/tests/kdebugtest.cpp
index 21efbc0..547d0a0 100644
--- a/kdecore/tests/kdebugtest.cpp
+++ b/kdecore/tests/kdebugtest.cpp
@@ -77,6 +77,10 @@ public:
     pmf func_pmf() { kDebug(); return 0; }
     uglypmf func_uglypmf(uglypmf = 0) { kDebug(); return 0; }
     QMap<QString, uglypmf> func_uglypmf2() { kDebug(); return QMap<QString, uglypmf>(); }
+    void func_backtrace()
+    {
+        kWarning() << "Backtrace from line" << __LINE__ << ":" << kBacktrace();
+    }
 
     void testBlock()
     {
@@ -133,6 +137,7 @@ public:
             func_pmf();
             func_uglypmf();
             func_uglypmf2();
+            func_backtrace();
         }
 };
 
