diff --git a/kutils/CMakeLists.txt b/kutils/CMakeLists.txt
index b3eb3d6..a56b4aa 100644
--- a/kutils/CMakeLists.txt
+++ b/kutils/CMakeLists.txt
@@ -58,6 +58,9 @@ endif (Q_WS_X11)
 
 kde4_add_library(kidletime ${LIBRARY_TYPE} ${kidletime_LIB_SRCS})
 target_link_libraries(kidletime LINK_PUBLIC kdecore kdeui ${QT_QTGUI_LIBRARY})
+if (Q_WS_MAC)
+    target_link_libraries(kidletime "-framework IOKit")
+endif (Q_WS_MAC)
 target_link_libraries(kidletime LINK_PRIVATE ${KDE4_KDEUI_LIBS})
 
 if (Q_WS_X11)
diff --git a/kutils/kidletime/macpoller.cpp b/kutils/kidletime/macpoller.cpp
index c2a0845..cb5671d 100644
--- a/kutils/kidletime/macpoller.cpp
+++ b/kutils/kidletime/macpoller.cpp
@@ -20,6 +20,10 @@
 */
 
 #include "macpoller.h"
+#include <CoreServices/CoreServices.h>
+
+#include <QDebug>
+#include <QTimer>
 
 // Why does Apple have to make this so complicated?
 static OSStatus LoadFrameworkBundle(CFStringRef framework, CFBundleRef *bundlePtr)
@@ -76,6 +80,7 @@ static OSStatus LoadFrameworkBundle(CFStringRef framework, CFBundleRef *bundlePt
     return err;
 }
 
+#ifndef USE_IOKIT
 pascal void MacPoller::IdleTimerAction(EventLoopTimerRef, EventLoopIdleTimerMessage inState, void* inUserData)
 {
     Q_ASSERT(inUserData);
@@ -102,22 +107,51 @@ typedef OSStatus(*InstallEventLoopIdleTimerPtr)(EventLoopRef inEventLoop,
         EventLoopIdleTimerUPP    inTimerProc,
         void *               inTimerData,
         EventLoopTimerRef *  outTimer);
+#endif
+
+typedef OSErr(*UpdateSystemActivityPtr)(UInt8 activity);
+static UpdateSystemActivityPtr updateSystemActivity;
 
 MacPoller::MacPoller(QWidget *parent)
         : AbstractSystemPoller(parent)
+#ifndef USE_IOKIT
         , m_timerRef(0)
         , m_secondsIdle(0)
+#else
+        , ioPort(NULL)
+        , ioIterator(NULL)
+        , ioObject(NULL)
+        , m_idleTimer(NULL)
+#endif
         , m_catch(false)
 {
 }
 
 MacPoller::~MacPoller()
 {
+#ifdef USE_IOKIT
+    unloadPoller();
+    delete m_idleTimer;
+#endif
 }
 
 void MacPoller::unloadPoller()
 {
+#ifdef USE_IOKIT
+    if (m_idleTimer) {
+        m_idleTimer->stop();
+    }
+    if (ioObject) {
+        IOObjectRelease( ioObject );
+        ioObject = NULL;
+    }
+    if (ioIterator) {
+        IOObjectRelease( ioIterator );
+        ioIterator = NULL;
+    }
+#else
     RemoveEventLoopTimer(m_timerRef);
+#endif
 }
 
 bool MacPoller::isAvailable()
@@ -128,10 +162,50 @@ bool MacPoller::isAvailable()
 bool MacPoller::setUpPoller()
 {
     // May already be init'ed.
+#ifdef USE_IOKIT
+    if (ioObject) {
+        return true;
+    }
+#else
     if (m_timerRef) {
         return true;
     }
+#endif
 
+    CFBundleRef csBundle;
+    if (LoadFrameworkBundle(CFSTR("CoreServices.framework"), &csBundle) == noErr) {
+        updateSystemActivity = (UpdateSystemActivityPtr) CFBundleGetFunctionPointerForName(csBundle, CFSTR("UpdateSystemActivity"));
+        if (!updateSystemActivity) {
+            qWarning() << "failed to load UpdateSystemActivity from CoreServices.framework";
+        }
+    }
+    else{
+        updateSystemActivity = NULL;
+        qWarning() << "failed to load CoreServices.framework: UpdateSystemActivity not available";
+    }
+
+#ifdef USE_IOKIT
+    kern_return_t status;
+    // establish the connection with I/O Kit, on the default port (MACH_PORT_NULL).
+    status = IOMasterPort( MACH_PORT_NULL, &ioPort );
+    if (status != KERN_SUCCESS) {
+        return false;
+    }
+    // We will use the IOHID service which will allow us to know about user interaction.
+    // Get an iterator on the I/O Kit services, so we can access IOHID:
+    status = IOServiceGetMatchingServices( ioPort, IOServiceMatching("IOHIDSystem"), &ioIterator );
+    if (status != KERN_SUCCESS) {
+        ioIterator = NULL;
+        return false;
+    }
+    // get the actual IOHID service object:
+    ioObject = IOIteratorNext(ioIterator);
+    if (!ioObject) {
+        return false;
+    }
+    IOObjectRetain(ioObject);
+    IOObjectRetain(ioIterator);
+#else
     // According to the docs, InstallEventLoopIdleTimer is new in 10.2.
     // According to the headers, it has been around since 10.0.
     // One of them is lying.  We'll play it safe and weak-link the function.
@@ -155,10 +229,21 @@ bool MacPoller::setUpPoller()
     if ((*myInstallEventLoopIdleTimer)(GetMainEventLoop(), kEventDurationSecond, kEventDurationSecond, timerUPP, this, &m_timerRef)) {
         return true;
     }
+#endif
 
     return false;
 }
 
+bool MacPoller::additionalSetUp()
+{
+#ifdef USE_IOKIT
+    m_idleTimer = new QTimer(this);
+    connect(m_idleTimer, SIGNAL(timeout()), this, SLOT(checkForIdle()));
+    qDebug() << "MacPoller::additionalSetUp() created m_idleTimer=" << m_idleTimer;
+#endif
+    return true;
+}
+
 QList<int> MacPoller::timeouts() const
 {
     return m_timeouts;
@@ -172,8 +257,35 @@ void MacPoller::addTimeout(int nextTimeout)
 
 int MacPoller::poll()
 {
+#ifdef USE_IOKIT
+    int idle = 0;
+    kern_return_t status;
+    CFTypeRef cfIdle;
+    CFTypeID type;
+    uint64_t time = 0;
+    CFMutableDictionaryRef properties = NULL;
+    status = IORegistryEntryCreateCFProperties( ioObject, &properties, kCFAllocatorDefault, 0 );
+    if (status == KERN_SUCCESS && properties) {
+        cfIdle = CFDictionaryGetValue( properties, CFSTR("HIDIdleTime") );
+        if (cfIdle) {
+            CFRetain(cfIdle);
+            // cfIdle can have different types: handle them properly:
+            type = CFGetTypeID(cfIdle);
+            if (type == CFDataGetTypeID()) {
+                CFDataGetBytes( (CFDataRef)cfIdle, CFRangeMake( 0, sizeof(time) ), (UInt8*)&time );
+            }
+            else if (type == CFNumberGetTypeID()) {
+                CFNumberGetValue( (CFNumberRef)cfIdle, kCFNumberSInt64Type, &time );
+            }
+            CFRelease(cfIdle);
+        }
+        CFRelease( (CFTypeRef)properties );
+        // convert nanoseconds to seconds:
+        idle = int(time >> 30);
+    }
+#else
     int idle = m_secondsIdle * 1000;
-
+#endif
     // Check if we reached a timeout..
     foreach(int i, m_timeouts) {
         if ((i - idle < 1000 && i > idle) || (idle - i < 1000 && idle > i)) {
@@ -181,7 +293,6 @@ int MacPoller::poll()
             emit timeoutReached(i);
         }
     }
-
     return idle;
 }
 
@@ -198,25 +309,52 @@ void MacPoller::removeTimeout(int timeout)
 
 void MacPoller::catchIdleEvent()
 {
+#ifdef USE_IOKIT
+    if (m_idleTimer) {
+        m_idleTimer->start(800);
+    }
+#else
     m_catch = true;
+#endif
 }
 
 void MacPoller::stopCatchingIdleEvents()
 {
+#ifdef USE_IOKIT
+    if (m_idleTimer) {
+        m_idleTimer->stop();
+    }
+#endif
     m_catch = false;
 }
 
+void MacPoller::checkForIdle()
+{
+#ifdef USE_IOKIT
+    int idle = poll();
+    qDebug() << "MacPoller::checkForIdle(): idle time =" << double(idle/1000.0);
+    if (idle < 1000) {
+        stopCatchingIdleEvents();
+        emit resumingFromIdle();
+    }
+#endif
+}
+
 void MacPoller::triggerResume()
 {
+#ifndef USE_IOKIT
     if (m_catch) {
         emit resumingFromIdle();
         stopCatchingIdleEvents();
     }
+#endif
 }
 
 void MacPoller::simulateUserActivity()
 {
-    // TODO
+    if (updateSystemActivity) {
+        (*updateSystemActivity)(UsrActivity);
+    }
 }
 
 #include "macpoller.moc"
diff --git a/kutils/kidletime/macpoller.h b/kutils/kidletime/macpoller.h
index c400fbd..7751b29 100644
--- a/kutils/kidletime/macpoller.h
+++ b/kutils/kidletime/macpoller.h
@@ -20,8 +20,14 @@
 #define MACPOLLER_H
 
 #include "abstractsystempoller.h"
+#include <QTimer>
 
+#define USE_IOKIT
+#ifdef USE_IOKIT
+#include <IOKit/IOKitLib.h>
+#else
 #include <Carbon/Carbon.h>
+#endif
 
 class MacPoller: public AbstractSystemPoller
 {
@@ -35,7 +41,9 @@ public:
     bool setUpPoller();
     void unloadPoller();
 
+#ifndef USE_IOKIT
     static pascal void IdleTimerAction(EventLoopTimerRef, EventLoopIdleTimerMessage inState, void* inUserData);
+#endif
 
 public slots:
     void addTimeout(int nextTimeout);
@@ -49,11 +57,20 @@ public slots:
 
 private slots:
     int poll();
+    void checkForIdle();
 
 private:
     QList<int> m_timeouts;
+#ifdef USE_IOKIT
+    mach_port_t ioPort;
+    io_iterator_t ioIterator;
+    io_object_t ioObject;
+    QTimer *m_idleTimer;
+    bool additionalSetUp();
+#else
     EventLoopTimerRef m_timerRef;
     int m_secondsIdle;
+#endif
     bool m_catch;
 };
 
