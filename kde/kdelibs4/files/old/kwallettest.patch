--- kdelibs-4.12.5//kdeui/tests/orig.CMakeLists.txt	2014-04-28 06:37:51.000000000 +0200
+++ kdelibs-4.12.5//kdeui/tests/CMakeLists.txt	2014-08-08 22:39:28.000000000 +0200
@@ -7,6 +7,7 @@
 # The alternative (which requires Qt>=4.6) is #include <QTestGui>
 add_definitions(-DQT_GUI_LIB)
 
+option(MAC_USE_OSXKEYCHAIN "On OS X, use the keychain as backend for kwallet, instead of kwalletd.")
 
 MACRO(KDEUI_UNIT_TESTS)
        FOREACH(_testname ${ARGN})
@@ -154,6 +155,11 @@
   kpixmapsequenceoverlaypaintertest
 )
 
+if (Q_WS_MAC AND MAC_USE_OSXKEYCHAIN)
+  set_source_files_properties(kwallettest.cpp PROPERTIES 
+                               COMPILE_FLAGS -DMAC_USE_OSXKEYCHAIN)
+endif(Q_WS_MAC AND MAC_USE_OSXKEYCHAIN)
+
 if (NOT KDE_NO_DEPRECATED)
 KDEUI_EXECUTABLE_TESTS(
   keditlistboxtest
--- kdelibs-4.12.5/kdeui/tests/orig.kwallettest.cpp	2014-04-28 06:37:51.000000000 +0200
+++ kdelibs-4.12.5/kdeui/tests/kwallettest.cpp	2014-09-03 01:56:15.000000000 +0200
@@ -32,11 +32,12 @@
 
 void KWalletTest::testWallet()
 {
-  QString testWallet = "kdewallet";
+  QString testWallet = "kwallettestWallet";
   QString testFolder = "wallettestfolder";
   QString testKeys[] = { "testKey", "account-302948", "\\", "/abc",
                          "a@b.c" };
   QByteArray testValues[] = { "test", "@(!ยง\"%&", "", ".test", "\\" };
+  QMap<QString,QString> pwmap;
   int numTests = 5;
 
   // Start kdeinit4, so that the wallet damon is started in the background
@@ -49,15 +50,24 @@
 
   // open
   Wallet *wallet = Wallet::openWallet( testWallet, w->winId(), Wallet::Synchronous );
-  if ( wallet == 0 )
-    kDebug() << "Couldn't open the wallet. Maybe the wallet daemon is not running?";
+  if ( wallet == 0 ){
+    kWarning() << "Couldn't open the wallet. Maybe the wallet daemon is not running?";
+  }
+  else{
+    kWarning() << "Opened wallet" << wallet->walletName();
+  }
   QVERIFY( wallet != 0 );
   QVERIFY( Wallet::isOpen( testWallet ) );
+  kWarning() << "Wallet list:" << Wallet::walletList();
+
+  // check on a couple of existing items, preferably at least 1 "internet account" and 1 "application password"
+  // OSXKeychain::readEntry( "existing name", "existing account", &value, NULL, NULL )
 
   // create folder
   wallet->createFolder( testFolder );
   QVERIFY( wallet->hasFolder( testFolder ) );
   wallet->setFolder( testFolder );
+  kWarning() << "Wallet's folder list:" << wallet->folderList();
   QVERIFY( wallet->currentFolder() == testFolder );
   QVERIFY( wallet->folderList().contains( testFolder ) );
 
@@ -70,10 +80,36 @@
     QVERIFY( readEntry == testValues[i] );
   }
 
+  pwmap[QString("Bugzilla_login")] = QString("bugs@kde.org");
+  pwmap[QString("Bugzilla_password")] = QString("buggyPassw0rd");
+  kWarning() << "pwmap=" << pwmap;
+
+  QMap<QString,QString> v;
+  QVERIFY( !wallet->writeMap( "https://bugs.kde.org/#", pwmap ) );
+  QVERIFY( wallet->hasEntry("https://bugs.kde.org/#") );
+  QVERIFY( !wallet->readMap( "https://bugs.kde.org/#", v ) );
+  QVERIFY( v == pwmap );
+  // do it again
+  QVERIFY( !wallet->writeMap( "https://bugs.kde.org/#", pwmap ) );
+  QVERIFY( wallet->hasEntry("https://bugs.kde.org/#") );
+  QVERIFY( !wallet->readMap( "https://bugs.kde.org/#", v ) );
+  QVERIFY( v == pwmap );
+
+  QVERIFY( wallet->entryType( testKeys[0] ) == Wallet::Stream );
+  QVERIFY( wallet->entryType( "https://bugs.kde.org/#" ) == Wallet::Map );
+
+  QVERIFY( !wallet->renameEntry( "https://bugs.kde.org/#", "kdeBugs" ) );
+  QVERIFY( wallet->hasEntry("kdeBugs") );
+  QVERIFY( !wallet->readMap( "kdeBugs", v ) );
+  QVERIFY( v == pwmap );
+
   // close
   wallet->sync();
-  Wallet::closeWallet( "kdewallet", true );
-  QVERIFY( !Wallet::isOpen( "kdewallet" ) );
+  QStringList l = wallet->entryList();
+  kWarning() << "Entry list:" << l;
+  QVERIFY( l.size() == 6 );
+  Wallet::closeWallet( testWallet, true );
+  QVERIFY( !Wallet::isOpen( testWallet ) );
 
   // test for key - closed wallet
   for ( int i = 0; i < 5; i++ ) {
@@ -108,13 +144,21 @@
     QVERIFY( readEntry == testValues[i] );
   }
 
+  // remove those many test keys
+  for ( int i = 0; i < numTests; i++ ) {
+    QVERIFY( !wallet->removeEntry( testKeys[i] ) );
+  }
+
+#ifndef MAC_USE_OSXKEYCHAIN
   // delete folder
   wallet->removeFolder( testFolder );
   QVERIFY( !wallet->hasFolder( testFolder ) );
+#endif
 
   // close
-  Wallet::closeWallet( "kdewallet", true );
-  QVERIFY( !Wallet::isOpen( "kdewallet" ) );
+  Wallet::closeWallet( testWallet, true );
+  QVERIFY( !Wallet::isOpen( testWallet ) );
+  QVERIFY( !Wallet::deleteWallet( testWallet ) );
 }
 
 QTEST_KDEMAIN(KWalletTest, GUI)
