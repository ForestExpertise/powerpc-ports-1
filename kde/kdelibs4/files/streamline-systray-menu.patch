diff --git kdeui/notifications/kstatusnotifieritem.cpp kdeui/notifications/kstatusnotifieritem.cpp
index 1b15d40..9cb8405 100644
--- kdelibs-4.12.5/kdeui/notifications/kstatusnotifieritem.cpp
+++ kdelibs-4.12.5/kdeui/notifications/kstatusnotifieritem.cpp
@@ -683,6 +683,9 @@ bool KStatusNotifierItemPrivate::checkVisibility(QPoint pos, bool perform)

         return false;
     }
+#else
+    Q_UNUSED(pos);
+    Q_UNUSED(perform);
 #endif

     return true;
@@ -745,8 +748,20 @@ void KStatusNotifierItemPrivate::init(const QString &extraId)
 
     //create a default menu, just like in KSystemtrayIcon
     KMenu *m = new KMenu(associatedWidget);
+#ifdef Q_OS_MAC
+    // emulate addTitle/setTitle by adding an inactive menu item.
+    titleAction = m->addAction( qApp->windowIcon(), KGlobal::mainComponent().aboutData()->programName() );
+    titleAction->setEnabled(false);
+    titleAction->setIconVisibleInMenu(true);
+    m->addAction( titleAction );
+    m->addSeparator();
+    kDebug() << "### Added SystemTray titleAction=" << titleAction;
+    kDebug() << "### SystemTray for app" << qApp << "=" << KGlobal::mainComponent().aboutData()->programName()
+        << "/" << KGlobal::caption() << "with icon" << qApp->windowIcon().name();
+#else
     titleAction = m->addTitle(qApp->windowIcon(), KGlobal::caption());
     m->setTitle(KGlobal::mainComponent().aboutData()->programName());
+#endif
     q->setContextMenu(m);
 
     KStandardAction::quit(q, SLOT(maybeQuit()), actionCollection);
#diff --git kdeui/widgets/kmenu.cpp kdeui/widgets/kmenu.cpp
#index 7dab149..94a7751 100644
#--- kdelibs-4.12.5/kdeui/widgets/kmenu.cpp
#+++ kdelibs-4.12.5/kdeui/widgets/kmenu.cpp
#@@ -167,6 +167,40 @@ KMenu::~KMenu()
#     delete d;
# }
# 
#+#ifdef Q_OS_MAC
#+void KMenu::addAction(QAction *action)
#+{
#+    if( action ){
#+        if( !action->isIconVisibleInMenu() ){
#+            action->setIcon(QIcon());
#+        }
#+        QMenu::addAction(action);
#+    }
#+}
#+
#+#   ifdef Q_NO_USING_KEYWORD
#+QAction *KMenu::addAction(const QString &text)
#+{
#+    return QMenu::addAction(text);
#+}
#+
#+QAction *KMenu::addAction(const QIcon &icon, const QString &text)
#+{
#+    return QMenu::addAction(icon,text);
#+}
#+
#+QAction *KMenu::addAction(const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut)
#+{
#+    return QMenu::addAction(text, receiver, member, shortcut);
#+}
#+
#+QAction *KMenu::addAction(const QIcon &icon, const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut)
#+{
#+    return QMenu::addAction(icon, text, receiver, member, shortcut);
#+}
#+#   endif // Q_NO_USING_KEYWORD
#+#endif // Q_OS_MAC
#+
# QAction* KMenu::addTitle(const QString &text, QAction* before)
# {
#     return addTitle(QIcon(), text, before);
#diff --git kdeui/widgets/kmenu.h kdeui/widgets/kmenu.h
#index f96e263..79be594 100644
#--- kdelibs-4.12.5/kdeui/widgets/kmenu.h
#+++ kdelibs-4.12.5/kdeui/widgets/kmenu.h
#@@ -60,6 +60,22 @@ public:
#      */
#     ~KMenu();
# 
#+#ifdef Q_OS_MAC
#+#   ifndef Q_NO_USING_KEYWORD
#+    using QMenu::addAction;
#+#   endif
#+    /**
#+     * Appends the action action to the menu's list of actions.
#+     * Overloaded from QMenu to force Qt to honour action->isIconVisibleInMenu().
#+     */
#+    void addAction(QAction *action);
#+#   ifdef Q_NO_USING_KEYWORD
#+    QAction *addAction(const QString &text);
#+    QAction *addAction(const QIcon &icon, const QString &text);
#+    QAction *addAction(const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);
#+    QAction *addAction(const QIcon &icon, const QString &text, const QObject *receiver, const char* member, const QKeySequence &shortcut = 0);
#+#   endif //Q_NO_USING_KEYWORD
#+#endif //Q_OS_MAC
#     /**
#      * Inserts a title item with no icon.
#      */
