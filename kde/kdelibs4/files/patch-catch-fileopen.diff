diff --git a/kdeui/kernel/kapplication.cpp b/kdeui/kernel/kapplication.cpp
index b093034..eb6f248 100644
--- a/kdeui/kernel/kapplication.cpp
+++ b/kdeui/kernel/kapplication.cpp
@@ -228,6 +238,9 @@ public:
 
   KConfig* pSessionConfig; //instance specific application config object
   bool bSessionManagement;
+#if defined(Q_OS_MAC) || defined(Q_OS_SYMBIAN)
+  KApplicationFileOpenHandler *fileOpenHandler;
+#endif
 };
 
 
@@ -251,6 +264,19 @@ static void installSigpipeHandler()
 #endif
 }
 
+bool KApplicationFileOpenHandler::eventFilter(QObject *obj, QEvent *event)
+{
+#if defined(Q_OS_MAC) || defined(Q_OS_SYMBIAN)
+    if (event->type() == QEvent::FileOpen) {
+        QFileOpenEvent *foe = static_cast<QFileOpenEvent*>(event);
+        //qDebug() << Q_FUNC_INFO << "FileOpen event" << foe << " file=" << foe->file() << " URL=" << foe->url();
+        emit kapp->openURLRequest(foe->url());
+        return false;
+    }
+#endif
+    return QObject::eventFilter(obj, event);
+}
+
 void KApplication::installX11EventFilter( QWidget* filter )
 {
     if ( !filter )
@@ -598,6 +651,14 @@ void KApplicationPrivate::init(bool GUIenabled)
 #ifdef Q_WS_WIN
   KApplication_init_windows();
 #endif
+#if defined(Q_OS_MAC) || defined(Q_OS_SYMBIAN)
+  if (!fileOpenHandler) {
+      fileOpenHandler = new KApplicationFileOpenHandler(KApplication::KApp);
+      if (fileOpenHandler) {
+          KApplication::KApp->installEventFilter(fileOpenHandler);
+      }
+  }
+#endif
 }
 
 KApplication* KApplication::kApplication()
diff --git a/kdeui/kernel/kapplication.h b/kdeui/kernel/kapplication.h
index fa2ab26..c242506 100644
--- a/kdeui/kernel/kapplication.h
+++ b/kdeui/kernel/kapplication.h
@@ -445,6 +465,15 @@ Q_SIGNALS:
   */
   void saveYourself();
 
+  /**
+   * On OS X, Qt will send a QEvent::FileOpen event to the application
+   * instance when the user initiates a request to open a file or URL
+   * via the Finder (or more generally, LaunchServices). This event
+   * is caught by KApplication::event(), and raised as the openURLRequest
+   * signal with the requested URL.
+   */
+  void openURLRequest(const QUrl &url);
+
 protected:
   /**
    * @internal Used by KUniqueApplication
@@ -481,6 +510,17 @@ private:
   Q_PRIVATE_SLOT(d, void _k_x11FilterDestroyed())
   Q_PRIVATE_SLOT(d, void _k_checkAppStartedSlot())
   Q_PRIVATE_SLOT(d, void _k_slot_KToolInvocation_hook(QStringList&, QByteArray&))
+  friend class KApplicationFileOpenHandler;
+};
+
+class KApplicationFileOpenHandler : public QObject
+{
+    Q_OBJECT
+public:
+    KApplicationFileOpenHandler(QObject *parent=0)
+        : QObject(parent)
+    {}
+    bool eventFilter(QObject *obj, QEvent *event);
 };
 
 #endif
