From 01c2278de2c606716f7c16fbc50ecbb7c79f1e3d Mon Sep 17 00:00:00 2001
From: Sergey Fedorov <barracuda@macos-powerpc.org>
Date: Wed, 25 Jun 2025 00:23:53 +0800
Subject: [PATCH] kinfocenter: support Apple

---
 kinfocenter/Modules/base/info_osx.cpp     |  75 +++++
 kinfocenter/Modules/base/os_current.cpp   |  14 +-
 kinfocenter/Modules/memory/memory.cpp     | 367 +++++++++++-----------
 kinfocenter/Modules/memory/memory_osx.cpp |  95 ++++++
 4 files changed, 358 insertions(+), 193 deletions(-)
 create mode 100644 kinfocenter/Modules/base/info_osx.cpp
 create mode 100644 kinfocenter/Modules/memory/memory_osx.cpp

diff --git a/kinfocenter/Modules/base/info_osx.cpp b/kinfocenter/Modules/base/info_osx.cpp
new file mode 100644
index 00000000..1866f352
--- /dev/null
+++ b/kinfocenter/Modules/base/info_osx.cpp
@@ -0,0 +1,75 @@
+/*
+ *  Copyright (c) 2003 Benjamin Reed <ranger@befunk.com>
+ *
+ *  info_osx.cpp is part of the KDE program kcminfo.  Copied wholesale
+ *  from info_fbsd.cpp =)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+/*
+ * all following functions should return true, when the Information
+ * was filled into the lBox-Widget. Returning false indicates that
+ * information was not available.
+ */
+
+#include <sys/types.h>
+#include <sys/sysctl.h>
+
+#include <fstab.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#include <iostream>
+
+#include <QFile>
+#include <QFontMetrics>
+
+#include <QTextStream>
+
+#include <kdebug.h>
+
+#include <mach/mach.h>
+#include <mach-o/arch.h>
+
+#include <machine/limits.h>
+
+bool GetInfo_IRQ(QTreeWidget*) {
+    return false;
+}
+
+bool GetInfo_DMA(QTreeWidget*) {
+    return false;
+}
+
+bool GetInfo_PCI(QTreeWidget*) {
+    return false;
+}
+
+bool GetInfo_IO_Ports(QTreeWidget*) {
+    return false;
+}
+
+bool GetInfo_SCSI(QTreeWidget*) {
+    return false;
+}
+
+bool GetInfo_XServer_and_Video(QTreeWidget* tree) {
+#if HAVE_X11
+    return GetInfo_XServer_Generic(tree);
+#else
+    return false;
+#endif
+}
diff --git a/kinfocenter/Modules/base/os_current.cpp b/kinfocenter/Modules/base/os_current.cpp
index 3213153d..ad1444cb 100644
--- a/kinfocenter/Modules/base/os_current.cpp
+++ b/kinfocenter/Modules/base/os_current.cpp
@@ -24,15 +24,17 @@ License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 #include "os_base.h"
 
 #ifdef Q_OS_LINUX
-	#include "info_linux.cpp"
+    #include "info_linux.cpp"
 #elif defined(Q_OS_FREEBSD) || defined(Q_OS_DRAGONFLY)
-	#include "info_fbsd.cpp"
+    #include "info_fbsd.cpp"
 #elif defined(Q_OS_NETBSD)
-	#include "info_netbsd.cpp"
+    #include "info_netbsd.cpp"
 #elif defined(Q_OS_OPENBSD)
-	#include "info_openbsd.cpp"
+    #include "info_openbsd.cpp"
 #elif defined(Q_OS_SOLARIS)
-	#include "info_solaris.cpp"
+    #include "info_solaris.cpp"
+#elif defined(__APPLE__)
+    #include "info_osx.cpp"
 #else
-	#include "info_generic.cpp"	/* Default for unsupported systems.... */
+    #include "info_generic.cpp" /* Default for unsupported systems. */
 #endif
diff --git a/kinfocenter/Modules/memory/memory.cpp b/kinfocenter/Modules/memory/memory.cpp
index 1d43be6d..4c0f53ee 100644
--- a/kinfocenter/Modules/memory/memory.cpp
+++ b/kinfocenter/Modules/memory/memory.cpp
@@ -36,7 +36,7 @@
 #include <kdialog.h>
 #include <kdebug.h>
 
-#include <sys/param.h>		/* for BSD */
+#include <sys/param.h>        /* for BSD */
 
 #include <klocale.h>
 #include <kglobal.h>
@@ -62,240 +62,233 @@ static t_memsize memoryInfos[MEM_LAST_ENTRY];
 
 static QLabel *memorySizeLabels[MEM_LAST_ENTRY][2];
 
-
 K_PLUGIN_FACTORY(KCMMemoryFactory,
-		registerPlugin<KCMMemory>();
+        registerPlugin<KCMMemory>();
 )
 K_EXPORT_PLUGIN(KCMMemoryFactory("kcm_memory"))
 
 KCMMemory::KCMMemory(QWidget *parent, const QVariantList &) :
-	KCModule(KCMMemoryFactory::componentData(), parent) {
+    KCModule(KCMMemoryFactory::componentData(), parent) {
 
-	KAboutData *about = new KAboutData(I18N_NOOP("kcm_memory"), 0,
-			ki18n("KDE Panel Memory Information Control Module"),
-			0, KLocalizedString(), KAboutData::License_GPL,
-			ki18n("(c) 1998 - 2002 Helge Deller"));
+    KAboutData *about = new KAboutData(I18N_NOOP("kcm_memory"), 0,
+            ki18n("KDE Panel Memory Information Control Module"),
+            0, KLocalizedString(), KAboutData::License_GPL,
+            ki18n("(c) 1998 - 2002 Helge Deller"));
 
-	about->addAuthor(ki18n("Helge Deller"), KLocalizedString(), "deller@gmx.de");
-	setAboutData(about);
+    about->addAuthor(ki18n("Helge Deller"), KLocalizedString(), "deller@gmx.de");
+    setAboutData(about);
 
-	QString title, initial_str;
+    QString title, initial_str;
 
-	setButtons(Help);
+    setButtons(Help);
 
-	QVBoxLayout *top = new QVBoxLayout(this);
-	top->setMargin(0);
-	top->setSpacing(1);
+    QVBoxLayout *top = new QVBoxLayout(this);
+    top->setMargin(0);
+    top->setSpacing(1);
 
-	QGroupBox* informationGroup = initializeText();
-	top->addWidget(informationGroup, 1);
+    QGroupBox* informationGroup = initializeText();
+    top->addWidget(informationGroup, 1);
 
-	// Now the Graphics
-	QGroupBox* graphicsGroup = initializeCharts();
-	top->addWidget(graphicsGroup, 2);
+    // Now the Graphics
+    QGroupBox* graphicsGroup = initializeCharts();
+    top->addWidget(graphicsGroup, 2);
 
-	timer = new QTimer(this);
-	timer->start(100);
+    timer = new QTimer(this);
+    timer->start(100);
 
-	connect(timer, SIGNAL(timeout()), this, SLOT(updateDatas()));
-	
-	updateDatas();
+    connect(timer, SIGNAL(timeout()), this, SLOT(updateDatas()));
+    
+    updateDatas();
 }
 
 KCMMemory::~KCMMemory() {
-	/* stop the timer */
-	timer->stop();
+    /* stop the timer */
+    timer->stop();
 }
 
 QString KCMMemory::quickHelp() const {
-	return i18n("This display shows you the current memory usage of your system."
-		" The values are updated on a regular basis and give you an"
-		" overview of the physical and virtual memory being used.");
+    return i18n("This display shows you the current memory usage of your system."
+        " The values are updated on a regular basis and give you an"
+        " overview of the physical and virtual memory being used.");
 }
 
 QGroupBox* KCMMemory::initializeText() {
-	QGroupBox* informationGroup = new QGroupBox(i18n("Memory"));
+    QGroupBox* informationGroup = new QGroupBox(i18n("Memory"));
 
-	QHBoxLayout *hbox = new QHBoxLayout(informationGroup);
+    QHBoxLayout *hbox = new QHBoxLayout(informationGroup);
 
-	/* stretch the left side */
-	hbox->addStretch();
+    /* stretch the left side */
+    hbox->addStretch();
 
-	QString title;
+    QString title;
 
-	//TODO Use the more smart QGridLayout !!!
+    //TODO Use the more smart QGridLayout !!!
 
-	/* first create the Informationtext-Widget */
-	QVBoxLayout *vbox = new QVBoxLayout();
-	hbox->addLayout(vbox);
-	vbox->setSpacing(0);
-	for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; ++i) {
-		switch (i) {
-		case TOTAL_MEM:
-			title = i18n("Total physical memory:");
-			break;
-		case FREE_MEM:
-			title = i18n("Free physical memory:");
-			break;
+    /* first create the Informationtext-Widget */
+    QVBoxLayout *vbox = new QVBoxLayout();
+    hbox->addLayout(vbox);
+    vbox->setSpacing(0);
+    for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; ++i) {
+        switch (i) {
+        case TOTAL_MEM:
+            title = i18n("Total physical memory:");
+            break;
+        case FREE_MEM:
+            title = i18n("Free physical memory:");
+            break;
 #if !defined(Q_OS_SOLARIS) && !defined(Q_OS_NETBSD) && !defined(Q_OS_OPENBSD)
-		case SHARED_MEM:
-			title = i18n("Shared memory:");
-			break;
-		case BUFFER_MEM:
-			title = i18n("Disk buffers:");
-			break;
+        case SHARED_MEM:
+            title = i18n("Shared memory:");
+            break;
+        case BUFFER_MEM:
+            title = i18n("Disk buffers:");
+            break;
 #else
-			case ACTIVE_MEM:
-			title = i18n("Active memory:");
-			break;
-			case INACTIVE_MEM:
-			title = i18n("Inactive memory:");
-			break;
+            case ACTIVE_MEM:
+            title = i18n("Active memory:");
+            break;
+            case INACTIVE_MEM:
+            title = i18n("Inactive memory:");
+            break;
 #endif
-		case CACHED_MEM:
-			title = i18n("Disk cache:");
-			break;
-		case SWAP_MEM:
-			vbox->addSpacing(SPACING);
-			title = i18n("Total swap memory:");
-			break;
-		case FREESWAP_MEM:
-			title = i18n("Free swap memory:");
-			break;
-		default:
-			title = "";
-			break;
-		};
-		QLabel* labelWidget = new QLabel(title, this);
-		labelWidget->setTextInteractionFlags(Qt::TextSelectableByMouse);
-		labelWidget->setAlignment(Qt::AlignLeft);
-		vbox->addWidget(labelWidget);
-	}
-
-	vbox->addStretch();
-
-	/* then the memory-content-widgets */
-	for (int j = 0; j < 2; j++) {
-		vbox = new QVBoxLayout();
-		hbox->addLayout(vbox);
-		vbox->setSpacing(0);
-		for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; ++i) {
-			if (i == SWAP_MEM)
-				vbox->addSpacing(SPACING);
-			QLabel* labelWidget = new QLabel(this);
-			labelWidget->setTextInteractionFlags(Qt::TextSelectableByMouse);
-			labelWidget->setAlignment(Qt::AlignRight);
-			memorySizeLabels[i][j] = labelWidget;
-			vbox->addWidget(labelWidget);
-		}
-
-		vbox->addStretch();
-
-	}
-
-	/* stretch the right side */
-	hbox->addStretch();
-
-	return informationGroup;
-
+        case CACHED_MEM:
+            title = i18n("Disk cache:");
+            break;
+        case SWAP_MEM:
+            vbox->addSpacing(SPACING);
+            title = i18n("Total swap memory:");
+            break;
+        case FREESWAP_MEM:
+            title = i18n("Free swap memory:");
+            break;
+        default:
+            title = "";
+            break;
+        };
+        QLabel* labelWidget = new QLabel(title, this);
+        labelWidget->setTextInteractionFlags(Qt::TextSelectableByMouse);
+        labelWidget->setAlignment(Qt::AlignLeft);
+        vbox->addWidget(labelWidget);
+    }
+
+    vbox->addStretch();
+
+    /* then the memory-content-widgets */
+    for (int j = 0; j < 2; j++) {
+        vbox = new QVBoxLayout();
+        hbox->addLayout(vbox);
+        vbox->setSpacing(0);
+        for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; ++i) {
+            if (i == SWAP_MEM)
+                vbox->addSpacing(SPACING);
+            QLabel* labelWidget = new QLabel(this);
+            labelWidget->setTextInteractionFlags(Qt::TextSelectableByMouse);
+            labelWidget->setAlignment(Qt::AlignRight);
+            memorySizeLabels[i][j] = labelWidget;
+            vbox->addWidget(labelWidget);
+        }
+
+        vbox->addStretch();
+    }
+
+    /* stretch the right side */
+    hbox->addStretch();
+
+    return informationGroup;
 }
 
 QGroupBox* KCMMemory::initializeCharts() {
-	QGroupBox* chartsGroup = new QGroupBox(i18n("Charts"));
-
-	QHBoxLayout* chartsLayout = new QHBoxLayout(chartsGroup);
-	chartsLayout->setSpacing(1);
-	chartsLayout->setMargin(1);
-
-	//chartsLayout->addStretch(1);
-
-
-	
-	totalMemory = new ChartWidget(i18n("Total Memory"), 
-			i18n("This graph gives you an overview of the "
-			"<b>total sum of physical and virtual memory</b> "
-			"in your system."), 
-			new TotalMemoryChart(this), this);
-	
-	chartsLayout->addWidget(totalMemory);
-	chartsLayout->addSpacing(SPACING);
-
-
-	physicalMemory = new ChartWidget(i18n("Physical Memory"), 
-			i18n("This graph gives you an overview of "
-					"the <b>usage of physical memory</b> in your system."
-					"<p>Most operating systems (including Linux) "
-					"will use as much of the available physical "
-					"memory as possible as disk cache, "
-					"to speed up the system performance.</p>"
-					"<p>This means that if you have a small amount "
-					"of <b>Free Physical Memory</b> and a large amount of "
-					"<b>Disk Cache Memory</b>, your system is well "
-					"configured.</p>"), 
-			new PhysicalMemoryChart(this), this);
-	
-	chartsLayout->addWidget(physicalMemory);
-	chartsLayout->addSpacing(SPACING);
-
-	swapMemory = new ChartWidget(i18n("Swap Space"), 
-			i18n("<p>The swap space is the <b>virtual memory</b> "
-				"available to the system.</p> "
-				"<p>It will be used on demand and is provided "
-				"through one or more swap partitions and/or swap files.</p>"), 
-			new SwapMemoryChart(this), this);
-
-	
-	chartsLayout->addWidget(swapMemory);
-
-	//chartsLayout->addStretch(1);
-
-	return chartsGroup;
+    QGroupBox* chartsGroup = new QGroupBox(i18n("Charts"));
+
+    QHBoxLayout* chartsLayout = new QHBoxLayout(chartsGroup);
+    chartsLayout->setSpacing(1);
+    chartsLayout->setMargin(1);
+
+    //chartsLayout->addStretch(1);
+
+
+    totalMemory = new ChartWidget(i18n("Total Memory"),
+            i18n("This graph gives you an overview of the "
+            "<b>total sum of physical and virtual memory</b> "
+            "in your system."),
+            new TotalMemoryChart(this), this);
+
+    chartsLayout->addWidget(totalMemory);
+    chartsLayout->addSpacing(SPACING);
+
+    physicalMemory = new ChartWidget(i18n("Physical Memory"),
+            i18n("This graph gives you an overview of "
+                    "the <b>usage of physical memory</b> in your system."
+                    "<p>Most operating systems (including Linux) "
+                    "will use as much of the available physical "
+                    "memory as possible as disk cache, "
+                    "to speed up the system performance.</p>"
+                    "<p>This means that if you have a small amount "
+                    "of <b>Free Physical Memory</b> and a large amount of "
+                    "<b>Disk Cache Memory</b>, your system is well "
+                    "configured.</p>"),
+            new PhysicalMemoryChart(this), this);
+
+    chartsLayout->addWidget(physicalMemory);
+    chartsLayout->addSpacing(SPACING);
+
+    swapMemory = new ChartWidget(i18n("Swap Space"),
+            i18n("<p>The swap space is the <b>virtual memory</b> "
+                "available to the system.</p> "
+                "<p>It will be used on demand and is provided "
+                "through one or more swap partitions and/or swap files.</p>"),
+            new SwapMemoryChart(this), this);
+
+    chartsLayout->addWidget(swapMemory);
+
+    //chartsLayout->addStretch(1);
+
+    return chartsGroup;
 }
 
 void KCMMemory::updateDatas() {
 
-	/* get the Information from memory_linux, memory_fbsd */
-	fetchValues(); 
-	
-	updateMemoryText();
-	updateMemoryGraphics();
+    /* get the Information from memory_linux, memory_fbsd */
+    fetchValues(); 
+    
+    updateMemoryText();
+    updateMemoryGraphics();
 }
 
-
 void KCMMemory::updateMemoryText() {
-	/* update the byte-strings */
-	for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; i++) {
-		QLabel* label = memorySizeLabels[i][0];
-		if (memoryInfos[i] == NO_MEMORY_INFO)
-			label->clear();
-		else
-			label->setText(i18np("1 byte =", "%1 bytes =", memoryInfos[i]));
-	}
-
-	/* update the MB-strings */
-	for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; i++) {
-		QLabel* label = memorySizeLabels[i][1];
-		label->setText((memoryInfos[i] != NO_MEMORY_INFO) ? Chart::formattedUnit(memoryInfos[i]) : i18n("Not available."));
-	}
-
+    /* update the byte-strings */
+    for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; i++) {
+        QLabel* label = memorySizeLabels[i][0];
+        if (memoryInfos[i] == NO_MEMORY_INFO)
+            label->clear();
+        else
+            label->setText(i18np("1 byte =", "%1 bytes =", memoryInfos[i]));
+    }
+
+    /* update the MB-strings */
+    for (int i = TOTAL_MEM; i < MEM_LAST_ENTRY; i++) {
+        QLabel* label = memorySizeLabels[i][1];
+        label->setText((memoryInfos[i] != NO_MEMORY_INFO) ? Chart::formattedUnit(memoryInfos[i]) : i18n("Not available."));
+    }
 }
 
 void KCMMemory::updateMemoryGraphics() {
-	totalMemory->setMemoryInfos(memoryInfos);
-	totalMemory->refresh();
-
-	physicalMemory->setMemoryInfos(memoryInfos);
-	physicalMemory->refresh();
+    totalMemory->setMemoryInfos(memoryInfos);
+    totalMemory->refresh();
 
-	swapMemory->setMemoryInfos(memoryInfos);
-	swapMemory->refresh();
+    physicalMemory->setMemoryInfos(memoryInfos);
+    physicalMemory->refresh();
 
+    swapMemory->setMemoryInfos(memoryInfos);
+    swapMemory->refresh();
 }
 
 /* Include system-specific code */
 
 #ifdef Q_OS_LINUX
 #include "memory_linux.cpp"
+#elif defined(__APPLE__)
+#include "memory_osx.cpp"
 #elif defined(Q_OS_SOLARIS)
 #include "memory_solaris.cpp"
 #elif defined(Q_OS_FREEBSD) || defined(Q_OS_DRAGONFLY)
@@ -306,10 +299,10 @@ void KCMMemory::updateMemoryGraphics() {
 
 /* Default for unsupported systems */
 void KCMMemory::fetchValues() {
-	int i;
-	for (i = TOTAL_MEM; i < MEM_LAST_ENTRY; ++i) {
-		memoryInfos[i] = NO_MEMORY_INFO;
-	}
+    int i;
+    for (i = TOTAL_MEM; i < MEM_LAST_ENTRY; ++i) {
+        memoryInfos[i] = NO_MEMORY_INFO;
+    }
 }
 
 #endif
diff --git a/kinfocenter/Modules/memory/memory_osx.cpp b/kinfocenter/Modules/memory/memory_osx.cpp
new file mode 100644
index 00000000..f5f434c8
--- /dev/null
+++ b/kinfocenter/Modules/memory/memory_osx.cpp
@@ -0,0 +1,95 @@
+
+/*
+ *  Copyright (c) 2003 Benjamin Reed <ranger@befunk.com>
+ *
+ *  memory_osx.cpp is part of the KDE program kcminfo.  Copied wholesale
+ *  from memory_fbsd.cpp =)
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#include <unistd.h>
+#include <stdlib.h>
+
+#include <QFile>
+
+#include <mach/mach_init.h>
+#include <mach/mach_host.h>
+#include <mach/host_info.h>
+#include <sys/stat.h>
+#include <dirent.h>
+#include <kdebug.h>
+
+void KCMMemory::fetchValues()
+{
+
+    vm_statistics_data_t vm_info;
+    mach_msg_type_number_t info_count;
+    DIR *dirp;
+    struct dirent *dp;
+    t_memsize total;
+
+    info_count = HOST_VM_INFO_COUNT;
+    if (host_statistics(mach_host_self (), HOST_VM_INFO, (host_info_t)&vm_info, &info_count)) {
+        kDebug() << "could not get memory statistics";
+        return;
+    }
+
+    memoryInfos[TOTAL_MEM]    = MEMORY(vm_info.active_count + vm_info.inactive_count +
+        vm_info.free_count + vm_info.wire_count) * vm_page_size;
+    memoryInfos[FREE_MEM]     = MEMORY(vm_info.free_count) * vm_page_size;
+    memoryInfos[SHARED_MEM]   = NO_MEMORY_INFO;
+    memoryInfos[BUFFER_MEM]   = NO_MEMORY_INFO;
+    memoryInfos[CACHED_MEM]   = NO_MEMORY_INFO;
+
+    dirp = opendir("/private/var/vm");
+    if (!dirp) {
+        kDebug() << "unable to open /private/var/vm";
+        return;
+    }
+
+    total = 0;
+
+    while ((dp = readdir (dirp)) != NULL) {
+        struct stat sb;
+        char fname [MAXNAMLEN];
+
+        if (strncmp (dp->d_name, "swapfile", 8))
+            continue;
+
+        strcpy (fname, "/private/var/vm/");
+        strcat (fname, dp->d_name);
+        if (stat (fname, &sb) < 0)
+            continue;
+
+        total += sb.st_size;
+    }
+    closedir (dirp);
+
+    info_count = HOST_VM_INFO_COUNT;
+    if (host_statistics (mach_host_self (), HOST_VM_INFO,
+        (host_info_t) &vm_info, &info_count)) {
+            kDebug() << "unable to get VM info";
+    }
+
+    memoryInfos[SWAP_MEM]     = total;
+    // off_t used = (vm_info.pageouts - vm_info.pageins) * vm_page_size;
+    memoryInfos[FREESWAP_MEM] = NO_MEMORY_INFO;
+
+    /* free = MEMORY(vm_info.free_count) * vm_page_size;
+       used = MEMORY(vm_info.active_count) * vm_page_size;
+       total = MEMORY(vm_info.active_count + vm_info.inactive_count +
+        vm_info.free_count + vm_info.wire_count) * vm_page_size; */
+}
